{"version":3,"sources":["webpack:///webpack/bootstrap ee3b5b6e3c27917441e9","webpack:///external \"util\"","webpack:///external \"events\"","webpack:///external \"path\"","webpack:///./~/pg-types/index.js","webpack:///external \"assert\"","webpack:///external \"fs\"","webpack:///external \"stream\"","webpack:///./~/bindings","webpack:///./~/pg-native/~/pg-types/lib/arrayParser.js","webpack:///./~/pg-types/lib/arrayParser.js","webpack:///./~/postgres-array/index.js","webpack:///external \"url\"","webpack:///./src/configService.ts","webpack:///./src/setup.ts","webpack:///./~/commander/index.js","webpack:///./dbconfig.json","webpack:///./~/ap/index.js","webpack:///./src/db.ts","webpack:///./src/db/connMysql.ts","webpack:///./~/bindings/bindings.js","webpack:///./~/buffer-writer/index.js","webpack:///./~/generic-pool/lib/generic-pool.js","webpack:///./~/graceful-readlink/index.js","webpack:///./~/libpq/index.js","webpack:///./~/packet-reader/index.js","webpack:///./~/pg-connection-string/index.js","webpack:///./~/pg-native/index.js","webpack:///./~/pg-native/lib/copy-stream.js","webpack:///./~/pg-native/~/pg-types/index.js","webpack:///./~/pg-native/~/pg-types/lib/binaryParsers.js","webpack:///./~/pg-native/~/pg-types/lib/textParsers.js","webpack:///./~/pg-native/package.json","webpack:///./~/pg-types/lib/binaryParsers.js","webpack:///./~/pg-types/lib/textParsers.js","webpack:///./~/postgres-bytea/index.js","webpack:///./~/postgres-date/index.js","webpack:///./~/postgres-interval/index.js","webpack:///./~/semver/semver.js","webpack:///./~/split/index.js","webpack:///./~/through/index.js","webpack:///(webpack)/buildin/module.js","webpack:///./~/xtend/mutable.js","webpack:///external \"child_process\"","webpack:///external \"crypto\"","webpack:///external \"dns\"","webpack:///external \"net\"","webpack:///external \"string_decoder\"","webpack:///external \"tls\"","webpack:///./src/index.ts","webpack:///./src/cycle.ts","webpack:///./~/pg-promise/lib/utils/index.js","webpack:///external \"os\"","webpack:///./~/pg-promise/lib/formatting.js","webpack:///./~/pg-promise/lib/array.js","webpack:///./~/pg-promise/lib/events.js","webpack:///./~/pg-promise/lib/helpers/columnSet.js","webpack:///./~/pg-promise/lib/queryFile.js","webpack:///./~/pg-promise/~/pg/lib/defaults.js","webpack:///./~/manakin/lib/index.js","webpack:///./~/pg-promise/lib/errors/index.js","webpack:///./~/pg-promise/lib/errors/queryFile.js","webpack:///./~/pg-promise/lib/helpers/tableName.js","webpack:///./~/spex/lib/utils/static.js","webpack:///./~/pg-minify/lib/index.js","webpack:///./~/pg-promise/lib/result.js","webpack:///./~/pg-promise/~/pg/lib/utils.js","webpack:///./~/pg-minify/lib/error.js","webpack:///./~/pg-promise/lib/adapter.js","webpack:///./~/pg-promise/lib/helpers/column.js","webpack:///./~/pg-promise/lib/index.js","webpack:///./~/pg-promise/lib/query.js","webpack:///./~/pg-promise/lib/special.js","webpack:///./~/pg-promise/lib/txMode.js","webpack:///./~/pg-promise/lib/types/index.js","webpack:///./~/pg-promise/lib/utils","webpack:///./~/pg-promise/~/pg/lib/connection-parameters.js","webpack:///./~/pg-promise/~/pg/lib/connection.js","webpack:///./~/pg-promise/~/pg/lib/native/index.js","webpack:///./~/pg-promise/~/pg/lib/type-overrides.js","webpack:///./~/pg-promise/package.json","webpack:///./~/spex/lib/errors/batch.js","webpack:///./~/spex/lib/errors/page.js","webpack:///./~/spex/lib/errors/sequence.js","webpack:///./src/db/connPgSQL.ts","webpack:///./~/manakin/lib/writer.js","webpack:///./~/pg-minify/lib/parser.js","webpack:///./~/pg-promise/lib/async.js","webpack:///./~/pg-promise/lib/cnContext.js","webpack:///./~/pg-promise/lib/connect.js","webpack:///./~/pg-promise/lib/database.js","webpack:///./~/pg-promise/lib/errors/paramQuery.js","webpack:///./~/pg-promise/lib/errors/prepared.js","webpack:///./~/pg-promise/lib/errors/queryResult.js","webpack:///./~/pg-promise/lib/helpers/index.js","webpack:///./~/pg-promise/lib/helpers/methods/concat.js","webpack:///./~/pg-promise/lib/helpers/methods/insert.js","webpack:///./~/pg-promise/lib/helpers/methods/sets.js","webpack:///./~/pg-promise/lib/helpers/methods/update.js","webpack:///./~/pg-promise/lib/helpers/methods/values.js","webpack:///./~/pg-promise/lib/main.js","webpack:///./~/pg-promise/lib/promise.js","webpack:///./~/pg-promise/lib/stream.js","webpack:///./~/pg-promise/lib/task.js","webpack:///./~/pg-promise/lib/types/parameterized.js","webpack:///./~/pg-promise/lib/types/prepared.js","webpack:///./~/pg-promise/lib/utils/public.js","webpack:///./~/pg-promise/~/pg/lib/client.js","webpack:///./~/pg-promise/~/pg/lib/index.js","webpack:///./~/pg-promise/~/pg/lib/native/query.js","webpack:///./~/pg-promise/~/pg/lib/native/result.js","webpack:///./~/pg-promise/~/pg/lib/pool.js","webpack:///./~/pg-promise/~/pg/lib/query.js","webpack:///./~/pg-promise/~/pg/lib/result.js","webpack:///./~/pg-promise/~/pg/package.json","webpack:///./~/pg-promise/~/pgpass/lib/helper.js","webpack:///./~/pg-promise/~/pgpass/lib/index.js","webpack:///./~/spex/lib/adapter.js","webpack:///./~/spex/lib/errors/index.js","webpack:///./~/spex/lib/ext/batch.js","webpack:///./~/spex/lib/ext/page.js","webpack:///./~/spex/lib/ext/sequence.js","webpack:///./~/spex/lib/ext/stream/index.js","webpack:///./~/spex/lib/ext/stream/read.js","webpack:///./~/spex/lib/index.js","webpack:///./~/spex/lib/utils/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA,iC;;;;;;ACAA,mC;;;;;;ACAA,iC;;;;;;ACAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;;;;;;;AC5CD,mC;;;;;;ACAA,+B;;;;;;ACAA,mC;;;;;;;ACAA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AChGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACVA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC;AACrC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACpFA,gC;;;;;;;ACAA;;;;;;;;;;;;GAYG;;AAIH;IAQI;;MAEE;IACF,YAAY,OAAY;QAThB,OAAE,GAAG,mBAAO,CAAC,EAAkB,CAAC,CAAC;QAUrC,IAAI,CAAC;YACD,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;YAChC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;QACvC,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,GAAG,CAAC,kCAAkC,GAAG,GAAG,CAAC,CAAC;QAC1D,CAAC;IAEL,CAAC;IAEM,YAAY;QACf,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IACM,QAAQ;QACX,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,WAAW,CAAC,IAAa;QAC5B,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YACrB,wDAAwD;YACxD,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC;QAC3B,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAEM,OAAO,CAAC,KAAe;QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;CACJ;AAvCD,sCAuCC;;;;;;;;;ACzCD,qCAA0B;AAI1B;IACI,YAAoB,GAAiB;QAAjB,QAAG,GAAH,GAAG,CAAc;QAEnC,IAAI,GAAG,GAAG,IAAI,OAAE,CAAC,GAAG,CAAC,CAAC;QACtB,qCAAqC;QACrC,qDAAqD;QACrD,yBAAyB;IAE3B,CAAC;CAeJ;AAvBD,sBAuBC;;;;;;;ACzCD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA,WAAW,MAAM;AACjB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,MAAM;AACjB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,yCAAyC;AAC3E,KAAK;AACL,+BAA+B,yCAAyC;AACxE;AACA,GAAG;AACH;AACA,0CAA0C,kBAAkB;AAC5D;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,SAAS;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB;AACA;;AAEA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;ACplCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,E;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC/CA;;;;;;;;;;;;GAYG;;AAIH,6CAA2C;AAK3C;IAMI,YAAoB,cAA6B;QAA7B,mBAAc,GAAd,cAAc,CAAe;QAC7C,6CAA6C;QAC7C,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChD,KAAK,IAAI;gBACL,IAAI,CAAC,WAAW,GAAG,IAAI,qBAAS,CAAC,cAAc,CAAC,CAAC,CAAC,2BAA2B;gBAC7E,KAAK,CAAC;YACV,KAAK,OAAO;gBACR,IAAI,CAAC,WAAW,GAAG,mBAAO,CAAC,EAAgB,CAAC,CAAC;gBAC7C,KAAK,CAAC;YACV,QAAQ;QAEZ,CAAC;QACD,oEAAoE;QACpE,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IACD,OAAO;QAEL,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YAEhC,qBAAqB;YACrB,sBAAsB;YACtB,qBAAqB;YACrB,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG;YACR,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,CAAC;YACjC,MAAM,CAAC,GAAG,CAAC;YACX,oCAAoC;QACxC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAEV,kEAAkE;IAEtE,CAAC;IACD,YAAY,CAAC,KAAe,EAAE,QAAe;QACzC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC;QACrC,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,EAAC;YAC9B,4BAA4B;YAC5B,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAC7D,CAAC;QACD,oCAAoC;IACxC,CAAC;IAGO,UAAU;QACd,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;CACJ;AApDD,gBAoDC;;;;;;;;;ACrED;IAIE,YAAoB,GAAiB;QAAjB,QAAG,GAAH,GAAG,CAAc;QACjC,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IACD,SAAS;QACL,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IACzC,CAAC;IAEC,gBAAgB;QACZ,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAAA,CAAC;IACF,QAAQ;QACJ,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IACD,OAAO;QACH,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC;IACD,cAAc;QACV,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAAA,CAAC;CACL;AAvBD,8BAuBC;;;;;;;;;AC1BD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,YAAY;AACZ,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,KAAK;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,OAAO;AAClB;AACA,WAAW,SAAS;AACpB;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,YAAY;AACvB;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;;AAEtD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iDAAiD,8FAA8F;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,QAAQ;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,6DAA6D,sCAAsC;AACnG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACpjBA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;ACTA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACtWA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;AC7DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,gCAAgC;AAC1D,GAAG;AACH,0BAA0B,8CAA8C;AACxE;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;AClSA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7JA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;;;;;;AC9CA;AACA;AACA;AACA,8DAA8D,mDAAmD;AACjH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC7PA;;AAEA;AACA;AACA;AACA,yBAAyB,GAAG,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,GAAG;;AAE9E;AACA;AACA;AACA,wBAAwB,GAAG,MAAM,EAAE,MAAM,EAAE;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,YAAY,aAAa;;AAEzB;AACA;AACA;;AAEA;AACA,aAAa,aAAa;;AAE1B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,aAAa,WAAW;AACxB;AACA;AACA,aAAa,8BAA8B;AAC3C,aAAa,+BAA+B;AAC5C,aAAa,6BAA6B;AAC1C,aAAa,8BAA8B;AAC3C,cAAc,iCAAiC;AAC/C,cAAc,iCAAiC;AAC/C;AACA,kBAAkB,eAAe;AACjC,oBAAoB,iBAAiB;AACrC,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,0CAA0C,EAAE;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B,uBAAuB,EAAE;AACxD;;AAEA;AACA,gCAAgC;AAChC,6BAA6B;AAC7B,6BAA6B;AAC7B,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA,oCAAoC;AACpC,oCAAoC;AACpC,uCAAuC;AACvC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA,iCAAiC;AACjC,iCAAiC;AACjC,iCAAiC;AACjC;AACA;AACA;AACA;AACA,gCAAgC;AAChC,mCAAmC;AACnC;;AAEA;AACA;AACA;;;;;;;AC/QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,kBAAkB;AAClB;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA,E;;;;;;;;ACrGA;AACA;AACA;AACA,8DAA8D,mDAAmD;AACjH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC7PA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,cAAc,aAAa;;AAE3B;AACA;AACA;;AAEA;AACA,eAAe,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B,uBAAuB,EAAE;AACxD;;AAEA;AACA,yBAAyB,aAAa;;AAEtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,aAAa;;AAE1D;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC;AAChC,6BAA6B;AAC7B,6BAA6B;AAC7B,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAC5B,6BAA6B;AAC7B;AACA;AACA,oCAAoC;AACpC,oCAAoC;AACpC,oCAAoC;AACpC,uCAAuC;AACvC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA,iCAAiC;AACjC,iCAAiC;AACjC,iCAAiC;AACjC;AACA;AACA,uCAAuC;AACvC,wCAAwC;AACxC,gCAAgC;AAChC,iCAAiC;AACjC,mCAAmC;AACnC,kCAAkC;AAClC,mCAAmC;AACnC;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACpLA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,iBAAiB,EAAE;AACnB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;;AAEA,qBAAqB,GAAG,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,GAAG;AAC1E,iBAAiB,GAAG,MAAM,EAAE,MAAM,EAAE;AACpC,4BAA4B,EAAE,QAAQ,EAAE,QAAQ,EAAE;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACjFA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;;;;;;;ACjEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,sCAAsC;AACtC,oCAAoC;AACpC,sCAAsC;AACtC,oCAAoC;AACpC,sCAAsC;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;ACtqCA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;AC9DA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,oCAAoC;AACpC,4BAA4B;;AAE5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;ACrBA;;AAEA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AChBA,0C;;;;;;ACAA,mC;;;;;;ACAA,gC;;;;;;ACAA,gC;;;;;;ACAA,2C;;;;;;ACAA,gC;;;;;;;;ACAA,wCAAgC;AAChC,gDAAgD;AAChD,wCAAgC;AAEhC,IAAI,OAAO,GAAG,mBAAO,CAAC,EAAW,CAAC,CAAC;AACnC,OAAO;KACJ,MAAM,CAAC,+BAA+B,EAAE,qDAAqD,CAAC;KAC9F,MAAM,CAAC,8BAA8B,EAAE,oCAAoC,CAAC;KAC5E,MAAM,CAAC,6BAA6B,EAAE,uCAAuC,CAAC;KAC9E,MAAM,CAAC,qBAAqB,EAAE,qCAAqC,CAAC;KACtE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAErB,OAAO,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,cAAc,EAAE,CAAC;AAElD,6CAA6C;AAC7C,wBAAwB;AACxB,IAAI,EAAE,GAAG,IAAI,6BAAa,CAAC,OAAO,CAAC,CAAC;AAEpC,IAAI,CAAC,GAAG,IAAI,aAAK,CAAC,EAAE,CAAC,CAAC;AACtB,CAAC,CAAC,KAAK,EAAE,CAAC;AAEV,IAAI,CAAC,GAAG,IAAI,aAAK,CAAC,EAAE,CAAC,CAAC;;;;;;;;;;AClBtB;IAEI,YAA2B,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAErD,CAAC;IAEM,KAAK;QAER,oEAAoE;QAEpE,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YAEhC,qBAAqB;YACrB,sBAAsB;YACtB,qBAAqB;YACrB,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG;YACR,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IAGP,CAAC;CAEJ;AAvBD,sBAuBC;;;;;;;;AC1BD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;ACxKA,+B;;;;;;;ACAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,4GAA4G;AAC1I;AACA,0DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,IAAI,2BAA2B;AAC/B;AACA,cAAc,SAAS;AACvB,IAAI,2BAA2B;AAC/B;AACA,cAAc,SAAS;AACvB,IAAI,+BAA+B;AACnC;AACA,cAAc,SAAS;AACvB,IAAI,+BAA+B;AACnC;AACA,cAAc,SAAS;AACvB,IAAI,6BAA6B;AACjC;AACA,cAAc,SAAS;AACvB,IAAI,2BAA2B;AAC/B;AACA,cAAc,SAAS;AACvB,IAAI,2BAA2B;AAC/B;AACA,cAAc,SAAS;AACvB,IAAI,+BAA+B;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA,eAAe,QAAQ;AACvB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA,qEAAqE,mCAAmC;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,2BAA2B;AAC/E;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,WAAW,IAAI,IAAI,IAAI;AAChE;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA,oEAAoE,mCAAmC;AACvG;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qCAAqC;AACzD;AACA,wDAAwD;AACxD,0BAA0B,gBAAgB;AAC1C;AACA,UAAU,2BAA2B;AACrC;AACA;AACA;AACA,wEAAwE,mCAAmC;AAC3G;AACA;AACA;AACA,4EAA4E,mCAAmC;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;ACjtBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA,KAAK;AACL,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA,KAAK;AACL,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA,KAAK;AACL,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA,KAAK;AACL,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC7FA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB,kBAAkB,aAAa;AAClG;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA,gBAAgB;AAChB,8EAA8E,eAAe;AAC7F;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,uBAAuB;AAC/F,SAAS,aAAa;AACtB;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA,gBAAgB,6EAA6E,eAAe;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iFAAiF,wBAAwB;AACzG,QAAQ,4BAA4B,GAAG,wBAAwB,GAAG,sBAAsB,MAAM,8BAA8B;AAC5H;AACA,eAAe,cAAc;AAC7B;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,8EAA8E,eAAe;AAC7F;AACA,eAAe,cAAc;AAC7B;AACA,2GAA2G;AAC3G,YAAY,4BAA4B;AACxC;AACA,eAAe,gBAAgB;AAC/B;AACA,uGAAuG;AACvG;AACA;AACA,gBAAgB;AAChB;AACA,kCAAkC,wBAAwB,GAAG,4BAA4B,MAAM,wBAAwB;AACvH;AACA;AACA,sEAAsE,wBAAwB;AAC9F;AACA,QAAQ,wBAAwB,MAAM,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,+CAA+C,eAAe;AAC9D;AACA,+CAA+C,sBAAsB,MAAM,8BAA8B;AACzG,QAAQ,wBAAwB,GAAG,4BAA4B,MAAM,wBAAwB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,iEAAiE,wBAAwB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClfA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B,mBAAmB,wCAAwC;AACjH;AACA;AACA,wHAAwH,4BAA4B;AACpJ,yBAAyB,uCAAuC,4BAA4B;AAC5F,kEAAkE,2BAA2B;AAC7F;AACA,kDAAkD,mCAAmC;AACrF;AACA,WAAW,OAAO;AAClB;AACA,WAAW,0BAA0B,cAAc;AACnD;AACA;AACA,2CAA2C,kCAAkC,gBAAgB,kCAAkC;AAC/H;AACA,8CAA8C,4BAA4B,MAAM,4BAA4B;AAC5G;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,IAAI,wCAAwC;AAC5C,IAAI,oCAAoC;AACxC,IAAI,oCAAoC;AACxC,IAAI,4CAA4C;AAChD,IAAI,sCAAsC;AAC1C,IAAI,oCAAoC;AACxC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,gDAAgD;AAChD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,OAAO,QAAQ,sCAAsC;AACrD;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,qGAAqG,4BAA4B,MAAM;AACvI;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA,cAAc,IAAI,GAAG,MAAM,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD;AACA;AACA;AACA,eAAe,uCAAuC;AACtD,+EAA+E,kCAAkC;AACjH,iCAAiC;AACjC;AACA;AACA,iBAAiB;AACjB,YAAY,kCAAkC;AAC9C;AACA;AACA,QAAQ,4BAA4B;AACpC,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,2DAA2D,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,kBAAkB;AACjF;;AAEA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD;AACA;AACA;AACA,eAAe,uCAAuC;AACtD,+EAA+E,kCAAkC;AACjH,iCAAiC;AACjC;AACA;AACA;AACA,QAAQ,4BAA4B;AACpC,QAAQ;AACR;AACA,iBAAiB;AACjB,YAAY,kCAAkC;AAC9C;AACA;AACA;AACA;AACA;AACA,iEAAiE,kBAAkB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,oCAAoC,kBAAkB;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC/jBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G;AAC9G,QAAQ,yBAAyB;AACjC;AACA,2EAA2E,2CAA2C;AACtH;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,mDAAmD,wBAAwB;AAC3E;AACA,aAAa;AACb;AACA;AACA,IAAI,2CAA2C;AAC/C,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,oCAAoC;AACpC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,+CAA+C,2CAA2C;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sDAAsD,gBAAgB;AACtE;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA,iFAAiF,kCAAkC;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClVA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mFAAgF,YAAY,EAAE;AAC9F,CAAC;;;;;;;;AC3DD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;;;;;;;;AC1CA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,IAAI,2DAA2D;AAC/D;AACA,wDAAwD,wBAAwB;AAChF;AACA,cAAc,SAAS;AACvB,IAAI,6DAA6D;AACjE;AACA,wDAAwD,yBAAyB;AACjF;AACA,cAAc,SAAS;AACvB,IAAI,2CAA2C;AAC/C;AACA,wDAAwD,gBAAgB;AACxE;AACA,cAAc,SAAS;AACvB,IAAI,+CAA+C;AACnD;AACA;AACA;AACA,cAAc,4BAA4B;AAC1C,qCAAqC,+CAA+C;AACpF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/CA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,2CAA2C,gCAAgC,aAAa;AAC5F;AACA,+CAA+C,gBAAgB;AAC/D;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,4CAA4C,gBAAgB;AAC5D;AACA,cAAc,OAAO;AACrB,wCAAwC,gBAAgB;AACxD;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;AC9FA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB,UAAU,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA,WAAW,OAAO;AAClB;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AChHA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3DA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACRA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2BAA2B;AACzD,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AClCA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;ACrIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK,6DAA6D;AAClE,KAAK,sDAAsD;AAC3D,KAAK,2DAA2D;AAChE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,6BAA6B,iCAAiC;AAC9D,0CAA0C,uDAAuD;AACjG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,0BAA0B,oEAAoE;AAC9F,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC9DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxDA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mGAAmG,kCAAkC;AACrI;AACA;AACA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA;AACA;AACA,IAAI,kCAAkC;AACtC;AACA;AACA,kFAAkF,mCAAmC;AACrH;AACA,2BAA2B,wCAAwC;AACnE;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gDAAgD,kCAAkC;AAClF;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,oBAAoB,4BAA4B,MAAM,wBAAwB,sBAAsB,4BAA4B;AAChI,IAAI,4BAA4B;AAChC;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA,oBAAoB,4BAA4B,4BAA4B,wBAAwB;AACpG,IAAI,4BAA4B,MAAM,4BAA4B;AAClE;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,sBAAsB,oDAAoD;AAC1E;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kEAAkE,4BAA4B;AAC9F;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gDAAgD,kCAAkC;AAClF;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,oBAAoB,4BAA4B,MAAM,wBAAwB,sBAAsB,4BAA4B;AAChI,IAAI,4BAA4B;AAChC;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA,oBAAoB,4BAA4B,4BAA4B,wBAAwB;AACpG,IAAI,4BAA4B,MAAM,4BAA4B;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D,wCAAwC;AACrG;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D,wCAAwC;AACrG;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;AChZA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACbA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD;;AAEjD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC;AACvC,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,sCAAsC;AACtC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACpOA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACjBA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA6C,8BAA8B,UAAU,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,IAAI,6CAA6C;AACjD;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClLA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;;;;;;;ACNA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;AC5FA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvoBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;;;;;;;AC9nBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,IAAI,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,oCAAoC;AACpC,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AChMA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,kBAAkB;AAClB;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,E;;;;;;;AC9HA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,YAAY,cAAc;AACjF;AACA;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,MAAM;AACpB,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA,6EAA6E,YAAY;AACzF;AACA,eAAe;AACf;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,2BAA2B;AAC3B,uFAAuF;AACvF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACpKA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,WAAW,cAAc;AAChF;AACA;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,eAAe;AACf;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW;AACf,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACpIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,eAAe,cAAc;AACpF;AACA;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,eAAe;AACf;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;ACtHA;IAKI,2BAA2B;IAE3B,YAAoB,GAAkB;QAAlB,QAAG,GAAH,GAAG,CAAe;QAJ9B,SAAI,GAAG,mBAAO,CAAC,EAAY,CAAC,CAAC;QAKjC,IAAI,CAAC;YACD,IAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC;QACD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACT,OAAO,CAAC,GAAG,CAAC,kCAAkC,GAAG,GAAG,CAAC,CAAC;QAC1D,CAAC;IACL,CAAC;IACD,SAAS;QACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,sBAAsB;QAC1D,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QACnE,+DAA+D;QAC/D,6BAA6B;IACjC,CAAC;IAED,0GAA0G;IAE1G,gBAAgB;QACZ,IAAI,CAAC;YACD,MAAM,CAAC,cAAc,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QAChH,CAAC;QACD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACT,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,GAAG,CAAC,CAAC;QAC7D,CAAC;IACL,CAAC;IACD,OAAO;QAEH,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAEhB,CAAC;IAEO,cAAc;QACpB,IAAI,KAAK,GAAG;YACV,IAAI,EAAC,EAAE;YACP,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE,EAAE;YACR,IAAI,EAAC,EAAE;YACP,QAAQ,EAAE,EAAE;SACb,CAAC;QAGF,IAAG,CAAC;YACA,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;YAC7C,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;YAC/C,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;YACzC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;YAC3C,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;QACrD,CAAC;QACD,KAAK,EAAC,GAAG,CAAC,EAAC;YACT,OAAO,CAAC,GAAG,CAAC,6BAA6B,GAAI,GAAG,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IAEf,CAAC;CACJ;AA9DD,8BA8DC;;;;;;;;ACjED;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,OAAO;AACtB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACrKA;;AAEA;AACA;;AAEA;;AAEA;AACA,sBAAsB;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C;;AAE/C;AACA;AACA,mDAAmD;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC7NA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACnCA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA,iBAAiB;AACjB,iBAAiB;AACjB,2BAA2B;AAC3B,iBAAiB;AACjB,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;ACjGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA;AACA,8DAA8D,eAAe;AAC7E,oGAAoG;AACpG;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAe;AAC9D;AACA;AACA,uCAAuC,+CAA+C;AACtF;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA,oBAAoB,sFAAsF;AAC1G;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,IAAI,2BAA2B;AAC/B,IAAI,yBAAyB;AAC7B,IAAI,uBAAuB;AAC3B,IAAI,mCAAmC;AACvC,IAAI,yBAAyB;AAC7B,IAAI,qCAAqC;AACzC,IAAI,uBAAuB;AAC3B,IAAI,yBAAyB;AAC7B,IAAI,yBAAyB;AAC7B,IAAI,6BAA6B;AACjC,IAAI,uBAAuB;AAC3B,IAAI,yBAAyB;AAC7B,IAAI,6BAA6B;AACjC,IAAI,yBAAyB;AAC7B,IAAI,qBAAqB;AACzB,IAAI,+BAA+B;AACnC,IAAI,+BAA+B;AACnC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,yBAAyB,MAAM,qBAAqB;AACtG;AACA;AACA,oDAAoD,6BAA6B;AACjF;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,qDAAqD,6BAA6B;AAClF;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,sCAAsC,eAAe;AACrD,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B,QAAQ;AACR;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA,8BAA8B,wBAAwB,MAAM,wBAAwB;AACpF,+BAA+B,kBAAkB,MAAM,yBAAyB;AAChF,UAAU,gBAAgB;AAC1B;AACA,eAAe,YAAY;AAC3B;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,QAAQ;AACR;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,4DAA4D,eAAe;AAC3E;AACA;AACA;AACA,oCAAoC,+CAA+C;AACnF;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,kCAAkC;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yDAAyD,+CAA+C;AACxG;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yDAAyD,+CAA+C;AACxG;AACA,0BAA0B;AAC1B,+DAA+D,+CAA+C;AAC9G;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yDAAyD,+CAA+C;AACxG;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+DAA+D,+CAA+C;AAC9G;AACA,0BAA0B;AAC1B;AACA;AACA,YAAY,uBAAuB;AACnC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sDAAsD,qCAAqC;AAC3F;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qCAAqC;AACjD,YAAY,uBAAuB;AACnC,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,mBAAmB,YAAY,0BAA0B,oCAAoC;AAC7F;AACA,qBAAqB;AACrB;AACA,qDAAqD,2BAA2B;AAChF;AACA;AACA,YAAY,2BAA2B;AACvC,YAAY;AACZ;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yBAAyB;AACrE;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB,yBAAyB;AAC9C,uDAAuD,mCAAmC;AAC1F;AACA;AACA,YAAY,mCAAmC;AAC/C,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,qEAAqE;AACrE;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,YAAY,uBAAuB;AACnC,YAAY,yBAAyB;AACrC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,YAAY;AACZ;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,gBAAgB;AAChB,YAAY;AACZ;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,yGAAyG,uBAAuB;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,kCAAkC,wBAAwB,MAAM,wBAAwB;AACxF,mCAAmC,kBAAkB,MAAM,yBAAyB;AACpF,cAAc,gBAAgB;AAC9B;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,oBAAoB;AACpB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,YAAY,uBAAuB;AACnC,YAAY,uBAAuB;AACnC,YAAY;AACZ;AACA;AACA;AACA;AACA,oCAAoC;AACpC,YAAY;AACZ;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uBAAuB,GAAG,qBAAqB,GAAG,6BAA6B,iBAAiB,mBAAmB;AAC/H;AACA;AACA,sBAAsB,WAAW;AACjC;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB,YAAY,qBAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA,YAAY,uBAAuB,GAAG,qBAAqB,GAAG,6BAA6B,iBAAiB,mBAAmB;AAC/H;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,sCAAsC;AACtC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,sBAAsB;AAClE;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;;;;;;;;AC7xCA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,6DAA6D,gCAAgC,aAAa;AAC9G;AACA,kEAAkE,yBAAyB;AAC3F,4CAA4C,aAAa;AACzD;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,sBAAsB;AACpC,aAAa,4BAA4B;AACzC;AACA,mCAAmC,yBAAyB,SAAS,gBAAgB;AACrF;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC7FA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,2DAA2D,gCAAgC,aAAa;AAC5G;AACA,kEAAkE,wBAAwB;AAC1F,4CAA4C,mBAAmB;AAC/D;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,sBAAsB;AACpC,aAAa,4BAA4B;AACzC;AACA,mCAAmC,wBAAwB,SAAS,gBAAgB;AACpF;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC9FA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA,0DAA0D,aAAa;AACvE;AACA,wEAAwE,8BAA8B;AACtG;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK,4DAA4D;AACjE,KAAK,0DAA0D;AAC/D,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,kBAAkB;AACnH;AACA,gEAAgE,yBAAyB;AACzF,IAAI,uBAAuB,GAAG,mCAAmC,MAAM,yBAAyB;AAChG;AACA;AACA;AACA,6CAA6C;AAC7C,kDAAkD,uBAAuB,MAAM;AAC/E,kDAAkD,uBAAuB,MAAM;AAC/E;AACA,6EAA6E,wBAAwB;AACrG;AACA,mCAAmC,aAAa;AAChD;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB,aAAa,2BAA2B;AACxC;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,cAAc,OAAO;AACrB,iBAAiB,uDAAuD;AACxE;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kBAAkB,GAAG,yBAAyB,GAAG,uBAAuB;AAC5E,IAAI,mCAAmC,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;AChLA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,IAAI,kCAAkC;AACtC;AACA,cAAc,SAAS;AACvB,IAAI,kCAAkC;AACtC;AACA,cAAc,SAAS;AACvB,IAAI,4BAA4B;AAChC;AACA,cAAc,SAAS;AACvB,IAAI,4BAA4B;AAChC;AACA,cAAc,SAAS;AACvB,IAAI,4BAA4B;AAChC;AACA,cAAc,SAAS;AACvB,IAAI,4BAA4B;AAChC;AACA,cAAc,SAAS;AACvB,IAAI,wBAAwB;AAC5B;AACA,cAAc,SAAS;AACvB,IAAI,4BAA4B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4CAA4C;AACvD;AACA;AACA,eAAe,sCAAsC,iBAAiB,2BAA2B;AACjG,QAAQ,gBAAgB;AACxB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D,gDAAgD,aAAa;AAC7D;AACA;AACA,QAAQ,2EAA2E;AACnF,QAAQ,6DAA6D;AACrE,QAAQ,gCAAgC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK,SAAS;AACd;;AAEA;AACA,+EAA+E;AAC/E,2BAA2B,OAAO;AAClC;;AAEA;;AAEA;AACA;AACA;AACA,8DAA8D,kCAAkC;AAChG;AACA,cAAc,oBAAoB;AAClC;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA,cAAc,OAAO;AACrB,qDAAqD,kCAAkC;AACvF;AACA;AACA,IAAI;AACJ;;;;;;;;AC/FA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA,yEAAyE,mCAAmC;AAC5G;AACA,iDAAiD,mCAAmC;AACpF;AACA,oFAAoF,2BAA2B;AAC/G;AACA;AACA,WAAW,uCAAuC;AAClD;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE;AACA,4BAA4B,kCAAkC,sBAAsB;AACpF;AACA;AACA,mBAAmB,kCAAkC;AACrD,IAAI,2BAA2B;AAC/B;AACA,WAAW,0BAA0B,cAAc;AACnD;AACA;AACA,8EAA8E,kCAAkC;AAChH;AACA,eAAe,2BAA2B;AAC1C;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,4BAA4B;AACjC,KAAK,kCAAkC;AACvC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,qBAAqB;AACrB,qBAAqB,uBAAuB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,kBAAkB;AACzE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;AC5IA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,4BAA4B;AACpF;AACA,WAAW,OAAO;AAClB;AACA;AACA,kDAAkD,mCAAmC;AACrF;AACA,WAAW,uCAAuC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK,4BAA4B;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACvEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA,yEAAyE,mCAAmC;AAC5G;AACA,iDAAiD,mCAAmC;AACpF;AACA,oFAAoF,2BAA2B;AAC/G;AACA;AACA,WAAW,uCAAuC;AAClD;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE;AACA,4BAA4B,kCAAkC,sBAAsB;AACpF;AACA;AACA,mBAAmB,kCAAkC;AACrD,IAAI,2BAA2B,+DAA+D,0DAA0D;AACxJ;AACA,WAAW,0BAA0B,cAAc;AACnD;AACA;AACA,8EAA8E,kCAAkC;AAChH;AACA,eAAe,2BAA2B;AAC1C;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,4BAA4B;AACjC,KAAK,kCAAkC;AACvC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,qBAAqB;AACrB,qBAAqB,8BAA8B,GAAG,+BAA+B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iCAAiC;AAC7E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClNA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA,kDAAkD,mCAAmC;AACrF;AACA,oFAAoF,2BAA2B;AAC/G;AACA;AACA;AACA;AACA,WAAW,uCAAuC;AAClD;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE;AACA,mBAAmB,kCAAkC;AACrD,IAAI,2BAA2B;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK,4BAA4B;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB,uBAAuB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;;;;;;;AC3GA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA,WAAW,SAAS;AACpB,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,WAAW,SAAS;AACpB,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA,WAAW,SAAS;AACpB,iBAAiB,4BAA4B;AAC7C;AACA,WAAW,SAAS;AACpB,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,WAAW,SAAS;AACpB,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA,WAAW,SAAS;AACpB,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA,WAAW,SAAS;AACpB,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;;AAE7C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA,sBAAsB,oDAAoD;AAC1E;AACA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;;AAEA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iBAAiB;AACzB,QAAQ,gBAAgB;AACxB,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA,sBAAsB,gDAAgD;AACtE;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;;AAEA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA,QAAQ,qBAAqB;AAC7B;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA,QAAQ,yBAAyB;AACjC;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA,QAAQ,wBAAwB;AAChC;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;;;AAGA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,QAAQ,aAAa;AACrB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA,QAAQ,YAAY;AACpB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,QAAQ,8BAA8B;AACtC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACpXA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,kCAAkC;AAClC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;ACjHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B,0EAA0E,oBAAoB,MAAM,kBAAkB;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,IAAI,uBAAuB;AAC3B,IAAI,6BAA6B;AACjC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA,mBAAmB;AACnB,gFAAgF,eAAe;AAC/F;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA,mBAAmB;AACnB,8DAA8D,yBAAyB,MAAM,qBAAqB;AAClH;AACA,kBAAkB,KAAK;AACvB;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,4BAA4B;;AAE5B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,GAAG,UAAU;AAC5D;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,YAAY,UAAU;AACpE;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,mBAAmB,UAAU;AAC/E;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC;AAClC;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,oCAAoC;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,yBAAyB;AACzB,8CAA8C;AAC9C;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACvTA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,kBAAkB,UAAU,EAAE;AAC9E;AACA,qBAAqB,yBAAyB;AAC9C;AACA,wDAAwD,uCAAuC,MAAM,yCAAyC;AAC9I;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C,+BAA+B,yBAAyB;AACxD;AACA;AACA,gDAAgD,6DAA6D;AAC7G;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,+CAA+C,6DAA6D;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD,aAAa;AACrE,6BAA6B,6DAA6D;AAC1F;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;;;;;;;;AC7TA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,wBAAwB,UAAU,EAAE;AACnF;AACA;AACA;AACA,wDAAwD,sCAAsC,GAAG;AACjG,QAAQ,kCAAkC;AAC1C;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD,+BAA+B,wBAAwB;AACvD;AACA;AACA,gDAAgD,2DAA2D;AAC3G;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,IAAI,2DAA2D;AAC/D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA,sCAAsC,gBAAgB;AACtD;AACA,4CAA4C,kCAAkC;AAC9E,iDAAiD,kCAAkC;AACnF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,cAAc;AACd;AACA;AACA,+CAA+C,2DAA2D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD,mBAAmB;AAC3E,6BAA6B,2DAA2D;AACxF;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;;;;;;;;;ACzXA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD;AAClD;AACA;AACA,uBAAuB;AACvB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,oCAAoC;AAC7F;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,IAAI,sCAAsC;AAC1C,IAAI;AACJ;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D,uCAAuC,aAAa;AACpD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,IAAI,4BAA4B;AAChC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gBAAgB;AAC1D;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,aAAa,+BAA+B;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,sCAAsC;AACtC,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA,yBAAyB,QAAQ;AACjC;AACA,mBAAmB,OAAO,6CAA6C;AACvE;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,mFAAmF;AACnF;AACA,qBAAqB,OAAO,iDAAiD;AAC7E;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,2BAA2B;AAC1F;AACA,aAAa;AACb;AACA;AACA;AACA,IAAI,4BAA4B;AAChC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oCAAoC,+DAA+D;AACnG;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,gEAAgE;AAChE;;AAEA;AACA;AACA,SAAS,MAAM;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,IAAI,8BAA8B;AAClC;AACA,cAAc,SAAS;AACvB,IAAI,oCAAoC;AACxC;AACA,cAAc,SAAS;AACvB,IAAI,4BAA4B;AAChC;AACA,cAAc,SAAS;AACvB,IAAI,sCAAsC;AAC1C;AACA,cAAc,SAAS;AACvB,IAAI,0CAA0C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACzhBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACpVA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACzFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3BA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AClGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC,4CAA4C;;AAE5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA,kBAAkB,cAAc;AAChC;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;;AAEA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,kBAAkB;AAClB;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA,E;;;;;;;AC5GA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oEAAoE;AACpE;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,oBAAoB;AACxC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,0BAA0B;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;ACrOA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;AACL;;;;;;;;ACtBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB;AACtE;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,wBAAwB;AACxB,OAAO;AACP,+BAA+B;AAC/B,OAAO;AACP,mCAAmC;AACnC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;AC7EA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mCAAmC;AACvC;AACA,cAAc,SAAS;AACvB,IAAI,mCAAmC;AACvC;AACA,6DAA6D,YAAY;AACzE;AACA,cAAc,SAAS;AACvB,IAAI,iCAAiC;AACrC;AACA,6DAA6D,WAAW;AACxE;AACA,cAAc,SAAS;AACvB,IAAI,yCAAyC;AAC7C;AACA,6DAA6D,eAAe;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,GAAG,UAAU;AAChC;AACA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA,SAAS,mCAAmC;AAC5C;AACA,WAAW,MAAM;AACjB,2BAA2B,gBAAgB;AAC3C;AACA,6DAA6D,mCAAmC;AAChG;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mCAAmC;AAC5C,eAAe,wBAAwB;AACvC;AACA;AACA,wEAAwE,gBAAgB;AACxF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D,4FAA4F;AAC5F;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B;AAC7B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA,iCAAiC;AACjC,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;ACvJA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,YAAY,UAAU;AACxC;AACA,mEAAmE,gBAAgB;AACnF;AACA,uDAAuD,gBAAgB;AACvE,gCAAgC,YAAY;AAC5C;AACA,WAAW,mBAAmB;AAC9B,sCAAsC,gBAAgB,mEAAmE,gBAAgB;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,YAAY;AACpE;AACA;AACA;AACA,IAAI,iCAAiC;AACrC;AACA;AACA,qCAAqC,iCAAiC;AACtE;AACA;AACA,+DAA+D,mCAAmC;AAClG;AACA,WAAW,mBAAmB;AAC9B,wEAAwE,YAAY;AACpF;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iCAAiC;AACjE;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,sDAAsD,uBAAuB;AAC7E;AACA;AACA;AACA;AACA,2CAA2C,iCAAiC;AAC5E;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,6CAA6C;AAC7C,qCAAqC;AACrC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,4CAA4C;AAC5C,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;ACzLA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB,UAAU;AACnD;AACA,iDAAiD,gBAAgB;AACjE;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA,qDAAqD,qBAAqB;AAC1E;AACA,WAAW,mBAAmB;AAC9B,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA,+DAA+D,mCAAmC;AAClG;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,yCAAyC;AACpF;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,4CAA4C;AAC5C,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;ACnMA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iEAAiE,uBAAuB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClEA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,sDAAsD,+BAA+B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;AC7LA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS,qBAAqB,GAAG,YAAY,GAAG,WAAW,GAAG,eAAe,GAAG;AAChF;AACA;;AAEA,iBAAiB;AACjB,8CAA8C;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC1HA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA,6CAA6C;AAC7C,qBAAqB;AACrB,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 67);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ee3b5b6e3c27917441e9","module.exports = require(\"util\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"util\"\n// module id = 0\n// module chunks = 0","module.exports = require(\"events\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"events\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 2\n// module chunks = 0","var textParsers = require('./lib/textParsers');\nvar binaryParsers = require('./lib/binaryParsers');\nvar arrayParser = require('./lib/arrayParser');\n\nexports.getTypeParser = getTypeParser;\nexports.setTypeParser = setTypeParser;\nexports.arrayParser = arrayParser;\n\nvar typeParsers = {\n  text: {},\n  binary: {}\n};\n\n//the empty parse function\nfunction noParse (val) {\n  return String(val);\n};\n\n//returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\nfunction getTypeParser (oid, format) {\n  format = format || 'text';\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n  return typeParsers[format][oid] || noParse;\n};\n\nfunction setTypeParser (oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  typeParsers[format][oid] = parseFn;\n};\n\ntextParsers.init(function(oid, converter) {\n  typeParsers.text[oid] = converter;\n});\n\nbinaryParsers.init(function(oid, converter) {\n  typeParsers.binary[oid] = converter;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-types/index.js\n// module id = 3\n// module chunks = 0","module.exports = require(\"assert\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"assert\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"stream\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"stream\"\n// module id = 7\n// module chunks = 0","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 9;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bindings\n// module id = 9\n// module chunks = 0","function ArrayParser(source, converter) {\n  this.source = source;\n  this.converter = converter;\n  this.pos = 0;\n  this.entries = [];\n  this.recorded = [];\n  this.dimension = 0;\n  if (!this.converter) {\n    this.converter = function(entry) {\n      return entry;\n    };\n  }\n}\n\nArrayParser.prototype.eof = function() {\n  return this.pos >= this.source.length;\n};\n\nArrayParser.prototype.nextChar = function() {\n  var c;\n  if ((c = this.source[this.pos++]) === \"\\\\\") {\n    return {\n      char: this.source[this.pos++],\n      escaped: true\n    };\n  } else {\n    return {\n      char: c,\n      escaped: false\n    };\n  }\n};\n\nArrayParser.prototype.record = function(c) {\n  return this.recorded.push(c);\n};\n\nArrayParser.prototype.newEntry = function(includeEmpty) {\n  var entry;\n  if (this.recorded.length > 0 || includeEmpty) {\n    entry = this.recorded.join(\"\");\n    if (entry === \"NULL\" && !includeEmpty) {\n      entry = null;\n    }\n    if (entry !== null) {\n      entry = this.converter(entry);\n    }\n    this.entries.push(entry);\n    this.recorded = [];\n  }\n};\n\nArrayParser.prototype.parse = function(nested) {\n  var c, p, quote;\n  if (nested === null) {\n    nested = false;\n  }\n  quote = false;\n  while (!this.eof()) {\n    c = this.nextChar();\n    if (c.char === \"{\" && !quote) {\n      this.dimension++;\n      if (this.dimension > 1) {\n        p = new ArrayParser(this.source.substr(this.pos - 1), this.converter);\n        this.entries.push(p.parse(true));\n        this.pos += p.pos - 2;\n      }\n    } else if (c.char === \"}\" && !quote) {\n      this.dimension--;\n      if (this.dimension === 0) {\n        this.newEntry();\n        if (nested) {\n          return this.entries;\n        }\n      }\n    } else if (c.char === '\"' && !c.escaped) {\n      if (quote) {\n        this.newEntry(true);\n      }\n      quote = !quote;\n    } else if (c.char === ',' && !quote) {\n      this.newEntry();\n    } else {\n      this.record(c.char);\n    }\n  }\n  if (this.dimension !== 0) {\n    throw \"array dimension not balanced\";\n  }\n  return this.entries;\n};\n\nmodule.exports = {\n  create: function(source, converter){\n    return new ArrayParser(source, converter);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-native/~/pg-types/lib/arrayParser.js\n// module id = 10\n// module chunks = 0","var array = require('postgres-array');\n\nmodule.exports = {\n  create: function (source, transform) {\n    return {\n      parse: function() {\n        return array.parse(source, transform);\n      }\n    };\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-types/lib/arrayParser.js\n// module id = 11\n// module chunks = 0","'use strict'\n\nexports.parse = function (source, transform) {\n  return new ArrayParser(source, transform).parse()\n}\n\nfunction ArrayParser (source, transform) {\n  this.source = source\n  this.transform = transform || identity\n  this.position = 0\n  this.entries = []\n  this.recorded = []\n  this.dimension = 0\n}\n\nArrayParser.prototype.isEof = function () {\n  return this.position >= this.source.length\n}\n\nArrayParser.prototype.nextCharacter = function () {\n  var character = this.source[this.position++]\n  if (character === '\\\\') {\n    return {\n      value: this.source[this.position++],\n      escaped: true\n    }\n  }\n  return {\n    value: character,\n    escaped: false\n  }\n}\n\nArrayParser.prototype.record = function (character) {\n  this.recorded.push(character)\n}\n\nArrayParser.prototype.newEntry = function (includeEmpty) {\n  var entry\n  if (this.recorded.length > 0 || includeEmpty) {\n    entry = this.recorded.join('')\n    if (entry === 'NULL' && !includeEmpty) {\n      entry = null\n    }\n    if (entry !== null) entry = this.transform(entry)\n    this.entries.push(entry)\n    this.recorded = []\n  }\n}\n\nArrayParser.prototype.parse = function (nested) {\n  var character, parser, quote\n  while (!this.isEof()) {\n    character = this.nextCharacter()\n    if (character.value === '{' && !quote) {\n      this.dimension++\n      if (this.dimension > 1) {\n        parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)\n        this.entries.push(parser.parse(true))\n        this.position += parser.position - 2\n      }\n    } else if (character.value === '}' && !quote) {\n      this.dimension--\n      if (!this.dimension) {\n        this.newEntry()\n        if (nested) return this.entries\n      }\n    } else if (character.value === '\"' && !character.escaped) {\n      if (quote) this.newEntry(true)\n      quote = !quote\n    } else if (character.value === ',' && !quote) {\n      this.newEntry()\n    } else {\n      this.record(character.value)\n    }\n  }\n  if (this.dimension !== 0) {\n    throw new Error('array dimension not balanced')\n  }\n  return this.entries\n}\n\nfunction identity (value) {\n  return value\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postgres-array/index.js\n// module id = 18\n// module chunks = 0","module.exports = require(\"url\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"url\"\n// module id = 19\n// module chunks = 0","/**\n * -----------------------------------------------------------------------------\n * Class        : dbBase.ts\n * Description  : Any generic database functionality can be stuffed in here\n * Parameters   :\n * Usage        :\n * Notes        :\n * Created      : @author Neil Smith <Neil.Smith@WebTarget.co.uk>\n * Created Date : 19 Feb 2017\n * -----------------------------------------------------------------------------\n * Date?        Whom?       Notes\n * _____________________________________________________________________________\n */\n\nimport { dbConn } from './db/dbConn';\n\nexport class configService {\n\n    private cf = require(\"../dbconfig.json\");\n    private _ns: string;\n    private _table: string;\n    \n    private _rows: string[];\n\n    /*\n      Build our config\n    */\n    constructor(_clArgs: any) {\n        try {\n            this._ns = _clArgs[\"namespace\"];\n            this._table = _clArgs[\"tablename\"];\n        } catch (err) {\n            console.log(\"Error creating configService :: \" + err);\n        }\n\n    }\n\n    public getNamespace(): string {\n        return this._ns;\n    }\n    public getTable(): string {\n        return this._table;\n    }\n\n    public getDBParams(_key?: string): dbConn {\n        if (_key === undefined) {\n            // Get default from the config file, and use it as a key\n            _key = this.cf.default;\n        }\n        return this.cf[_key];\n    }\n\n    public setRows(_rows: string[]): void {\n        this._rows = _rows;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/configService.ts","/**\n * -----------------------------------------------------------------------------\n * Class        : setup.ts\n * Description  : Starts the process rolling.\n * Parameters   :\n * Usage        :\n * Notes        :\n * Created      : @author Neil Smith <Neil.Smith@WebTarget.co.uk>\n * Created Date : 19 Feb 2017\n * -----------------------------------------------------------------------------\n * Date?        Whom?       Notes\n * _____________________________________________________________________________\n */\n import { Replace } from './replace';\nimport { db } from './db';\nimport { cla } from './consts/cla';\nimport { configService } from './configService';\n\nexport class Setup {\n    constructor(private _cs:configService) {\n\n      let _db = new db(_cs);\n      // _db.retrieve(this.doReplacements);\n      // console.log(\"Namespace is \" + _args[\"namespace\"]);\n      // this.doReplacements();\n\n    }\n/*\n    doReplacements(_args:Object, _rows:Object){\n      let xTable = new Replace('../templates/src/XTable.php', [\n        [\"{$table}\", \"User\"],\n        [\"{$namespace}\", _args[\"namespace\"]],\n        [\"{$created}\", _args[\"datecreated\"]],\n      ]).doReplace();\n*/\n\n\n      // console.log(xTable);\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/setup.ts","/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar readlink = require('graceful-readlink').readlinkSync;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar fs = require('fs');\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\n\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = ~flags.indexOf('<');\n  this.optional = ~flags.indexOf('[');\n  this.bool = !~flags.indexOf('-no-');\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.name = function() {\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};\n\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\nOption.prototype.is = function(arg) {\n  return arg == this.short || arg == this.long;\n};\n\n/**\n * Initialize a new `Command`.\n *\n * @param {String} name\n * @api public\n */\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = {};\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nCommand.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Add command `name`.\n *\n * The `.action()` callback is invoked when the\n * command `name` is specified via __ARGV__,\n * and the remaining arguments are applied to the\n * function for access.\n *\n * When the `name` is \"*\" an un-matched command\n * will be passed as the first arg, followed by\n * the rest of __ARGV__ remaining.\n *\n * Examples:\n *\n *      program\n *        .version('0.0.1')\n *        .option('-C, --chdir <path>', 'change the working directory')\n *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n *        .option('-T, --no-tests', 'ignore test hook')\n *\n *      program\n *        .command('setup')\n *        .description('run remote setup commands')\n *        .action(function() {\n *          console.log('setup');\n *        });\n *\n *      program\n *        .command('exec <cmd>')\n *        .description('run the given remote command')\n *        .action(function(cmd) {\n *          console.log('exec \"%s\"', cmd);\n *        });\n *\n *      program\n *        .command('teardown <dir> [otherDirs...]')\n *        .description('run teardown commands')\n *        .action(function(dir, otherDirs) {\n *          console.log('dir \"%s\"', dir);\n *          if (otherDirs) {\n *            otherDirs.forEach(function (oDir) {\n *              console.log('dir \"%s\"', oDir);\n *            });\n *          }\n *        });\n *\n *      program\n *        .command('*')\n *        .description('deploy the given env')\n *        .action(function(env) {\n *          console.log('deploying \"%s\"', env);\n *        });\n *\n *      program.parse(process.argv);\n  *\n * @param {String} name\n * @param {String} [desc] for git-style sub-commands\n * @return {Command} the new command\n * @api public\n */\n\nCommand.prototype.command = function(name, desc, opts) {\n  opts = opts || {};\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs[cmd._name] = true;\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n\n  cmd._noHelp = !!opts.noHelp;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n\n  if (desc) return this;\n  return cmd;\n};\n\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\nCommand.prototype.arguments = function (desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\nCommand.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parseExpectedArgs = function(args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfNecessary(self, parsed.unknown);\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i) {\n      if (arg.required && null == args[i]) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    });\n\n    // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on(name, listener);\n  if (this._alias) parent.on(this._alias, listener);\n  return this;\n};\n\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to false\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     --pepper\n *     program.pepper\n *     // => Boolean\n *\n *     // simple boolean defaulting to true\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|Mixed} fn or default\n * @param {Mixed} defaultValue\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.option = function(flags, description, fn, defaultValue) {\n  var self = this\n    , option = new Option(flags, description)\n    , oname = option.name()\n    , name = camelcase(oname);\n\n  // default as 3rd arg\n  if (typeof fn != 'function') {\n    if (fn instanceof RegExp) {\n      var regex = fn;\n      fn = function(val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      }\n    }\n    else {\n      defaultValue = fn;\n      fn = null;\n    }\n  }\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (false == option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (false == option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (undefined !== defaultValue) self[name] = defaultValue;\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on(oname, function(val) {\n    // coercion\n    if (null !== val && fn) val = fn(val, undefined === self[name]\n      ? defaultValue\n      : self[name]);\n\n    // unassigned or bool\n    if ('boolean' == typeof self[name] || 'undefined' == typeof self[name]) {\n      // if no value, bool true, and we have a default, then use it!\n      if (null == val) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (null !== val) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};\n\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\nCommand.prototype.allowUnknownOption = function(arg) {\n    this._allowUnknownOption = arguments.length === 0 || arg;\n    return this;\n};\n\n/**\n * Parse `argv`, settings options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parse = function(argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // github-style sub-commands with no sub-command\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push('--help');\n  }\n\n  // process argv\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  // executable sub-commands\n  var name = result.args[0];\n  if (this._execs[name] && typeof this._execs[name] != \"function\") {\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (this.defaultExecutable) {\n    // use the default subcommand\n    args.unshift(name = this.defaultExecutable);\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  }\n\n  return result;\n};\n\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @api private\n */\n\nCommand.prototype.executeSubCommand = function(argv, args, unknown) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n  if ('help' == args[0] && 1 == args.length) this.help();\n\n  // <cmd> --help\n  if ('help' == args[0]) {\n    args[0] = args[1];\n    args[1] = '--help';\n  }\n\n  // executable\n  var f = argv[1];\n  // name of the subcommand, link `pm-install`\n  var bin = basename(f, '.js') + '-' + args[0];\n\n\n  // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n  var baseDir\n    , link = readlink(f);\n\n  // when symbolink is relative path\n  if (link !== f && link.charAt(0) !== '/') {\n    link = path.join(dirname(f), link)\n  }\n  baseDir = dirname(link);\n\n  // prefer local `./<bin>` to bin in the $PATH\n  var localBin = path.join(baseDir, bin);\n\n  // whether bin file is a js script with explicit `.js` extension\n  var isExplicitJS = false;\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n\n  var proc;\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(localBin);\n      // add executable arguments to spawn\n      args = (process.execArgv || []).concat(args);\n\n      proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    } else {\n      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    }\n  } else {\n    args.unshift(localBin);\n    proc = spawn(process.execPath, args, { stdio: 'inherit'});\n  }\n\n  proc.on('close', process.exit.bind(process));\n  proc.on('error', function(err) {\n    if (err.code == \"ENOENT\") {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code == \"EACCES\") {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n    process.exit(1);\n  });\n\n  // Store the reference to the child process\n  this.runningCommand = proc;\n};\n\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.normalize = function(args) {\n  var ret = []\n    , arg\n    , lastOpt\n    , index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i-1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && '-' == arg[0] && '-' != arg[1]) {\n      arg.slice(1).split('').forEach(function(c) {\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners(name).length) {\n      this.emit(args.shift(), args, unknown);\n    } else {\n      this.emit('*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\nCommand.prototype.optionFor = function(arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {Array}\n * @api public\n */\n\nCommand.prototype.parseOptions = function(argv) {\n  var args = []\n    , len = argv.length\n    , literal\n    , option\n    , arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if ('--' == arg) {\n      literal = true;\n      continue;\n    }\n\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (null == arg) return this.optionMissingArgument(option);\n        this.emit(option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i+1];\n        if (null == arg || ('-' == arg[0] && '-' != arg)) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit(option.name(), arg);\n      // bool\n      } else {\n        this.emit(option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && '-' == arg[0]) {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if (argv[i+1] && '-' != argv[i+1][0]) {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};\n\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\nCommand.prototype.opts = function() {\n  var result = {}\n    , len = this.options.length;\n\n  for (var i = 0 ; i < len; i++) {\n    var key = camelcase(this.options[i].name());\n    result[key] = key === 'version' ? this._version : this[key];\n  }\n  return result;\n};\n\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.missingArgument = function(name) {\n  console.error();\n  console.error(\"  error: missing required argument `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {String} option\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.optionMissingArgument = function(option, flag) {\n  console.error();\n  if (flag) {\n    console.error(\"  error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"  error: option `%s' argument missing\", option.flags);\n  }\n  console.error();\n  process.exit(1);\n};\n\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.unknownOption = function(flag) {\n  if (this._allowUnknownOption) return;\n  console.error();\n  console.error(\"  error: unknown option `%s'\", flag);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.variadicArgNotLast = function(name) {\n  console.error();\n  console.error(\"  error: variadic arguments must be last `%s'\", name);\n  console.error();\n  process.exit(1);\n};\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} flags\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.version = function(str, flags) {\n  if (0 == arguments.length) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  this.option(flags, 'output the version number');\n  this.on('version', function() {\n    process.stdout.write(str + '\\n');\n    process.exit(0);\n  });\n  return this;\n};\n\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.description = function(str) {\n  if (0 === arguments.length) return this._description;\n  this._description = str;\n  return this;\n};\n\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.alias = function(alias) {\n  if (0 == arguments.length) return this._alias;\n  this._alias = alias;\n  return this;\n};\n\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.usage = function(str) {\n  var args = this._args.map(function(arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]'\n    + (this.commands.length ? ' [command]' : '')\n    + (this._args.length ? ' ' + args.join(' ') : '');\n\n  if (0 == arguments.length) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};\n\n/**\n * Get the name of the command\n *\n * @param {String} name\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.name = function() {\n  return this._name;\n};\n\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestOptionLength = function() {\n  return this.options.reduce(function(max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.optionHelp = function() {\n  var width = this.largestOptionLength();\n\n  // Prepend the help information\n  return [pad('-h, --help', width) + '  ' + 'output usage information']\n      .concat(this.options.map(function(option) {\n        return pad(option.flags, width) + '  ' + option.description;\n      }))\n      .join('\\n');\n};\n\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.commandHelp = function() {\n  if (!this.commands.length) return '';\n\n  var commands = this.commands.filter(function(cmd) {\n    return !cmd._noHelp;\n  }).map(function(cmd) {\n    var args = cmd._args.map(function(arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [\n      cmd._name\n        + (cmd._alias ? '|' + cmd._alias : '')\n        + (cmd.options.length ? ' [options]' : '')\n        + ' ' + args\n      , cmd.description()\n    ];\n  });\n\n  var width = commands.reduce(function(max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n\n  return [\n    ''\n    , '  Commands:'\n    , ''\n    , commands.map(function(cmd) {\n      var desc = cmd[1] ? '  ' + cmd[1] : '';\n      return pad(cmd[0], width) + desc;\n    }).join('\\n').replace(/^/gm, '    ')\n    , ''\n  ].join('\\n');\n};\n\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.helpInformation = function() {\n  var desc = [];\n  if (this._description) {\n    desc = [\n      '  ' + this._description\n      , ''\n    ];\n  }\n\n  var cmdName = this._name;\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n  var usage = [\n    ''\n    ,'  Usage: ' + cmdName + ' ' + this.usage()\n    , ''\n  ];\n\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n\n  var options = [\n    '  Options:'\n    , ''\n    , '' + this.optionHelp().replace(/^/gm, '    ')\n    , ''\n    , ''\n  ];\n\n  return usage\n    .concat(cmds)\n    .concat(desc)\n    .concat(options)\n    .join('\\n');\n};\n\n/**\n * Output help information for this command\n *\n * @api public\n */\n\nCommand.prototype.outputHelp = function(cb) {\n  if (!cb) {\n    cb = function(passthru) {\n      return passthru;\n    }\n  }\n  process.stdout.write(cb(this.helpInformation()));\n  this.emit('--help');\n};\n\n/**\n * Output help information and exit.\n *\n * @api public\n */\n\nCommand.prototype.help = function(cb) {\n  this.outputHelp(cb);\n  process.exit();\n};\n\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function(str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Output help information if necessary\n *\n * @param {Command} command to output help for\n * @param {Array} array of options to search for -h or --help\n * @api private\n */\n\nfunction outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] == '--help' || options[i] == '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}\n\n/**\n * Takes an argument an returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']'\n}\n\n// for versions before node v0.8 when there weren't `fs.existsSync`\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/commander/index.js\n// module id = 22\n// module chunks = 0","module.exports = {\n\t\"rimacondb\": {\n\t\t\"type\": \"pg\",\n\t\t\"server\": \"192.168.77.2\",\n\t\t\"port\": \"5432\",\n\t\t\"username\": \"postgres\",\n\t\t\"password\": \"postgres\",\n\t\t\"dbname\": \"RiMaConDB\"\n\t},\n\t\"steeldb\": {\n\t\t\"type\": \"pg\",\n\t\t\"server\": \"steel.webtarget.co.uk\",\n\t\t\"port\": \"5778\",\n\t\t\"username\": \"postgres\",\n\t\t\"password\": \"cleverpassword\",\n\t\t\"dbname\": \"MildenSteels\"\n\t},\n\t\"default\": \"rimacondb\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./dbconfig.json\n// module id = 23\n// module chunks = 0","exports = module.exports = ap;\nfunction ap (args, fn) {\n    return function () {\n        var rest = [].slice.call(arguments)\n            , first = args.slice()\n        first.push.apply(first, rest)\n        return fn.apply(this, first);\n    };\n}\n\nexports.pa = pa;\nfunction pa (args, fn) {\n    return function () {\n        var rest = [].slice.call(arguments)\n        rest.push.apply(rest, args)\n        return fn.apply(this, rest);\n    };\n}\n\nexports.apa = apa;\nfunction apa (left, right, fn) {\n    return function () {\n        return fn.apply(this,\n            left.concat.apply(left, arguments).concat(right)\n        );\n    };\n}\n\nexports.partial = partial;\nfunction partial (fn) {\n    var args = [].slice.call(arguments, 1);\n    return ap(args, fn);\n}\n\nexports.partialRight = partialRight;\nfunction partialRight (fn) {\n    var args = [].slice.call(arguments, 1);\n    return pa(args, fn);\n}\n\nexports.curry = curry;\nfunction curry (fn) {\n    return partial(partial, fn);\n}\n\nexports.curryRight = function curryRight (fn) {\n    return partial(partialRight, fn);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ap/index.js\n// module id = 24\n// module chunks = 0","/**\n * -----------------------------------------------------------------------------\n * Class        : db.ts\n * Description  :\n * Parameters   :\n * Usage        :\n * Notes        :\n * Created      : @author Neil Smith <Neil.SMith@Computors.com>\n * Created Date : 17 Feb 2017\n * -----------------------------------------------------------------------------\n * Date?        Whom?       Notes\n * _____________________________________________________________________________\n */\n\nimport { cla } from './consts/cla';\nimport { connPostgres } from './db/connPostgres';\nimport { connPgSQL } from './db/connPgSQL';\n\nimport { configService } from './configService';\nimport { Replace } from './replace';\n\nexport class db {\n\n    private client: any;\n    private _dbInstance: any;\n    private _thingy:string;\n\n    constructor(private _configService: configService) {\n        // this._configService = new configService();\n        switch (this._configService.getDBParams()[\"type\"]) {\n            case 'pg':\n                this._dbInstance = new connPgSQL(_configService); // require('connPostgres');\n                break;\n            case 'mysql':\n                this._dbInstance = require('./db/connMysql');\n                break;\n            default:\n            // console.log(`DB Type '${_type}' does not exist. Cannot create a connection of Idb type`);\n        }\n        // console.log(JSON.stringify(this._dbInstance.getConnectString()));\n        this.getRows();\n    }\n    getRows(): string[] {\n\n      let g = new Promise((resolve, reject) => {\n\n          // Resolve getcolumns\n          // Resolve replacement\n          // Resolve write file\n          resolve(this._dbInstance.getRows());\n      }).then((res) => {\n          console.log(\"The RES is \" + res);\n          return res;\n          // console.log(\"The RES is \" + res);\n      });\n      return [\"\"];\n\n        // this._dbInstance.getRows(this.writeColumns, \"Blimpy McBlimp\" );\n\n    }\n    writeColumns(_rows: string[], _message:string): void {\n        console.log(\"A message \" + _message);\n        for (var item of _rows[\"rows\"]){\n          // this._columns.push(item);\n          console.log(\"My Item \" + JSON.stringify(item.column_name));\n        }\n        // let rp = new Replace('myfile', );\n    }\n\n\n    private dbInstance() {\n        return this._dbInstance;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/db.ts","import { Idb } from './Idb';\nimport {dbConn } from './dbConn';\nimport { configService } from '../configService';\n\nexport class connMysql implements Idb {\n\n  private _pConn: dbConn;\n\n  constructor(private _cs:configService) {\n      this.configure();\n  }\n  configure() {\n      this._pConn = this._cs.getDBParams();\n  }\n\n    getConnectString(): string {\n        return \"\";\n    };\n    getQuery(): string {\n        return \"\";\n    }\n    getRows(): string[] {\n        return [\"\"];\n    }\n    testConnection() {\n        return false;\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/db/connMysql.ts","\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , path = require('path')\n  , join = path.join\n  , dirname = path.dirname\n  , exists = fs.existsSync || path.existsSync\n  , defaults = {\n        arrow: process.env.NODE_BINDINGS_ARROW || ' → '\n      , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'\n      , platform: process.platform\n      , arch: process.arch\n      , version: process.versions.node\n      , bindings: 'bindings.node'\n      , try: [\n          // node-gyp's linked version in the \"build\" dir\n          [ 'module_root', 'build', 'bindings' ]\n          // node-waf and gyp_addon (a.k.a node-gyp)\n        , [ 'module_root', 'build', 'Debug', 'bindings' ]\n        , [ 'module_root', 'build', 'Release', 'bindings' ]\n          // Debug files, for development (legacy behavior, remove for node v0.9)\n        , [ 'module_root', 'out', 'Debug', 'bindings' ]\n        , [ 'module_root', 'Debug', 'bindings' ]\n          // Release files, but manually compiled (legacy behavior, remove for node v0.9)\n        , [ 'module_root', 'out', 'Release', 'bindings' ]\n        , [ 'module_root', 'Release', 'bindings' ]\n          // Legacy from node-waf, node <= 0.4.x\n        , [ 'module_root', 'build', 'default', 'bindings' ]\n          // Production \"Release\" buildtype binary (meh...)\n        , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]\n        ]\n    }\n\n/**\n * The main `bindings()` function loads the compiled bindings for a given module.\n * It uses V8's Error API to determine the parent filename that this function is\n * being invoked from, which is then used to find the root directory.\n */\n\nfunction bindings (opts) {\n\n  // Argument surgery\n  if (typeof opts == 'string') {\n    opts = { bindings: opts }\n  } else if (!opts) {\n    opts = {}\n  }\n  opts.__proto__ = defaults\n\n  // Get the module root\n  if (!opts.module_root) {\n    opts.module_root = exports.getRoot(exports.getFileName())\n  }\n\n  // Ensure the given bindings name ends with .node\n  if (path.extname(opts.bindings) != '.node') {\n    opts.bindings += '.node'\n  }\n\n  var tries = []\n    , i = 0\n    , l = opts.try.length\n    , n\n    , b\n    , err\n\n  for (; i<l; i++) {\n    n = join.apply(null, opts.try[i].map(function (p) {\n      return opts[p] || p\n    }))\n    tries.push(n)\n    try {\n      b = opts.path ? require.resolve(n) : require(n)\n      if (!opts.path) {\n        b.path = n\n      }\n      return b\n    } catch (e) {\n      if (!/not find/i.test(e.message)) {\n        throw e\n      }\n    }\n  }\n\n  err = new Error('Could not locate the bindings file. Tried:\\n'\n    + tries.map(function (a) { return opts.arrow + a }).join('\\n'))\n  err.tries = tries\n  throw err\n}\nmodule.exports = exports = bindings\n\n\n/**\n * Gets the filename of the JavaScript file that invokes this function.\n * Used to help find the root directory of a module.\n * Optionally accepts an filename argument to skip when searching for the invoking filename\n */\n\nexports.getFileName = function getFileName (calling_file) {\n  var origPST = Error.prepareStackTrace\n    , origSTL = Error.stackTraceLimit\n    , dummy = {}\n    , fileName\n\n  Error.stackTraceLimit = 10\n\n  Error.prepareStackTrace = function (e, st) {\n    for (var i=0, l=st.length; i<l; i++) {\n      fileName = st[i].getFileName()\n      if (fileName !== __filename) {\n        if (calling_file) {\n            if (fileName !== calling_file) {\n              return\n            }\n        } else {\n          return\n        }\n      }\n    }\n  }\n\n  // run the 'prepareStackTrace' function above\n  Error.captureStackTrace(dummy)\n  dummy.stack\n\n  // cleanup\n  Error.prepareStackTrace = origPST\n  Error.stackTraceLimit = origSTL\n\n  return fileName\n}\n\n/**\n * Gets the root directory of a module, given an arbitrary filename\n * somewhere in the module tree. The \"root directory\" is the directory\n * containing the `package.json` file.\n *\n *   In:  /home/nate/node-native-module/lib/index.js\n *   Out: /home/nate/node-native-module\n */\n\nexports.getRoot = function getRoot (file) {\n  var dir = dirname(file)\n    , prev\n  while (true) {\n    if (dir === '.') {\n      // Avoids an infinite loop in rare cases, like the REPL\n      dir = process.cwd()\n    }\n    if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {\n      // Found the 'package.json' file or 'node_modules' dir; we're done\n      return dir\n    }\n    if (prev === dir) {\n      // Got to the top\n      throw new Error('Could not find module root given file: \"' + file\n                    + '\". Do you have a `package.json` file? ')\n    }\n    // Try the parent dir next\n    prev = dir\n    dir = join(dir, '..')\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bindings/bindings.js\n// module id = 28\n// module chunks = 0","//binary data writer tuned for creating\n//postgres message packets as effeciently as possible by reusing the\n//same buffer to avoid memcpy and limit memory allocations\nvar Writer = module.exports = function(size) {\n  this.size = size || 1024;\n  this.buffer = Buffer(this.size + 5);\n  this.offset = 5;\n  this.headerPosition = 0;\n};\n\n//resizes internal buffer if not enough size left\nWriter.prototype._ensure = function(size) {\n  var remaining = this.buffer.length - this.offset;\n  if(remaining < size) {\n    var oldBuffer = this.buffer;\n    // exponential growth factor of around ~ 1.5\n    // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n    var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n    this.buffer = new Buffer(newSize);\n    oldBuffer.copy(this.buffer);\n  }\n};\n\nWriter.prototype.addInt32 = function(num) {\n  this._ensure(4);\n  this.buffer[this.offset++] = (num >>> 24 & 0xFF);\n  this.buffer[this.offset++] = (num >>> 16 & 0xFF);\n  this.buffer[this.offset++] = (num >>>  8 & 0xFF);\n  this.buffer[this.offset++] = (num >>>  0 & 0xFF);\n  return this;\n};\n\nWriter.prototype.addInt16 = function(num) {\n  this._ensure(2);\n  this.buffer[this.offset++] = (num >>>  8 & 0xFF);\n  this.buffer[this.offset++] = (num >>>  0 & 0xFF);\n  return this;\n};\n\n//for versions of node requiring 'length' as 3rd argument to buffer.write\nvar writeString = function(buffer, string, offset, len) {\n  buffer.write(string, offset, len);\n};\n\n//overwrite function for older versions of node\nif(Buffer.prototype.write.length === 3) {\n  writeString = function(buffer, string, offset, len) {\n    buffer.write(string, offset);\n  };\n}\n\nWriter.prototype.addCString = function(string) {\n  //just write a 0 for empty or null strings\n  if(!string) {\n    this._ensure(1);\n  } else {\n    var len = Buffer.byteLength(string);\n    this._ensure(len + 1); //+1 for null terminator\n    writeString(this.buffer, string, this.offset, len);\n    this.offset += len;\n  }\n\n  this.buffer[this.offset++] = 0; // null terminator\n  return this;\n};\n\nWriter.prototype.addChar = function(c) {\n  this._ensure(1);\n  writeString(this.buffer, c, this.offset, 1);\n  this.offset++;\n  return this;\n};\n\nWriter.prototype.addString = function(string) {\n  string = string || \"\";\n  var len = Buffer.byteLength(string);\n  this._ensure(len);\n  this.buffer.write(string, this.offset);\n  this.offset += len;\n  return this;\n};\n\nWriter.prototype.getByteLength = function() {\n  return this.offset - 5;\n};\n\nWriter.prototype.add = function(otherBuffer) {\n  this._ensure(otherBuffer.length);\n  otherBuffer.copy(this.buffer, this.offset);\n  this.offset += otherBuffer.length;\n  return this;\n};\n\nWriter.prototype.clear = function() {\n  this.offset = 5;\n  this.headerPosition = 0;\n  this.lastEnd = 0;\n};\n\n//appends a header block to all the written data since the last\n//subsequent header or to the beginning if there is only one data block\nWriter.prototype.addHeader = function(code, last) {\n  var origOffset = this.offset;\n  this.offset = this.headerPosition;\n  this.buffer[this.offset++] = code;\n  //length is everything in this packet minus the code\n  this.addInt32(origOffset - (this.headerPosition+1));\n  //set next header position\n  this.headerPosition = origOffset;\n  //make space for next header\n  this.offset = origOffset;\n  if(!last) {\n    this._ensure(5);\n    this.offset += 5;\n  }\n};\n\nWriter.prototype.join = function(code) {\n  if(code) {\n    this.addHeader(code, true);\n  }\n  return this.buffer.slice(code ? 0 : 5, this.offset);\n};\n\nWriter.prototype.flush = function(code) {\n  var result = this.join(code);\n  this.clear();\n  return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer-writer/index.js\n// module id = 29\n// module chunks = 0","/**\n * @class\n * @private\n */\nfunction PriorityQueue (size) {\n  if (!(this instanceof PriorityQueue)) {\n    return new PriorityQueue()\n  }\n\n  this._size = size\n  this._slots = null\n  this._total = null\n\n  // initialize arrays to hold queue elements\n  size = Math.max(+size | 0, 1)\n  this._slots = []\n  for (var i = 0; i < size; i += 1) {\n    this._slots.push([])\n  }\n}\n\nPriorityQueue.prototype.size = function size () {\n  if (this._total === null) {\n    this._total = 0\n    for (var i = 0; i < this._size; i += 1) {\n      this._total += this._slots[i].length\n    }\n  }\n  return this._total\n}\n\nPriorityQueue.prototype.enqueue = function enqueue (obj, priority) {\n  var priorityOrig\n\n  // Convert to integer with a default value of 0.\n  priority = priority && +priority | 0 || 0\n\n  // Clear cache for total.\n  this._total = null\n  if (priority) {\n    priorityOrig = priority\n    if (priority < 0 || priority >= this._size) {\n      priority = (this._size - 1)\n      // put obj at the end of the line\n      console.error('invalid priority: ' + priorityOrig + ' must be between 0 and ' + priority)\n    }\n  }\n\n  this._slots[priority].push(obj)\n}\n\nPriorityQueue.prototype.dequeue = function dequeue (callback) {\n  var obj = null\n  // Clear cache for total.\n  this._total = null\n  for (var i = 0, sl = this._slots.length; i < sl; i += 1) {\n    if (this._slots[i].length) {\n      obj = this._slots[i].shift()\n      break\n    }\n  }\n  return obj\n}\n\nfunction doWhileAsync (conditionFn, iterateFn, callbackFn) {\n  var next = function () {\n    if (conditionFn()) {\n      iterateFn(next)\n    } else {\n      callbackFn()\n    }\n  }\n  next()\n}\n\n/**\n * Generate an Object pool with a specified `factory`.\n *\n * @class\n * @param {Object} factory\n *   Factory to be used for generating and destorying the items.\n * @param {String} factory.name\n *   Name of the factory. Serves only logging purposes.\n * @param {Function} factory.create\n *   Should create the item to be acquired,\n *   and call it's first callback argument with the generated item as it's argument.\n * @param {Function} factory.destroy\n *   Should gently close any resources that the item is using.\n *   Called before the items is destroyed.\n * @param {Function} factory.validate\n *   Should return true if connection is still valid and false\n *   If it should be removed from pool. Called before item is\n *   acquired from pool.\n * @param {Function} factory.validateAsync\n *   Asynchronous validate function. Receives a callback function\n *   as its second argument, that should be called with a single\n *   boolean argument being true if the item is still valid and false\n *   if it should be removed from pool. Called before item is\n *   acquired from pool. Only one of validate/validateAsync may be specified\n * @param {Number} factory.max\n *   Maximum number of items that can exist at the same time.  Default: 1.\n *   Any further acquire requests will be pushed to the waiting list.\n * @param {Number} factory.min\n *   Minimum number of items in pool (including in-use). Default: 0.\n *   When the pool is created, or a resource destroyed, this minimum will\n *   be checked. If the pool resource count is below the minimum, a new\n *   resource will be created and added to the pool.\n * @param {Number} factory.idleTimeoutMillis\n *   Delay in milliseconds after the idle items in the pool will be destroyed.\n *   And idle item is that is not acquired yet. Waiting items doesn't count here.\n * @param {Number} factory.reapIntervalMillis\n *   Cleanup is scheduled in every `factory.reapIntervalMillis` milliseconds.\n * @param {Boolean|Function} factory.log\n *   Whether the pool should log activity. If function is specified,\n *   that will be used instead. The function expects the arguments msg, loglevel\n * @param {Number} factory.priorityRange\n *   The range from 1 to be treated as a valid priority\n * @param {RefreshIdle} factory.refreshIdle\n *   Should idle resources be destroyed and recreated every idleTimeoutMillis? Default: true.\n * @param {Bool} [factory.returnToHead=false]\n *   Returns released object to head of available objects list\n */\nfunction Pool (factory) {\n  if (!(this instanceof Pool)) {\n    return new Pool(factory)\n  }\n\n  if (factory.validate && factory.validateAsync) {\n    throw new Error('Only one of validate or validateAsync may be specified')\n  }\n\n  // defaults\n  factory.idleTimeoutMillis = factory.idleTimeoutMillis || 30000\n  factory.returnToHead = factory.returnToHead || false\n  factory.refreshIdle = ('refreshIdle' in factory) ? factory.refreshIdle : true\n  factory.reapInterval = factory.reapIntervalMillis || 1000\n  factory.priorityRange = factory.priorityRange || 1\n  factory.validate = factory.validate || function () { return true }\n\n  factory.max = parseInt(factory.max, 10)\n  factory.min = parseInt(factory.min, 10)\n\n  factory.max = Math.max(isNaN(factory.max) ? 1 : factory.max, 1)\n  factory.min = Math.min(isNaN(factory.min) ? 0 : factory.min, factory.max - 1)\n\n  this._factory = factory\n  this._inUseObjects = []\n  this._draining = false\n  this._waitingClients = new PriorityQueue(factory.priorityRange)\n  this._availableObjects = []\n  this._count = 0\n  this._removeIdleTimer = null\n  this._removeIdleScheduled = false\n\n  // create initial resources (if factory.min > 0)\n  this._ensureMinimum()\n}\n\n/**\n * logs to console or user defined log function\n * @private\n * @param {string} str\n * @param {string} level\n */\nPool.prototype._log = function log (str, level) {\n  if (typeof this._factory.log === 'function') {\n    this._factory.log(str, level)\n  } else if (this._factory.log) {\n    console.log(level.toUpperCase() + ' pool ' + this._factory.name + ' - ' + str)\n  }\n}\n\n/**\n * Request the client to be destroyed. The factory's destroy handler\n * will also be called.\n *\n * This should be called within an acquire() block as an alternative to release().\n *\n * @param {Object} obj\n *   The acquired item to be destoyed.\n */\nPool.prototype.destroy = function destroy (obj) {\n  this._count -= 1\n  if (this._count < 0) this._count = 0\n  this._availableObjects = this._availableObjects.filter(function (objWithTimeout) {\n    return (objWithTimeout.obj !== obj)\n  })\n\n  this._inUseObjects = this._inUseObjects.filter(function (objInUse) {\n    return (objInUse !== obj)\n  })\n\n  this._factory.destroy(obj)\n\n  this._ensureMinimum()\n}\n\n/**\n * Checks and removes the available (idle) clients that have timed out.\n * @private\n */\nPool.prototype._removeIdle = function removeIdle () {\n  var toRemove = []\n  var now = new Date().getTime()\n  var i\n  var al\n  var tr\n  var timeout\n\n  this._removeIdleScheduled = false\n\n  // Go through the available (idle) items,\n  // check if they have timed out\n  for (i = 0, al = this._availableObjects.length; i < al && (this._factory.refreshIdle && (this._count - this._factory.min > toRemove.length)); i += 1) {\n    timeout = this._availableObjects[i].timeout\n    if (now >= timeout) {\n      // Client timed out, so destroy it.\n      this._log('removeIdle() destroying obj - now:' + now + ' timeout:' + timeout, 'verbose')\n      toRemove.push(this._availableObjects[i].obj)\n    }\n  }\n\n  for (i = 0, tr = toRemove.length; i < tr; i += 1) {\n    this.destroy(toRemove[i])\n  }\n\n  // Replace the available items with the ones to keep.\n  al = this._availableObjects.length\n\n  if (al > 0) {\n    this._log('this._availableObjects.length=' + al, 'verbose')\n    this._scheduleRemoveIdle()\n  } else {\n    this._log('removeIdle() all objects removed', 'verbose')\n  }\n}\n\n/**\n * Schedule removal of idle items in the pool.\n *\n * More schedules cannot run concurrently.\n */\nPool.prototype._scheduleRemoveIdle = function scheduleRemoveIdle () {\n  var self = this\n  if (!this._removeIdleScheduled) {\n    this._removeIdleScheduled = true\n    this._removeIdleTimer = setTimeout(function () {\n      self._removeIdle()\n    }, this._factory.reapInterval)\n  }\n}\n\n/**\n * Try to get a new client to work, and clean up pool unused (idle) items.\n *\n *  - If there are available clients waiting, shift the first one out (LIFO),\n *    and call its callback.\n *  - If there are no waiting clients, try to create one if it won't exceed\n *    the maximum number of clients.\n *  - If creating a new client would exceed the maximum, add the client to\n *    the wait list.\n * @private\n */\nPool.prototype._dispense = function dispense () {\n  var self = this\n  var objWithTimeout = null\n  var err = null\n  var clientCb = null\n  var waitingCount = this._waitingClients.size()\n\n  this._log('dispense() clients=' + waitingCount + ' available=' + this._availableObjects.length, 'info')\n  if (waitingCount > 0) {\n    if (this._factory.validateAsync) {\n      doWhileAsync(function () {\n        return self._availableObjects.length > 0\n      }, function (next) {\n        self._log('dispense() - reusing obj', 'verbose')\n        objWithTimeout = self._availableObjects[0]\n\n        self._factory.validateAsync(objWithTimeout.obj, function (valid) {\n          if (!valid) {\n            self.destroy(objWithTimeout.obj)\n            next()\n          } else {\n            self._availableObjects.shift()\n            self._inUseObjects.push(objWithTimeout.obj)\n            clientCb = self._waitingClients.dequeue()\n            clientCb(err, objWithTimeout.obj)\n          }\n        })\n      }, function () {\n        if (self._count < self._factory.max) {\n          self._createResource()\n        }\n      })\n\n      return\n    }\n\n    while (this._availableObjects.length > 0) {\n      this._log('dispense() - reusing obj', 'verbose')\n      objWithTimeout = this._availableObjects[0]\n      if (!this._factory.validate(objWithTimeout.obj)) {\n        this.destroy(objWithTimeout.obj)\n        continue\n      }\n      this._availableObjects.shift()\n      this._inUseObjects.push(objWithTimeout.obj)\n      clientCb = this._waitingClients.dequeue()\n      return clientCb(err, objWithTimeout.obj)\n    }\n    if (this._count < this._factory.max) {\n      this._createResource()\n    }\n  }\n}\n\n/**\n * @private\n */\nPool.prototype._createResource = function _createResource () {\n  this._count += 1\n  this._log('createResource() - creating obj - count=' + this._count + ' min=' + this._factory.min + ' max=' + this._factory.max, 'verbose')\n  var self = this\n  this._factory.create(function () {\n    var err, obj\n    var clientCb = self._waitingClients.dequeue()\n    if (arguments.length > 1) {\n      err = arguments[0]\n      obj = arguments[1]\n    } else {\n      err = (arguments[0] instanceof Error) ? arguments[0] : null\n      obj = (arguments[0] instanceof Error) ? null : arguments[0]\n    }\n    if (err) {\n      self._count -= 1\n      if (self._count < 0) self._count = 0\n      if (clientCb) {\n        clientCb(err, obj)\n      }\n      process.nextTick(function () {\n        self._dispense()\n      })\n    } else {\n      self._inUseObjects.push(obj)\n      if (clientCb) {\n        clientCb(err, obj)\n      } else {\n        self.release(obj)\n      }\n    }\n  })\n}\n\n/**\n * @private\n */\nPool.prototype._ensureMinimum = function _ensureMinimum () {\n  var i, diff\n  if (!this._draining && (this._count < this._factory.min)) {\n    diff = this._factory.min - this._count\n    for (i = 0; i < diff; i++) {\n      this._createResource()\n    }\n  }\n}\n\n/**\n * Request a new client. The callback will be called,\n * when a new client will be availabe, passing the client to it.\n *\n * @param {Function} callback\n *   Callback function to be called after the acquire is successful.\n *   The function will receive the acquired item as the first parameter.\n *\n * @param {Number} priority\n *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority\n *   of the caller if there are no available resources.  Lower numbers mean higher\n *   priority.\n *\n * @returns {boolean} `true` if the pool is not fully utilized, `false` otherwise.\n */\nPool.prototype.acquire = function acquire (callback, priority) {\n  if (this._draining) {\n    throw new Error('pool is draining and cannot accept work')\n  }\n  this._waitingClients.enqueue(callback, priority)\n  this._dispense()\n  return (this._count < this._factory.max)\n}\n\n/**\n * @deprecated\n */\nPool.prototype.borrow = function borrow (callback, priority) {\n  this._log('borrow() is deprecated. use acquire() instead', 'warn')\n  this.acquire(callback, priority)\n}\n\n/**\n * Return the client to the pool, in case it is no longer required.\n *\n * @param {Object} obj\n *   The acquired object to be put back to the pool.\n */\nPool.prototype.release = function release (obj) {\n  // check to see if this object has already been released (i.e., is back in the pool of this._availableObjects)\n  if (this._availableObjects.some(function (objWithTimeout) { return (objWithTimeout.obj === obj) })) {\n    this._log('release called twice for the same resource: ' + (new Error().stack), 'error')\n    return\n  }\n\n  // check to see if this object exists in the `in use` list and remove it\n  var index = this._inUseObjects.indexOf(obj)\n  if (index < 0) {\n    this._log('attempt to release an invalid resource: ' + (new Error().stack), 'error')\n    return\n  }\n\n  // this._log(\"return to pool\")\n  this._inUseObjects.splice(index, 1)\n  var objWithTimeout = { obj: obj, timeout: (new Date().getTime() + this._factory.idleTimeoutMillis) }\n  if (this._factory.returnToHead) {\n    this._availableObjects.splice(0, 0, objWithTimeout)\n  } else {\n    this._availableObjects.push(objWithTimeout)\n  }\n  this._log('timeout: ' + objWithTimeout.timeout, 'verbose')\n  this._dispense()\n  this._scheduleRemoveIdle()\n}\n\n/**\n * @deprecated\n */\nPool.prototype.returnToPool = function returnToPool (obj) {\n  this._log('returnToPool() is deprecated. use release() instead', 'warn')\n  this.release(obj)\n}\n\n/**\n * Disallow any new requests and let the request backlog dissapate.\n *\n * @param {Function} callback\n *   Optional. Callback invoked when all work is done and all clients have been\n *   released.\n */\nPool.prototype.drain = function drain (callback) {\n  this._log('draining', 'info')\n\n  // disable the ability to put more work on the queue.\n  this._draining = true\n\n  var self = this\n  var check = function () {\n    if (self._waitingClients.size() > 0) {\n      // wait until all client requests have been satisfied.\n      setTimeout(check, 100)\n    } else if (self._availableObjects.length !== self._count) {\n      // wait until all objects have been released.\n      setTimeout(check, 100)\n    } else if (callback) {\n      callback()\n    }\n  }\n  check()\n}\n\n/**\n * Forcibly destroys all clients regardless of timeout.  Intended to be\n * invoked as part of a drain.  Does not prevent the creation of new\n * clients as a result of subsequent calls to acquire.\n *\n * Note that if factory.min > 0, the pool will destroy all idle resources\n * in the pool, but replace them with newly created resources up to the\n * specified factory.min value.  If this is not desired, set factory.min\n * to zero before calling destroyAllNow()\n *\n * @param {Function} callback\n *   Optional. Callback invoked after all existing clients are destroyed.\n */\nPool.prototype.destroyAllNow = function destroyAllNow (callback) {\n  this._log('force destroying all objects', 'info')\n  var willDie = this._availableObjects\n  this._availableObjects = []\n  var obj = willDie.shift()\n  while (obj !== null && obj !== undefined) {\n    this.destroy(obj.obj)\n    obj = willDie.shift()\n  }\n  this._removeIdleScheduled = false\n  clearTimeout(this._removeIdleTimer)\n  if (callback) {\n    callback()\n  }\n}\n\n/**\n * Decorates a function to use a acquired client from the object pool when called.\n *\n * @param {Function} decorated\n *   The decorated function, accepting a client as the first argument and\n *   (optionally) a callback as the final argument.\n *\n * @param {Number} priority\n *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority\n *   of the caller if there are no available resources.  Lower numbers mean higher\n *   priority.\n */\nPool.prototype.pooled = function pooled (decorated, priority) {\n  var self = this\n  return function () {\n    var callerArgs = arguments\n    var callerCallback = callerArgs[callerArgs.length - 1]\n    var callerHasCallback = typeof callerCallback === 'function'\n    self.acquire(function (err, client) {\n      if (err) {\n        if (callerHasCallback) {\n          callerCallback(err)\n        }\n        return\n      }\n\n      var args = [client].concat(Array.prototype.slice.call(callerArgs, 0, callerHasCallback ? -1 : undefined))\n      args.push(function () {\n        self.release(client)\n        if (callerHasCallback) {\n          callerCallback.apply(null, arguments)\n        }\n      })\n\n      decorated.apply(null, args)\n    }, priority)\n  }\n}\n\nPool.prototype.getPoolSize = function getPoolSize () {\n  return this._count\n}\n\nPool.prototype.getName = function getName () {\n  return this._factory.name\n}\n\nPool.prototype.availableObjectsCount = function availableObjectsCount () {\n  return this._availableObjects.length\n}\n\nPool.prototype.inUseObjectsCount = function inUseObjectsCount () {\n  return this._inUseObjects.length\n}\n\nPool.prototype.waitingClientsCount = function waitingClientsCount () {\n  return this._waitingClients.size()\n}\n\nPool.prototype.getMaxPoolSize = function getMaxPoolSize () {\n  return this._factory.max\n}\n\nPool.prototype.getMinPoolSize = function getMinPoolSize () {\n  return this._factory.min\n}\n\nexports.Pool = Pool\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/generic-pool/lib/generic-pool.js\n// module id = 30\n// module chunks = 0","var fs = require('fs')\n  , lstat = fs.lstatSync;\n\nexports.readlinkSync = function (p) {\n  if (lstat(p).isSymbolicLink()) {\n    return fs.readlinkSync(p);\n  } else {\n    return p;\n  }\n};\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/graceful-readlink/index.js\n// module id = 31\n// module chunks = 0","var PQ = module.exports = require('bindings')('addon.node').PQ;\n\n//print out the include dir\n//if you want to include this in a binding.gyp file\nif(!module.parent) {\n  var path = require('path');\n  console.log(path.normalize(__dirname + '/src'));\n}\n\nvar EventEmitter = require('events').EventEmitter;\nvar assert = require('assert');\n\nfor(var key in EventEmitter.prototype) {\n  PQ.prototype[key] = EventEmitter.prototype[key];\n}\n\n//SYNC connects to the server\n//throws an exception in the event of a connection error\nPQ.prototype.connectSync = function(paramString) {\n  this.connected = true;\n  if(!paramString) {\n    paramString = '';\n  }\n  var connected = this.$connectSync(paramString);\n  if(!connected) {\n    var err = new Error(this.errorMessage());\n    this.finish();\n    throw err;\n  }\n};\n\n//connects async using a background thread\n//calls the callback with an error if there was one\nPQ.prototype.connect = function(paramString, cb) {\n  this.connected = true;\n  if(typeof paramString == 'function') {\n    cb = paramString;\n    paramString = '';\n  }\n  if(!paramString) {\n    paramString = '';\n  }\n  assert(cb, 'Must provide a connection callback');\n  if(process.domain) {\n    cb = process.domain.bind(cb);\n  }\n  this.$connect(paramString, cb);\n};\n\nPQ.prototype.errorMessage = function() {\n  return this.$getLastErrorMessage();\n};\n\n//returns an int for the fd of the socket\nPQ.prototype.socket = function() {\n  return this.$socket();\n};\n\n// return server version number e.g. 90300\nPQ.prototype.serverVersion = function () {\n  return this.$serverVersion();\n};\n\n//finishes the connection & closes it\nPQ.prototype.finish = function() {\n  this.connected = false;\n  this.$finish();\n};\n\n////SYNC executes a plain text query\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.exec = function(commandText) {\n  if(!commandText) {\n    commandText = '';\n  }\n  this.$exec(commandText);\n};\n\n//SYNC executes a query with parameters\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.execParams = function(commandText, parameters) {\n  if(!commandText) {\n    commandText = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  this.$execParams(commandText, parameters);\n};\n\n//SYNC prepares a named query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.prepare = function(statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!commandText) {\n    commandText = '';\n  }\n  nParams = Number(nParams) || 0;\n  this.$prepare(statementName, commandText, nParams);\n};\n\n//SYNC executes a named, prepared query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\nPQ.prototype.execPrepared = function(statementName, parameters) {\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  this.$execPrepared(statementName, parameters);\n};\n\n//send a command to begin executing a query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQuery = function(commandText) {\n  if(!commandText) {\n    commandText = '';\n  }\n  return this.$sendQuery(commandText);\n};\n\n//send a command to begin executing a query with parameters in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQueryParams = function(commandText, parameters) {\n  if(!commandText) {\n    commandText = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  return this.$sendQueryParams(commandText, parameters);\n};\n\n//send a command to prepare a named query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendPrepare = function(statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!commandText) {\n    commandText = '';\n  }\n  nParams = Number(nParams) || 0;\n  return this.$sendPrepare(statementName, commandText, nParams);\n};\n\n//send a command to execute a named query in async mode\n//returns true if sent, or false if there was a send failure\nPQ.prototype.sendQueryPrepared = function(statementName, parameters) {\n  if(!statementName) {\n    statementName = '';\n  }\n  if(!parameters) {\n    parameters = [];\n  }\n  return this.$sendQueryPrepared(statementName, parameters);\n};\n\n//'pops' a result out of the buffered\n//response data read during async command execution\n//and stores it on the c/c++ object so you can consume\n//the data from it.  returns true if there was a pending result\n//or false if there was no pending result. if there was no pending result\n//the last found result is not overwritten so you can call getResult as many\n//times as you want, and you'll always have the last available result for consumption\nPQ.prototype.getResult = function() {\n  return this.$getResult();\n};\n\n//returns a text of the enum associated with the result\n//usually just PGRES_COMMAND_OK or PGRES_FATAL_ERROR\nPQ.prototype.resultStatus = function() {\n  return this.$resultStatus();\n};\n\nPQ.prototype.resultErrorMessage = function() {\n  return this.$resultErrorMessage();\n};\n\nPQ.prototype.resultErrorFields = function() {\n  return this.$resultErrorFields();\n};\n\n//free the memory associated with a result\n//this is somewhat handled for you within the c/c++ code\n//by never allowing the code to 'leak' a result. still,\n//if you absolutely want to free it yourself, you can use this.\nPQ.prototype.clear = function() {\n  this.$clear();\n};\n\n//returns the number of tuples (rows) in the result set\nPQ.prototype.ntuples = function() {\n  return this.$ntuples();\n};\n\n//returns the number of fields (columns) in the result set\nPQ.prototype.nfields = function() {\n  return this.$nfields();\n};\n\n//returns the name of the field (column) at the given offset\nPQ.prototype.fname = function(offset) {\n  return this.$fname(offset);\n};\n\n//returns the Oid of the type for the given field\nPQ.prototype.ftype = function(offset) {\n  return this.$ftype(offset);\n};\n\n//returns a text value at the given row/col\n//if the value is null this still returns empty string\n//so you need to use PQ#getisnull to determine\nPQ.prototype.getvalue = function(row, col) {\n  return this.$getvalue(row, col);\n};\n\n//returns true/false if the value is null\nPQ.prototype.getisnull = function(row, col) {\n  return this.$getisnull(row, col);\n};\n\n//returns the status of the command\nPQ.prototype.cmdStatus = function() {\n  return this.$cmdStatus();\n};\n\n//returns the tuples in the command\nPQ.prototype.cmdTuples = function() {\n  return this.$cmdTuples();\n};\n\n//starts the 'read ready' libuv socket listener.\n//Once the socket becomes readable, the PQ instance starts\n//emitting 'readable' events.  Similar to how node's readable-stream\n//works except to clear the SELECT() notification you need to call\n//PQ#consumeInput instead of letting node pull the data off the socket\n//http://www.postgresql.org/docs/9.1/static/libpq-async.html\nPQ.prototype.startReader = function() {\n  assert(this.connected, 'Must be connected to start reader');\n  this.$startRead();\n};\n\n//suspends the libuv socket 'read ready' listener\nPQ.prototype.stopReader = function() {\n  this.$stopRead();\n};\n\nPQ.prototype.writable = function(cb) {\n  assert(this.connected, 'Must be connected to start writer');\n  this.$startWrite();\n  return this.once('writable', cb);\n};\n\n//returns boolean - false indicates an error condition\n//e.g. a failure to consume input\nPQ.prototype.consumeInput = function() {\n  return this.$consumeInput();\n};\n\n//returns true if PQ#getResult would cause\n//the process to block waiting on results\n//false indicates PQ#getResult can be called\n//with an assurance of not blocking\nPQ.prototype.isBusy = function() {\n  return this.$isBusy();\n};\n\n//toggles the socket blocking on outgoing writes\nPQ.prototype.setNonBlocking = function(truthy) {\n  return this.$setNonBlocking(truthy ? 1 : 0);\n};\n\n//returns true if the connection is non-blocking on writes, otherwise false\n//note: connection is always non-blocking on reads if using the send* methods\nPQ.prototype.isNonBlocking = function() {\n  return this.$isNonBlocking();\n};\n\n//returns 1 if socket is not write-ready\n//returns 0 if all data flushed to socket\n//returns -1 if there is an error\nPQ.prototype.flush = function() {\n  return this.$flush();\n};\n\n//escapes a literal and returns the escaped string\n//I'm not 100% sure this doesn't do any I/O...need to check that\nPQ.prototype.escapeLiteral = function(input) {\n  if(!input) return input;\n  return this.$escapeLiteral(input);\n};\n\nPQ.prototype.escapeIdentifier = function(input) {\n  if(!input) return input;\n  return this.$escapeIdentifier(input);\n};\n\n//Checks for any notifications which may have arrivied\n//and returns them as a javascript object: {relname: 'string', extra: 'string', be_pid: int}\n//if there are no pending notifications this returns undefined\nPQ.prototype.notifies = function() {\n  return this.$notifies();\n};\n\n//Sends a buffer of binary data to the server\n//returns 1 if the command was sent successfully\n//returns 0 if the command would block (use PQ#writable here if so)\n//returns -1 if there was an error\nPQ.prototype.putCopyData = function(buffer) {\n  assert(buffer instanceof Buffer);\n  return this.$putCopyData(buffer);\n};\n\n//Sends a command to 'finish' the copy\n//if an error message is passed, it will be sent to the\n//backend and signal a request to cancel the copy in\n//returns 1 if sent succesfully\n//returns 0 if the command would block\n//returns -1 if there was an error\nPQ.prototype.putCopyEnd = function(errorMessage) {\n  if(errorMessage) {\n    return this.$putCopyEnd(errorMessage);\n  }\n  return this.$putCopyEnd();\n};\n\n//Gets a buffer of data from a copy out command\n//if async is passed as true it will not block waiting\n//for the result, otherwise this will BLOCK for a result.\n//returns a buffer if successful\n//returns 0 if copy is still in process (async only)\n//returns -1 if the copy is done\n//returns -2 if there was an error\nPQ.prototype.getCopyData = function(async) {\n  return this.$getCopyData(!!async);\n};\n\nPQ.prototype.cancel = function() {\n  return this.$cancel();\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/libpq/index.js\n// module id = 32\n// module chunks = 0","var assert = require('assert')\n\nvar Reader = module.exports = function(options) {\n  //TODO - remove for version 1.0\n  if(typeof options == 'number') {\n    options = { headerSize: options }\n  }\n  options = options || {}\n  this.offset = 0\n  this.lastChunk = false\n  this.chunk = null\n  this.headerSize = options.headerSize || 0\n  this.lengthPadding = options.lengthPadding || 0\n  this.header = null\n  assert(this.headerSize < 2, 'pre-length header of more than 1 byte length not currently supported')\n}\n\nReader.prototype.addChunk = function(chunk) {\n  this.offset = 0\n  this.chunk = chunk\n  if(this.lastChunk) {\n    this.chunk = Buffer.concat([this.lastChunk, this.chunk])\n    this.lastChunk = false\n  }\n}\n\nReader.prototype._save = function() {\n  //save any unread chunks for next read\n  if(this.offset < this.chunk.length) {\n    this.lastChunk = this.chunk.slice(this.offset)\n  }\n  return false\n}\n\nReader.prototype.read = function() {\n  if(this.chunk.length < (this.headerSize + 4 + this.offset)) {\n    return this._save()\n  }\n\n  if(this.headerSize) {\n    this.header = this.chunk[this.offset]\n  }\n\n  //read length of next item\n  var length = this.chunk.readUInt32BE(this.offset + this.headerSize) + this.lengthPadding\n\n  //next item spans more chunks than we have\n  var remaining = this.chunk.length - (this.offset + 4 + this.headerSize)\n  if(length > remaining) {\n    return this._save()\n  }\n\n  this.offset += (this.headerSize + 4)\n  var result = this.chunk.slice(this.offset, this.offset + length)\n  this.offset += length\n  return result\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/packet-reader/index.js\n// module id = 33\n// module chunks = 0","'use strict';\n\nvar url = require('url');\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  var config;\n  //unix socket\n  if(str.charAt(0) === '/') {\n    config = str.split(' ');\n    return { host: config[0], database: config[1] };\n  }\n  // url parse expects spaces encoded as %20\n  if(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, \"%$1\");\n  }\n  var result = url.parse(str, true);\n  config = {};\n\n  if (result.query.application_name) {\n    config.application_name = result.query.application_name;\n  }\n  if (result.query.fallback_application_name) {\n    config.fallback_application_name = result.query.fallback_application_name;\n  }\n\n  config.port = result.port;\n  if(result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname);\n    config.database = result.query.db;\n    config.client_encoding = result.query.encoding;\n    return config;\n  }\n  config.host = result.hostname;\n\n  // result.pathname is not always guaranteed to have a '/' prefix (e.g. relative urls)\n  // only strip the slash if it is present.\n  var pathname = result.pathname;\n  if (pathname && pathname.charAt(0) === '/') {\n    pathname = result.pathname.slice(1) || null;\n  }\n  config.database = pathname && decodeURI(pathname);\n\n  var auth = (result.auth || ':').split(':');\n  config.user = auth[0];\n  config.password = auth.splice(1).join(':');\n\n  var ssl = result.query.ssl;\n  if (ssl === 'true' || ssl === '1') {\n    config.ssl = true;\n  }\n\n  return config;\n}\n\nmodule.exports = {\n  parse: parse\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-connection-string/index.js\n// module id = 34\n// module chunks = 0","var Libpq = require('libpq');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar assert = require('assert');\nvar types = require('pg-types');\n\nvar Client = module.exports = function(config) {\n  if(!(this instanceof Client)) {\n    return new Client(config);\n  }\n\n  config = config || {};\n\n  EventEmitter.call(this);\n  this.pq = new Libpq();\n  this._reading = false;\n  this._read = this._read.bind(this);\n\n  //allow custom type converstion to be passed in\n  this._types = config.types || types;\n\n  //allow config to specify returning results\n  //as an array of values instead of a hash\n  this.arrayMode = config.arrayMode || false;\n  var self = this;\n\n  //lazy start the reader if notifications are listened for\n  //this way if you only run sync queries you wont block\n  //the event loop artificially\n  this.on('newListener', function(event) {\n    if(event != 'notification') return;\n    self._startReading();\n  });\n};\n\nutil.inherits(Client, EventEmitter);\n\nClient.prototype.connect = function(params, cb) {\n  this.pq.connect(params, cb);\n};\n\nClient.prototype.connectSync = function(params) {\n  this.pq.connectSync(params);\n};\n\nClient.prototype._parseResults = function(pq, rows) {\n  var rowCount = pq.ntuples();\n  var colCount = pq.nfields();\n  for(var i = 0; i < rowCount; i++) {\n    var row = this.arrayMode ? [] : {};\n    rows.push(row);\n    for(var j = 0; j < colCount; j++) {\n      var rawValue = pq.getvalue(i, j);\n      var value = rawValue;\n      if(rawValue == '') {\n        if(pq.getisnull(i, j)) {\n          value = null;\n        }\n      } else {\n        value = this._types.getTypeParser(pq.ftype(j))(rawValue);\n      }\n      if(this.arrayMode) {\n        row.push(value);\n      } else {\n        row[pq.fname(j)] = value;\n      }\n    }\n  }\n  return rows;\n}\n\nClient.prototype.end = function(cb) {\n  this._stopReading();\n  this.pq.finish();\n  if(cb) setImmediate(cb);\n};\n\nClient.prototype._readError = function(message) {\n  this._stopReading();\n  var err = new Error(message || this.pq.errorMessage());\n  this.emit('error', err);\n};\n\nClient.prototype._stopReading = function() {\n  if(!this._reading) return;\n  this._reading = false;\n  this.pq.stopReader();\n  this.pq.removeListener('readable', this._read);\n};\n\n//called when libpq is readable\nClient.prototype._read = function() {\n  var pq = this.pq;\n  //read waiting data from the socket\n  //e.g. clear the pending 'select'\n  if(!pq.consumeInput()) {\n    //if consumeInput returns false\n    //than a read error has been encountered\n    return this._readError();\n  }\n\n  //check if there is still outstanding data\n  //if so, wait for it all to come in\n  if(pq.isBusy()) {\n    return;\n  }\n\n  //load our result object\n  var rows = []\n  while(pq.getResult()) {\n    if(pq.resultStatus() == 'PGRES_TUPLES_OK') {\n      this._parseResults(this.pq, rows);\n    }\n    if(pq.resultStatus() == 'PGRES_COPY_OUT')  break;\n  }\n\n\n  var status = pq.resultStatus();\n  switch(status) {\n    case 'PGRES_FATAL_ERROR':\n      return this._readError();\n    case 'PGRES_COMMAND_OK':\n    case 'PGRES_TUPLES_OK':\n    case 'PGRES_COPY_OUT':\n    case 'PGRES_EMPTY_QUERY': {\n      this.emit('result', rows);\n      break;\n    }\n    default:\n      return this._readError('unrecognized command status: ' + status);\n  }\n\n  var notice;\n  while(notice = this.pq.notifies()) {\n    this.emit('notification', notice);\n  }\n};\n\n//ensures the client is reading and\n//everything is set up for async io\nClient.prototype._startReading = function() {\n  if(this._reading) return;\n  this._reading = true;\n  this.pq.on('readable', this._read);\n  this.pq.startReader();\n};\n\nvar throwIfError = function(pq) {\n  var err = pq.resultErrorMessage() || pq.errorMessage();\n  if(err) {\n    throw new Error(err);\n  }\n}\n\nClient.prototype._awaitResult = function(cb) {\n  var self = this;\n  var onError = function(e) {\n    self.removeListener('error', onError);\n    self.removeListener('result', onResult);\n    cb(e);\n  };\n\n  var onResult = function(rows) {\n    self.removeListener('error', onError);\n    self.removeListener('result', onResult);\n    cb(null, rows);\n  };\n  this.once('error', onError);\n  this.once('result', onResult);\n  this._startReading();\n};\n\n//wait for the writable socket to drain\nClient.prototype.waitForDrain = function(pq, cb) {\n  var res = pq.flush();\n  //res of 0 is success\n  if(res === 0) return cb();\n\n  //res of -1 is failure\n  if(res === -1) return cb(pq.errorMessage());\n\n  //otherwise outgoing message didn't flush to socket\n  //wait for it to flush and try again\n  var self = this\n  //you cannot read & write on a socket at the same time\n  return pq.writable(function() {\n    self.waitForDrain(pq, cb)\n  });\n};\n\n//send an async query to libpq and wait for it to\n//finish writing query text to the socket\nClient.prototype.dispatchQuery = function(pq, fn, cb) {\n  this._stopReading();\n  var success = pq.setNonBlocking(true);\n  if(!success) return cb(new Error('Unable to set non-blocking to true'));\n  var sent = fn();\n  if(!sent) return cb(new Error(pq.errorMessage() || 'Something went wrong dispatching the query'));\n  this.waitForDrain(pq, cb);\n};\n\nClient.prototype.query = function(text, values, cb) {\n  var queryFn;\n\n  if(typeof values == 'function') {\n    cb = values;\n    queryFn = function() { return self.pq.sendQuery(text); };\n  } else {\n    queryFn = function() { return self.pq.sendQueryParams(text, values); };\n  }\n\n  var self = this\n\n  self.dispatchQuery(self.pq, queryFn, function(err) {\n    if(err) return cb(err);\n\n    self._awaitResult(cb)\n  });\n};\n\nClient.prototype.prepare = function(statementName, text, nParams, cb) {\n  var self = this;\n  var fn = function() {\n    return self.pq.sendPrepare(statementName, text, nParams);\n  }\n\n  self.dispatchQuery(self.pq, fn, function(err) {\n    if(err) return cb(err);\n    self._awaitResult(cb);\n  });\n};\n\nClient.prototype.execute = function(statementName, parameters, cb) {\n  var self = this;\n\n  var fn = function() {\n    return self.pq.sendQueryPrepared(statementName, parameters);\n  };\n\n  self.dispatchQuery(self.pq, fn, function(err, rows) {\n    if(err) return cb(err);\n    self._awaitResult(cb)\n  });\n};\n\nvar CopyStream = require('./lib/copy-stream');\nClient.prototype.getCopyStream = function() {\n  this.pq.setNonBlocking(true);\n  this._stopReading();\n  return new CopyStream(this.pq);\n};\n\n//cancel a currently executing query\nClient.prototype.cancel = function(cb) {\n  assert(cb, 'Callback is required');\n  //result is either true or a string containing an error\n  var result = this.pq.cancel();\n  return setImmediate(function() {\n    cb(result === true ? undefined : new Error(result));\n  });\n};\n\nClient.prototype.querySync = function(text, values) {\n  var queryFn;\n  var pq = this.pq;\n  pq[values ? 'execParams' : 'exec'].call(pq, text, values);\n  throwIfError(this.pq);\n  return this._parseResults(pq, []);\n};\n\nClient.prototype.prepareSync = function(statementName, text, nParams) {\n  this.pq.prepare(statementName, text, nParams);\n  throwIfError(this.pq);\n};\n\nClient.prototype.executeSync = function(statementName, parameters) {\n  this.pq.execPrepared(statementName, parameters);\n  throwIfError(this.pq);\n  return this._parseResults(this.pq, []);\n};\n\nClient.prototype.escapeLiteral = function(value) {\n  return this.pq.escapeLiteral(value);\n};\n\nClient.prototype.escapeIdentifier = function(value) {\n  return this.pq.escapeIdentifier(value);\n};\n\n//export the version number so we can check it in node-postgres\nmodule.exports.version = require('./package.json').version\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-native/index.js\n// module id = 35\n// module chunks = 0","var Duplex = require('stream').Duplex;\nvar Writable = require('stream').Writable;\nvar util = require('util');\n\nvar CopyStream = module.exports = function(pq, options) {\n  Duplex.call(this, options);\n  this.pq = pq;\n  this._reading = false;\n};\n\nutil.inherits(CopyStream, Duplex);\n\n//writer methods\nCopyStream.prototype._write = function(chunk, encoding, cb) {\n  var result = this.pq.putCopyData(chunk);\n\n  //sent successfully\n  if(result === 1) return cb();\n\n  //error\n  if(result === -1) return cb(new Error(this.pq.errorMessage()));\n\n  //command would block. wait for writable and call again.\n  var self = this;\n  this.pq.writable(function() {\n    self._write(chunk, encoding, cb);\n  });\n};\n\nCopyStream.prototype.end = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  var self = this;\n\n  var callback = args.pop();\n\n  if(args.length) {\n    this.write(args[0]);\n  }\n  var result = this.pq.putCopyEnd();\n\n  //sent successfully\n  if(result === 1) {\n    //consume our results and then call 'end' on the\n    //\"parent\" writable class so we can emit 'finish' and\n    //all that jazz\n    return consumeResults(this.pq, function(err, res) {\n      Writable.prototype.end.call(self);\n\n      //handle possible passing of callback to end method\n      if(callback) {\n        callback();\n      }\n    });\n  }\n\n  //error\n  if(result === -1) {\n    var err = new Error(this.pq.errorMessage());\n    return this.emit('error', err);\n  }\n\n  //command would block. wait for writable and call end again\n  //don't pass any buffers to end on the second call because\n  //we already sent them to possible this.write the first time\n  //we called end\n  return this.pq.writable(function() {\n    return self.end.apply(self, callback);\n  });\n};\n\n//reader methods\nCopyStream.prototype._consumeBuffer = function(cb) {\n  var result = this.pq.getCopyData(true);\n  if(result instanceof Buffer) {\n    return setImmediate(function() {\n      cb(null, result);\n    })\n  }\n  if(result === -1) {\n    //end of stream\n    return cb(null, null);\n  }\n  if(result === 0) {\n    var self = this;\n    this.pq.once('readable', function() {\n      self.pq.stopReader();\n      self.pq.consumeInput();\n      self._consumeBuffer(cb);\n    });\n    return this.pq.startReader();\n  }\n  cb(new Error('Unrecognized read status: ' + result))\n};\n\nCopyStream.prototype._read = function(size) {\n  if(this._reading) return;\n  this._reading = true;\n  //console.log('read begin');\n  var self = this\n  this._consumeBuffer(function(err, buffer) {\n    self._reading = false;\n    if(err) {\n      return self.emit('error', err)\n    }\n    if(buffer === false) {\n      //nothing to read for now, return\n      return;\n    }\n    self.push(buffer);\n  });\n};\n\nvar consumeResults = function(pq, cb) {\n\n  var cleanup = function() {\n    pq.removeListener('readable', onReadable);\n    pq.stopReader();\n  }\n\n  var readError = function(message) {\n    cleanup();\n    return cb(new Error(message || pq.errorMessage()));\n  };\n\n\n  var onReadable = function() {\n\n    //read waiting data from the socket\n    //e.g. clear the pending 'select'\n    if(!pq.consumeInput()) {\n      return readError();\n    }\n\n    //check if there is still outstanding data\n    //if so, wait for it all to come in\n    if(pq.isBusy()) {\n      return;\n    }\n\n    //load our result object\n    pq.getResult();\n\n    //\"read until results return null\"\n    //or in our case ensure we only have one result\n    if(pq.getResult() && pq.resultStatus() != 'PGRES_COPY_OUT') {\n      return readError('Only one result at a time is accepted');\n    }\n\n    if(pq.resultStatus() == 'PGRES_FATAL_ERROR') {\n      return readError();\n    }\n\n    cleanup();\n    return cb(null);\n  };\n  pq.on('readable', onReadable);\n  pq.startReader();\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-native/lib/copy-stream.js\n// module id = 36\n// module chunks = 0","var textParsers = require('./lib/textParsers');\nvar binaryParsers = require('./lib/binaryParsers');\nvar arrayParser = require('./lib/arrayParser');\n\nvar typeParsers = {\n  text: {},\n  binary: {}\n};\n\n//the empty parse function\nvar noParse = function(val) {\n  return String(val);\n};\n\n//returns a function used to convert a specific type (specified by\n//oid) into a result javascript type\n//note: the oid can be obtained via the following sql query:\n//SELECT oid FROM pg_type WHERE typname = 'TYPE_NAME_HERE';\nvar getTypeParser = function(oid, format) {\n  format = format || 'text';\n  if (!typeParsers[format]) {\n    return noParse;\n  }\n  return typeParsers[format][oid] || noParse;\n};\n\nvar setTypeParser = function(oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  typeParsers[format][oid] = parseFn;\n};\n\ntextParsers.init(function(oid, converter) {\n  typeParsers.text[oid] = converter;\n});\n\nbinaryParsers.init(function(oid, converter) {\n  typeParsers.binary[oid] = converter;\n});\n\nmodule.exports = {\n  getTypeParser: getTypeParser,\n  setTypeParser: setTypeParser,\n  arrayParser: arrayParser\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-native/~/pg-types/index.js\n// module id = 37\n// module chunks = 0","var parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-native/~/pg-types/lib/binaryParsers.js\n// module id = 38\n// module chunks = 0","var arrayParser = require(__dirname + \"/arrayParser.js\");\n\n//parses PostgreSQL server formatted date strings into javascript date objects\nvar parseDate = function(isoDate) {\n  //TODO this could do w/ a refactor\n  var dateMatcher = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?/;\n\n  var match = dateMatcher.exec(isoDate);\n  //could not parse date\n  if(!match) {\n    dateMatcher = /^(\\d{1,})-(\\d{2})-(\\d{2})$/;\n    match = dateMatcher.test(isoDate);\n    if(!match) {\n      return null;\n    } else {\n      //it is a date in YYYY-MM-DD format\n      //add time portion to force js to parse as local time\n      return new Date(isoDate + ' 00:00:00');\n    }\n  }\n  var isBC = /BC$/.test(isoDate);\n  var _year = parseInt(match[1], 10);\n  var isFirstCentury = (_year > 0) && (_year < 100);\n  var year = (isBC ? \"-\" : \"\") + match[1];\n\n  var month = parseInt(match[2],10)-1;\n  var day = match[3];\n  var hour = parseInt(match[4],10);\n  var min = parseInt(match[5],10);\n  var seconds = parseInt(match[6], 10);\n\n  var miliString = match[7];\n  var mili = 0;\n  if(miliString) {\n    mili = 1000 * parseFloat(miliString);\n  }\n\n  //match timezones like the following:\n  //Z (UTC)\n  //-05\n  //+06:30\n  var tZone = /([Z|+\\-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/.exec(isoDate.split(' ')[1]);\n  //minutes to adjust for timezone\n  var tzAdjust = 0;\n  var tzSign = 1;\n  var date;\n  if(tZone) {\n    var type = tZone[1];\n    switch(type) {\n    case 'Z':\n      break;\n    case '-':\n      tzSign = -1;\n    case '+':\n      tzAdjust = tzSign * (\n        (parseInt(tZone[2], 10) * 3600) +\n        (parseInt(tZone[3] || 0, 10) * 60) +\n        (parseInt(tZone[4] || 0, 10))\n      );\n      break;\n    default:\n      throw new Error(\"Unidentifed tZone part \" + type);\n    }\n\n    var utcOffset = Date.UTC(year, month, day, hour, min, seconds, mili);\n\n    date = new Date(utcOffset - (tzAdjust * 1000));\n  }\n  //no timezone information\n  else {\n    date = new Date(year, month, day, hour, min, seconds, mili);\n  }\n\n  if (isFirstCentury) {\n    date.setUTCFullYear(year);\n  }\n\n  return date;\n};\n\nvar parseBool = function(val) {\n  if(val === null) return val;\n  return val === 't';\n};\n\nvar parseBoolArray = function(val) {\n  if(!val) { return null; }\n  var p = arrayParser.create(val, function(entry){\n    if(entry !== null) {\n      entry = parseBool(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseIntegerArray = function(val) {\n  if(!val) { return null; }\n  var p = arrayParser.create(val, function(entry){\n    if(entry !== null) {\n      entry = parseInt(entry, 10);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseBigIntegerArray = function(val) {\n  if(!val) { return null; }\n  var p = arrayParser.create(val, function(entry){\n    if(entry !== null) {\n      entry = parseBigInteger(entry).trim();\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseFloatArray = function(val) {\n  if(!val) { return null; }\n  var p = arrayParser.create(val, function(entry) {\n    if(entry !== null) {\n      entry = parseFloat(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseStringArray = function(val) {\n  if(!val) { return null; }\n\n  var p = arrayParser.create(val);\n  return p.parse();\n};\n\nvar parseDateArray = function(val) {\n  if (!val) { return null; }\n\n  var p = arrayParser.create(val, function(entry) {\n    if (entry !== null) {\n      entry = parseDate(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar NUM = '([+-]?\\\\d+)';\nvar YEAR = NUM + '\\\\s+years?';\nvar MON = NUM + '\\\\s+mons?';\nvar DAY = NUM + '\\\\s+days?';\nvar TIME = '([+-])?(\\\\d\\\\d):(\\\\d\\\\d):(\\\\d\\\\d)';\nvar INTERVAL = [YEAR,MON,DAY,TIME].map(function(p){\n  return \"(\"+p+\")?\";\n}).join('\\\\s*');\n\nvar parseInterval = function(val) {\n  if (!val) { return {}; }\n  var m = new RegExp(INTERVAL).exec(val);\n  var i = {};\n  if (m[2]) { i.years = parseInt(m[2], 10); }\n  if (m[4]) { i.months = parseInt(m[4], 10); }\n  if (m[6]) { i.days = parseInt(m[6], 10); }\n  if (m[9]) { i.hours = parseInt(m[9], 10); }\n  if (m[10]) { i.minutes = parseInt(m[10], 10); }\n  if (m[11]) { i.seconds = parseInt(m[11], 10); }\n  if (m[8] == '-'){\n    if (i.hours) { i.hours *= -1; }\n    if (i.minutes) { i.minutes *= -1; }\n    if (i.seconds) { i.seconds *= -1; }\n  }\n  for (var field in i){\n    if (i[field] === 0) {\n      delete i[field];\n    }\n  }\n  return i;\n};\n\nvar parseByteA = function(val) {\n  if(/^\\\\x/.test(val)){\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(val.substr(2), 'hex');\n  }else{\n    var out = \"\";\n    var i = 0;\n    while(i < val.length){\n      if(val[i] != \"\\\\\"){\n        out += val[i];\n        ++i;\n      }else{\n        if(val.substr(i+1,3).match(/[0-7]{3}/)){\n          out += String.fromCharCode(parseInt(val.substr(i+1,3),8));\n          i += 4;\n        }else{\n          backslashes = 1;\n          while(i+backslashes < val.length && val[i+backslashes] == \"\\\\\")\n            backslashes++;\n          for(k=0; k<Math.floor(backslashes/2); ++k)\n            out += \"\\\\\";\n          i += Math.floor(backslashes / 2) * 2;\n        }\n      }\n    }\n    return new Buffer(out,\"binary\");\n  }\n};\n\nvar maxLen = Number.MAX_VALUE.toString().length;\n\nvar parseInteger = function(val) {\n  return parseInt(val, 10);\n};\n\nvar parseBigInteger = function(val) {\n  var valStr = String(val);\n  if (/^\\d+$/.test(valStr)) { return valStr; }\n  return val;\n};\n\nvar parseJsonArray = function(val) {\n  var arr = parseStringArray(val);\n\n  if (!arr) {\n    return arr;\n  }\n\n  return arr.map(function(el) { return JSON.parse(el); });\n};\n\nvar init = function(register) {\n  register(20, parseBigInteger); // int8\n  register(21, parseInteger); // int2\n  register(23, parseInteger); // int4\n  register(26, parseInteger); // oid\n  register(700, parseFloat); // float4/real\n  register(701, parseFloat); // float8/double\n  register(16, parseBool);\n  register(1082, parseDate); // date\n  register(1114, parseDate); // timestamp without timezone\n  register(1184, parseDate); // timestamp\n  register(1000, parseBoolArray);\n  register(1005, parseIntegerArray); // _int2\n  register(1007, parseIntegerArray); // _int4\n  register(1016, parseBigIntegerArray); // _int8\n  register(1021, parseFloatArray); // _float4\n  register(1022, parseFloatArray); // _float8\n  register(1231, parseFloatArray); // _numeric\n  register(1014, parseStringArray); //char\n  register(1015, parseStringArray); //varchar\n  register(1008, parseStringArray);\n  register(1009, parseStringArray);\n  register(1115, parseDateArray); // timestamp without time zone[]\n  register(1182, parseDateArray); // _date\n  register(1185, parseDateArray); // timestamp with time zone[]\n  register(1186, parseInterval);\n  register(17, parseByteA);\n  register(114, JSON.parse.bind(JSON));\n  register(3802, JSON.parse.bind(JSON));\n  register(199, parseJsonArray); // json[]\n  register(2951, parseStringArray); // uuid[]\n};\n\nmodule.exports = {\n  init: init\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-native/~/pg-types/lib/textParsers.js\n// module id = 39\n// module chunks = 0","module.exports = {\n\t\"_args\": [\n\t\t[\n\t\t\t{\n\t\t\t\t\"raw\": \"pg-native@^1.10.0\",\n\t\t\t\t\"scope\": null,\n\t\t\t\t\"escapedName\": \"pg-native\",\n\t\t\t\t\"name\": \"pg-native\",\n\t\t\t\t\"rawSpec\": \"^1.10.0\",\n\t\t\t\t\"spec\": \">=1.10.0 <2.0.0\",\n\t\t\t\t\"type\": \"range\"\n\t\t\t},\n\t\t\t\"/home/neil/DevGit/zf2dbmodelgen/modgen\"\n\t\t]\n\t],\n\t\"_from\": \"pg-native@>=1.10.0 <2.0.0\",\n\t\"_id\": \"pg-native@1.10.0\",\n\t\"_inCache\": true,\n\t\"_location\": \"/pg-native\",\n\t\"_nodeVersion\": \"5.1.0\",\n\t\"_npmUser\": {\n\t\t\"name\": \"brianc\",\n\t\t\"email\": \"brian.m.carlson@gmail.com\"\n\t},\n\t\"_npmVersion\": \"3.3.12\",\n\t\"_phantomChildren\": {\n\t\t\"core-util-is\": \"1.0.2\",\n\t\t\"inherits\": \"2.0.3\",\n\t\t\"string_decoder\": \"0.10.31\"\n\t},\n\t\"_requested\": {\n\t\t\"raw\": \"pg-native@^1.10.0\",\n\t\t\"scope\": null,\n\t\t\"escapedName\": \"pg-native\",\n\t\t\"name\": \"pg-native\",\n\t\t\"rawSpec\": \"^1.10.0\",\n\t\t\"spec\": \">=1.10.0 <2.0.0\",\n\t\t\"type\": \"range\"\n\t},\n\t\"_requiredBy\": [\n\t\t\"#USER\",\n\t\t\"/\"\n\t],\n\t\"_resolved\": \"https://registry.npmjs.org/pg-native/-/pg-native-1.10.0.tgz\",\n\t\"_shasum\": \"abe299214afa2be51db5f5104e14770c738230fd\",\n\t\"_shrinkwrap\": null,\n\t\"_spec\": \"pg-native@^1.10.0\",\n\t\"_where\": \"/home/neil/DevGit/zf2dbmodelgen/modgen\",\n\t\"author\": {\n\t\t\"name\": \"Brian M. Carlson\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/brianc/node-pg-native/issues\"\n\t},\n\t\"dependencies\": {\n\t\t\"libpq\": \"^1.7.0\",\n\t\t\"pg-types\": \"1.6.0\",\n\t\t\"readable-stream\": \"1.0.31\"\n\t},\n\t\"description\": \"A slightly nicer interface to Postgres over node-libpq\",\n\t\"devDependencies\": {\n\t\t\"async\": \"^0.9.0\",\n\t\t\"concat-stream\": \"^1.4.6\",\n\t\t\"generic-pool\": \"^2.1.1\",\n\t\t\"lodash\": \"^2.4.1\",\n\t\t\"mocha\": \"^1.21.4\",\n\t\t\"okay\": \"^0.3.0\",\n\t\t\"pg\": \"*\",\n\t\t\"semver\": \"^4.1.0\"\n\t},\n\t\"directories\": {},\n\t\"dist\": {\n\t\t\"shasum\": \"abe299214afa2be51db5f5104e14770c738230fd\",\n\t\t\"tarball\": \"https://registry.npmjs.org/pg-native/-/pg-native-1.10.0.tgz\"\n\t},\n\t\"gitHead\": \"8c60a074739aa2ed26e6d83e8dbd965ba0f2c953\",\n\t\"homepage\": \"https://github.com/brianc/node-pg-native\",\n\t\"keywords\": [\n\t\t\"postgres\",\n\t\t\"pg\",\n\t\t\"libpq\"\n\t],\n\t\"license\": \"MIT\",\n\t\"main\": \"index.js\",\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"brianc\",\n\t\t\t\"email\": \"brian.m.carlson@gmail.com\"\n\t\t}\n\t],\n\t\"name\": \"pg-native\",\n\t\"optionalDependencies\": {},\n\t\"readme\": \"ERROR: No README data found!\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git://github.com/brianc/node-pg-native.git\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"mocha\"\n\t},\n\t\"version\": \"1.10.0\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-native/package.json\n// module id = 40\n// module chunks = 0","var parseBits = function(data, bits, offset, invert, callback) {\n  offset = offset || 0;\n  invert = invert || false;\n  callback = callback || function(lastValue, newValue, bits) { return (lastValue * Math.pow(2, bits)) + newValue; };\n  var offsetBytes = offset >> 3;\n\n  var inv = function(value) {\n    if (invert) {\n      return ~value & 0xff;\n    }\n\n    return value;\n  };\n\n  // read first (maybe partial) byte\n  var mask = 0xff;\n  var firstBits = 8 - (offset % 8);\n  if (bits < firstBits) {\n    mask = (0xff << (8 - bits)) & 0xff;\n    firstBits = bits;\n  }\n\n  if (offset) {\n    mask = mask >> (offset % 8);\n  }\n\n  var result = 0;\n  if ((offset % 8) + bits >= 8) {\n    result = callback(0, inv(data[offsetBytes]) & mask, firstBits);\n  }\n\n  // read bytes\n  var bytes = (bits + offset) >> 3;\n  for (var i = offsetBytes + 1; i < bytes; i++) {\n    result = callback(result, inv(data[i]), 8);\n  }\n\n  // bits to read, that are not a complete byte\n  var lastBits = (bits + offset) % 8;\n  if (lastBits > 0) {\n    result = callback(result, inv(data[bytes]) >> (8 - lastBits), lastBits);\n  }\n\n  return result;\n};\n\nvar parseFloatFromBits = function(data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1;\n  var sign = parseBits(data, 1);\n  var exponent = parseBits(data, exponentBits, 1);\n\n  if (exponent === 0) {\n    return 0;\n  }\n\n  // parse mantissa\n  var precisionBitsCounter = 1;\n  var parsePrecisionBits = function(lastValue, newValue, bits) {\n    if (lastValue === 0) {\n      lastValue = 1;\n    }\n\n    for (var i = 1; i <= bits; i++) {\n      precisionBitsCounter /= 2;\n      if ((newValue & (0x1 << (bits - i))) > 0) {\n        lastValue += precisionBitsCounter;\n      }\n    }\n\n    return lastValue;\n  };\n\n  var mantissa = parseBits(data, precisionBits, exponentBits + 1, false, parsePrecisionBits);\n\n  // special cases\n  if (exponent == (Math.pow(2, exponentBits + 1) - 1)) {\n    if (mantissa === 0) {\n      return (sign === 0) ? Infinity : -Infinity;\n    }\n\n    return NaN;\n  }\n\n  // normale number\n  return ((sign === 0) ? 1 : -1) * Math.pow(2, exponent - bias) * mantissa;\n};\n\nvar parseInt16 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 15, 1, true) + 1);\n  }\n\n  return parseBits(value, 15, 1);\n};\n\nvar parseInt32 = function(value) {\n  if (parseBits(value, 1) == 1) {\n    return -1 * (parseBits(value, 31, 1, true) + 1);\n  }\n\n  return parseBits(value, 31, 1);\n};\n\nvar parseFloat32 = function(value) {\n  return parseFloatFromBits(value, 23, 8);\n};\n\nvar parseFloat64 = function(value) {\n  return parseFloatFromBits(value, 52, 11);\n};\n\nvar parseNumeric = function(value) {\n  var sign = parseBits(value, 16, 32);\n  if (sign == 0xc000) {\n    return NaN;\n  }\n\n  var weight = Math.pow(10000, parseBits(value, 16, 16));\n  var result = 0;\n\n  var digits = [];\n  var ndigits = parseBits(value, 16);\n  for (var i = 0; i < ndigits; i++) {\n    result += parseBits(value, 16, 64 + (16 * i)) * weight;\n    weight /= 10000;\n  }\n\n  var scale = Math.pow(10, parseBits(value, 16, 48));\n  return ((sign === 0) ? 1 : -1) * Math.round(result * scale) / scale;\n};\n\nvar parseDate = function(isUTC, value) {\n  var sign = parseBits(value, 1);\n  var rawValue = parseBits(value, 63, 1);\n\n  // discard usecs and shift from 2000 to 1970\n  var result = new Date((((sign === 0) ? 1 : -1) * rawValue / 1000) + 946684800000);\n\n  if (!isUTC) {\n    result.setTime(result.getTime() + result.getTimezoneOffset() * 60000);\n  }\n\n  // add microseconds to the date\n  result.usec = rawValue % 1000;\n  result.getMicroSeconds = function() {\n    return this.usec;\n  };\n  result.setMicroSeconds = function(value) {\n    this.usec = value;\n  };\n  result.getUTCMicroSeconds = function() {\n    return this.usec;\n  };\n\n  return result;\n};\n\nvar parseArray = function(value) {\n  var dim = parseBits(value, 32);\n\n  var flags = parseBits(value, 32, 32);\n  var elementType = parseBits(value, 32, 64);\n\n  var offset = 96;\n  var dims = [];\n  for (var i = 0; i < dim; i++) {\n    // parse dimension\n    dims[i] = parseBits(value, 32, offset);\n    offset += 32;\n\n    // ignore lower bounds\n    offset += 32;\n  }\n\n  var parseElement = function(elementType) {\n    // parse content length\n    var length = parseBits(value, 32, offset);\n    offset += 32;\n\n    // parse null values\n    if (length == 0xffffffff) {\n      return null;\n    }\n\n    var result;\n    if ((elementType == 0x17) || (elementType == 0x14)) {\n      // int/bigint\n      result = parseBits(value, length * 8, offset);\n      offset += length * 8;\n      return result;\n    }\n    else if (elementType == 0x19) {\n      // string\n      result = value.toString(this.encoding, offset >> 3, (offset += (length << 3)) >> 3);\n      return result;\n    }\n    else {\n      console.log(\"ERROR: ElementType not implemented: \" + elementType);\n    }\n  };\n\n  var parse = function(dimension, elementType) {\n    var array = [];\n    var i;\n\n    if (dimension.length > 1) {\n      var count = dimension.shift();\n      for (i = 0; i < count; i++) {\n        array[i] = parse(dimension, elementType);\n      }\n      dimension.unshift(count);\n    }\n    else {\n      for (i = 0; i < dimension[0]; i++) {\n        array[i] = parseElement(elementType);\n      }\n    }\n\n    return array;\n  };\n\n  return parse(dims, elementType);\n};\n\nvar parseText = function(value) {\n  return value.toString('utf8');\n};\n\nvar parseBool = function(value) {\n  if(value === null) return null;\n  return (parseBits(value, 8) > 0);\n};\n\nvar init = function(register) {\n  register(21, parseInt16);\n  register(23, parseInt32);\n  register(26, parseInt32);\n  register(1700, parseNumeric);\n  register(700, parseFloat32);\n  register(701, parseFloat64);\n  register(16, parseBool);\n  register(1114, parseDate.bind(null, false));\n  register(1184, parseDate.bind(null, true));\n  register(1000, parseArray);\n  register(1007, parseArray);\n  register(1016, parseArray);\n  register(1008, parseArray);\n  register(1009, parseArray);\n  register(25, parseText);\n};\n\nmodule.exports = {\n  init: init\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-types/lib/binaryParsers.js\n// module id = 43\n// module chunks = 0","var array = require('postgres-array')\nvar ap = require('ap')\nvar arrayParser = require('./arrayParser');\nvar parseDate = require('postgres-date');\nvar parseInterval = require('postgres-interval');\nvar parseByteA = require('postgres-bytea');\n\nfunction allowNull (fn) {\n  return function nullAllowed (value) {\n    if (value === null) return value\n    return fn(value)\n  }\n}\n\nfunction parseBool (value) {\n  if (value === null) return value\n  return value === 't';\n}\n\nfunction parseBoolArray (value) {\n  if (!value) return null\n  return array.parse(value, parseBool)\n}\n\nfunction parseIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(ap.partialRight(parseInt, 10)))\n}\n\nfunction parseBigIntegerArray (value) {\n  if (!value) return null\n  return array.parse(value, allowNull(function (entry) {\n    return parseBigInteger(entry).trim()\n  }))\n}\n\nvar parseFloatArray = function(value) {\n  if(!value) { return null; }\n  var p = arrayParser.create(value, function(entry) {\n    if(entry !== null) {\n      entry = parseFloat(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseStringArray = function(value) {\n  if(!value) { return null; }\n\n  var p = arrayParser.create(value);\n  return p.parse();\n};\n\nvar parseDateArray = function(value) {\n  if (!value) { return null; }\n\n  var p = arrayParser.create(value, function(entry) {\n    if (entry !== null) {\n      entry = parseDate(entry);\n    }\n    return entry;\n  });\n\n  return p.parse();\n};\n\nvar parseByteAArray = function(value) {\n  var arr = parseStringArray(value);\n  if (!arr) return arr;\n\n  return arr.map(function(element) {\n    return parseByteA(element);\n  });\n};\n\nvar parseInteger = function(value) {\n  return parseInt(value, 10);\n};\n\nvar parseBigInteger = function(value) {\n  var valStr = String(value);\n  if (/^\\d+$/.test(valStr)) { return valStr; }\n  return value;\n};\n\nvar parseJsonArray = function(value) {\n  var arr = parseStringArray(value);\n\n  if (!arr) {\n    return arr;\n  }\n\n  return arr.map(function(el) { return JSON.parse(el); });\n};\n\nvar parsePoint = function(value) {\n  if (value[0] !== '(') { return null; }\n\n  value = value.substring( 1, value.length - 1 ).split(',');\n\n  return {\n    x: parseFloat(value[0])\n  , y: parseFloat(value[1])\n  };\n};\n\nvar parseCircle = function(value) {\n  if (value[0] !== '<' && value[1] !== '(') { return null; }\n\n  var point = '(';\n  var radius = '';\n  var pointParsed = false;\n  for (var i = 2; i < value.length - 1; i++){\n    if (!pointParsed) {\n      point += value[i];\n    }\n\n    if (value[i] === ')') {\n      pointParsed = true;\n      continue;\n    } else if (!pointParsed) {\n      continue;\n    }\n\n    if (value[i] === ','){\n      continue;\n    }\n\n    radius += value[i];\n  }\n  var result = parsePoint(point);\n  result.radius = parseFloat(radius);\n\n  return result;\n};\n\nvar init = function(register) {\n  register(20, parseBigInteger); // int8\n  register(21, parseInteger); // int2\n  register(23, parseInteger); // int4\n  register(26, parseInteger); // oid\n  register(700, parseFloat); // float4/real\n  register(701, parseFloat); // float8/double\n  register(16, parseBool);\n  register(1082, parseDate); // date\n  register(1114, parseDate); // timestamp without timezone\n  register(1184, parseDate); // timestamp\n  register(600, parsePoint); // point\n  register(718, parseCircle); // circle\n  register(1000, parseBoolArray);\n  register(1001, parseByteAArray);\n  register(1005, parseIntegerArray); // _int2\n  register(1007, parseIntegerArray); // _int4\n  register(1028, parseIntegerArray); // oid[]\n  register(1016, parseBigIntegerArray); // _int8\n  register(1021, parseFloatArray); // _float4\n  register(1022, parseFloatArray); // _float8\n  register(1231, parseFloatArray); // _numeric\n  register(1014, parseStringArray); //char\n  register(1015, parseStringArray); //varchar\n  register(1008, parseStringArray);\n  register(1009, parseStringArray);\n  register(1115, parseDateArray); // timestamp without time zone[]\n  register(1182, parseDateArray); // _date\n  register(1185, parseDateArray); // timestamp with time zone[]\n  register(1186, parseInterval);\n  register(17, parseByteA);\n  register(114, JSON.parse.bind(JSON)); // json\n  register(3802, JSON.parse.bind(JSON)); // jsonb\n  register(199, parseJsonArray); // json[]\n  register(3807, parseJsonArray); // jsonb[]\n  register(2951, parseStringArray); // uuid[]\n  register(791, parseStringArray); // money[]\n  register(1183, parseStringArray); // time[]\n};\n\nmodule.exports = {\n  init: init\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-types/lib/textParsers.js\n// module id = 44\n// module chunks = 0","'use strict'\n\nmodule.exports = function parseBytea (input) {\n  if (/^\\\\x/.test(input)) {\n    // new 'hex' style response (pg >9.0)\n    return new Buffer(input.substr(2), 'hex')\n  }\n  var output = ''\n  var i = 0\n  while (i < input.length) {\n    if (input[i] !== '\\\\') {\n      output += input[i]\n      ++i\n    } else {\n      if (/[0-7]{3}/.test(input.substr(i + 1, 3))) {\n        output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))\n        i += 4\n      } else {\n        var backslashes = 1\n        while (i + backslashes < input.length && input[i + backslashes] === '\\\\') {\n          backslashes++\n        }\n        for (var k = 0; k < Math.floor(backslashes / 2); ++k) {\n          output += '\\\\'\n        }\n        i += Math.floor(backslashes / 2) * 2\n      }\n    }\n  }\n  return new Buffer(output, 'binary')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postgres-bytea/index.js\n// module id = 53\n// module chunks = 0","'use strict'\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar BC = /BC$/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return DATE.test(isoDate) ?\n      getDate(isoDate) :\n      null\n  }\n\n  var isBC = BC.test(isoDate)\n  var year = parseInt(matches[1], 10)\n  var isFirstCentury = year > 0 && year < 100\n  year = (isBC ? '-' : '') + year\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    var utc = Date.UTC(year, month, day, hour, minute, second, ms)\n    date = new Date(utc - offset)\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n  }\n\n  if (isFirstCentury) {\n    date.setUTCFullYear(year)\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  var year = parseInt(matches[1], 10)\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n  date.setFullYear(year)\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postgres-date/index.js\n// module id = 54\n// module chunks = 0","'use strict'\n\nvar extend = require('xtend/mutable')\n\nmodule.exports = PostgresInterval\n\nfunction PostgresInterval (raw) {\n  if (!(this instanceof PostgresInterval)) {\n    return new PostgresInterval(raw)\n  }\n  extend(this, parse(raw))\n}\nvar properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years']\nPostgresInterval.prototype.toPostgres = function () {\n  var filtered = properties.filter(this.hasOwnProperty, this)\n  if (filtered.length === 0) return '0'\n  return filtered\n    .map(function (property) {\n      return this[property] + ' ' + property\n    }, this)\n    .join(' ')\n}\n\nvar NUMBER = '([+-]?\\\\d+)'\nvar YEAR = NUMBER + '\\\\s+years?'\nvar MONTH = NUMBER + '\\\\s+mons?'\nvar DAY = NUMBER + '\\\\s+days?'\nvar TIME = '([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d):?(\\\\d\\\\d\\\\d)?'\nvar INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {\n  return '(' + regexString + ')?'\n})\n.join('\\\\s*'))\n\n// Positions of values in regex match\nvar positions = {\n  years: 2,\n  months: 4,\n  days: 6,\n  hours: 9,\n  minutes: 10,\n  seconds: 11,\n  milliseconds: 12\n}\n// We can use negative time\nvar negatives = ['hours', 'minutes', 'seconds']\n\nfunction parse (interval) {\n  if (!interval) return {}\n  var matches = INTERVAL.exec(interval)\n  var isNegative = matches[8] === '-'\n  return Object.keys(positions)\n    .reduce(function (parsed, property) {\n      var position = positions[property]\n      var value = matches[position]\n      // no empty string\n      if (!value) return parsed\n      value = parseInt(value, 10)\n      // no zeros\n      if (!value) return parsed\n      if (isNegative && ~negatives.indexOf(property)) {\n        value *= -1\n      }\n      parsed[property] = value\n      return parsed\n    }, {})\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postgres-interval/index.js\n// module id = 55\n// module chunks = 0","// export the class if we are in a Node-like system.\nif (typeof module === 'object' && module.exports === exports)\n  exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n/* nomin */ var debug;\n/* nomin */ if (typeof process === 'object' &&\n    /* nomin */ process.env &&\n    /* nomin */ process.env.NODE_DEBUG &&\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))\n  /* nomin */ debug = function() {\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);\n    /* nomin */ args.unshift('SEMVER');\n    /* nomin */ console.log.apply(console, args);\n    /* nomin */ };\n/* nomin */ else\n  /* nomin */ debug = function() {};\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\nvar MAX_LENGTH = 256;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i]);\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, loose) {\n  if (version.length > MAX_LENGTH)\n    return null;\n\n  var r = loose ? re[LOOSE] : re[FULL];\n  if (!r.test(version))\n    return null;\n\n  try {\n    return new SemVer(version, loose);\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.valid = valid;\nfunction valid(version, loose) {\n  var v = parse(version, loose);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, loose) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, loose) {\n  if (version instanceof SemVer) {\n    if (version.loose === loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (version.length > MAX_LENGTH)\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, loose);\n\n  debug('SemVer', version, loose);\n  this.loose = loose;\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0)\n    throw new TypeError('Invalid major version')\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)\n    throw new TypeError('Invalid minor version')\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)\n    throw new TypeError('Invalid patch version')\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      return (/^[0-9]+$/.test(id)) ? +id : id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.inspect = function() {\n  return '<SemVer \"' + this + '\">';\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  debug('SemVer.compare', this.version, this.loose, other);\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    debug('prerelease compare', i, a, b);\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(b);\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, loose) {\n  if (comp instanceof Comparator) {\n    if (comp.loose === loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, loose);\n\n  debug('comparator', comp, loose);\n  this.loose = loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  debug('comp', this);\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.loose);\n};\n\nComparator.prototype.inspect = function() {\n  return '<SemVer Comparator \"' + this + '\">';\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  debug('Comparator.test', version, this.loose);\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  return cmp(version, this.operator, this.semver, this.loose);\n};\n\n\nexports.Range = Range;\nfunction Range(range, loose) {\n  if ((range instanceof Range) && range.loose === loose)\n    return range;\n\n  if (!(this instanceof Range))\n    return new Range(range, loose);\n\n  this.loose = loose;\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.inspect = function() {\n  return '<SemVer Range \"' + this.range + '\">';\n};\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.loose;\n  range = range.trim();\n  debug('range', range, loose);\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  debug('hyphen replace', range);\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  debug('comparator trim', range, re[COMPARATORTRIM]);\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, loose);\n  }).join(' ').split(/\\s+/);\n  if (this.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, loose);\n  });\n\n  return set;\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, loose) {\n  return new Range(range, loose).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, loose) {\n  debug('comp', comp);\n  comp = replaceCarets(comp, loose);\n  debug('caret', comp);\n  comp = replaceTildes(comp, loose);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, loose);\n  debug('xrange', comp);\n  comp = replaceStars(comp, loose);\n  debug('stars', comp);\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, loose) {\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0- <1.3.0-\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      debug('replaceTilde pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, loose) {\n  debug('caret', comp, loose);\n  var r = loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      debug('no pr');\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, loose) {\n  debug('replaceXRanges', comp, loose);\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, loose) {\n  comp = comp.trim();\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm)\n          M = +M + 1\n        else\n          m = +m + 1\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    debug('xRange return', ret);\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, loose) {\n  debug('replaceStars', comp, loose);\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (version.prerelease.length) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n      if (set[i].semver === ANY)\n        return true;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, loose) {\n  try {\n    range = new Range(range, loose);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, loose) {\n  return versions.filter(function(version) {\n    return satisfies(version, range, loose);\n  }).sort(function(a, b) {\n    return rcompare(a, b, loose);\n  })[0] || null;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, loose) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, loose).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, loose) {\n  return outside(version, range, '<', loose);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, loose) {\n  return outside(version, range, '>', loose);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, loose) {\n  version = new SemVer(version, loose);\n  range = new Range(range, loose);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, loose)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, loose)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, loose)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Use the define() function if we're in AMD land\nif (typeof define === 'function' && define.amd)\n  define(exports);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/semver/semver.js\n// module id = 56\n// module chunks = 0","//filter will reemit the data if cb(err,pass) pass is truthy\n\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\n\n\nvar through = require('through')\nvar Decoder = require('string_decoder').StringDecoder\n\nmodule.exports = split\n\n//TODO pass in a function to map across the lines.\n\nfunction split (matcher, mapper, options) {\n  var decoder = new Decoder()\n  var soFar = ''\n  var maxLength = options && options.maxLength;\n  var trailing = options && options.trailing === false ? false : true\n  if('function' === typeof matcher)\n    mapper = matcher, matcher = null\n  if (!matcher)\n    matcher = /\\r?\\n/\n\n  function emit(stream, piece) {\n    if(mapper) {\n      try {\n        piece = mapper(piece)\n      }\n      catch (err) {\n        return stream.emit('error', err)\n      }\n      if('undefined' !== typeof piece)\n        stream.queue(piece)\n    }\n    else\n      stream.queue(piece)\n  }\n\n  function next (stream, buffer) {\n    var pieces = ((soFar != null ? soFar : '') + buffer).split(matcher)\n    soFar = pieces.pop()\n\n    if (maxLength && soFar.length > maxLength)\n      stream.emit('error', new Error('maximum buffer reached'))\n\n    for (var i = 0; i < pieces.length; i++) {\n      var piece = pieces[i]\n      emit(stream, piece)\n    }\n  }\n\n  return through(function (b) {\n    next(this, decoder.write(b))\n  },\n  function () {\n    if(decoder.end)\n      next(this, decoder.end())\n    if(trailing && soFar != null)\n      emit(this, soFar)\n    this.queue(null)\n  })\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/split/index.js\n// module id = 57\n// module chunks = 0","var Stream = require('stream')\n\n// through\n//\n// a stream that does nothing but re-emit the input.\n// useful for aggregating a series of changing but not ending streams into one stream)\n\nexports = module.exports = through\nthrough.through = through\n\n//create a readable writable stream.\n\nfunction through (write, end, opts) {\n  write = write || function (data) { this.queue(data) }\n  end = end || function () { this.queue(null) }\n\n  var ended = false, destroyed = false, buffer = [], _ended = false\n  var stream = new Stream()\n  stream.readable = stream.writable = true\n  stream.paused = false\n\n//  stream.autoPause   = !(opts && opts.autoPause   === false)\n  stream.autoDestroy = !(opts && opts.autoDestroy === false)\n\n  stream.write = function (data) {\n    write.call(this, data)\n    return !stream.paused\n  }\n\n  function drain() {\n    while(buffer.length && !stream.paused) {\n      var data = buffer.shift()\n      if(null === data)\n        return stream.emit('end')\n      else\n        stream.emit('data', data)\n    }\n  }\n\n  stream.queue = stream.push = function (data) {\n//    console.error(ended)\n    if(_ended) return stream\n    if(data === null) _ended = true\n    buffer.push(data)\n    drain()\n    return stream\n  }\n\n  //this will be registered as the first 'end' listener\n  //must call destroy next tick, to make sure we're after any\n  //stream piped from here.\n  //this is only a problem if end is not emitted synchronously.\n  //a nicer way to do this is to make sure this is the last listener for 'end'\n\n  stream.on('end', function () {\n    stream.readable = false\n    if(!stream.writable && stream.autoDestroy)\n      process.nextTick(function () {\n        stream.destroy()\n      })\n  })\n\n  function _end () {\n    stream.writable = false\n    end.call(stream)\n    if(!stream.readable && stream.autoDestroy)\n      stream.destroy()\n  }\n\n  stream.end = function (data) {\n    if(ended) return\n    ended = true\n    if(arguments.length) stream.write(data)\n    _end() // will emit or queue\n    return stream\n  }\n\n  stream.destroy = function () {\n    if(destroyed) return\n    destroyed = true\n    ended = true\n    buffer.length = 0\n    stream.writable = stream.readable = false\n    stream.emit('close')\n    return stream\n  }\n\n  stream.pause = function () {\n    if(stream.paused) return\n    stream.paused = true\n    return stream\n  }\n\n  stream.resume = function () {\n    if(stream.paused) {\n      stream.paused = false\n      stream.emit('resume')\n    }\n    drain()\n    //may have become paused again,\n    //as drain emits 'data'.\n    if(!stream.paused)\n      stream.emit('drain')\n    return stream\n  }\n  return stream\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/through/index.js\n// module id = 58\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 59\n// module chunks = 0","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/xtend/mutable.js\n// module id = 60\n// module chunks = 0","module.exports = require(\"child_process\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"child_process\"\n// module id = 61\n// module chunks = 0","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 62\n// module chunks = 0","module.exports = require(\"dns\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dns\"\n// module id = 63\n// module chunks = 0","module.exports = require(\"net\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"net\"\n// module id = 64\n// module chunks = 0","module.exports = require(\"string_decoder\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"string_decoder\"\n// module id = 65\n// module chunks = 0","module.exports = require(\"tls\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"tls\"\n// module id = 66\n// module chunks = 0","import { Setup } from './setup';\nimport { configService } from './configService';\nimport { Cycle } from './cycle';\n\nvar program = require('commander');\nprogram\n  .option('-c, --connection <Connection>', 'The connection specified in the dbconfig.json file.')\n  .option('-t, --tablename <Table Name>', 'Name of the table or view to model')\n  .option('-n, --namespace <Namespace>', 'The namespace for your table\\'s class')\n  .option('-a, --alias <Alias>', 'Alias a table; i.e. t_user for User')\n.parse(process.argv);\n\nprogram.datecreated = new Date().toLocaleString();\n\n// console.log(\"TableName :: \" + _tablename);\n// console.log(program);\nlet cs = new configService(program);\n\nlet c = new Cycle(cs);\nc.cycle();\n\nlet x = new Setup(cs);\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { configService } from './configService';\n\n\nexport class Cycle {\n\n    public constructor(private _confService:configService) {\n\n    }\n\n    public cycle(): void {\n\n        // Get all the strings[] and compress them into an array to chuck in\n\n        let g = new Promise((resolve, reject) => {\n\n            // Resolve getcolumns\n            // Resolve replacement\n            // Resolve write file\n            resolve(this._confService.getTable());\n        }).then((res) => {\n            console.log(\"The RES is \" + res);\n        });\n\n\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cycle.ts","'use strict';\r\n\r\nvar $path = require('path');\r\n\r\n////////////////////////////////////////////\r\n// Simpler check for null/undefined;\r\nfunction isNull(value) {\r\n    return value === null || value === undefined;\r\n}\r\n\r\n////////////////////////////////////////////////////////\r\n// Verifies parameter for being a non-empty text string;\r\nfunction isText(txt) {\r\n    return txt && typeof txt === 'string' && /\\S/.test(txt);\r\n}\r\n\r\n//////////////////////////////////////\r\n// Verifies value for being an object,\r\n// based on type and property names.\r\nfunction isObject(value, properties) {\r\n    if (value && typeof value === 'object') {\r\n        for (var i = 0; i < properties.length; i++) {\r\n            if (!(properties[i] in value)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n///////////////////////////////////////////////////////////\r\n// Approximates the environment as being for development.\r\n//\r\n// Proper configuration is having NODE_ENV = 'development', but this\r\n// method only checks for 'dev' being present, and regardless of the case.\r\nfunction isDev() {\r\n    var env = global.process.env.NODE_ENV || '';\r\n    return env.toLowerCase().indexOf('dev') !== -1;\r\n}\r\n\r\n///////////////////////////////////////////////////\r\n// Locks all properties in an object to read-only,\r\n// or freezes the entire object for any changes.\r\nfunction lock(obj, freeze, options) {\r\n    if (options && options.noLocking) {\r\n        return;\r\n    }\r\n    if (freeze) {\r\n        Object.freeze(obj); // freeze the entire object, permanently;\r\n    } else {\r\n        var desc = {\r\n            writable: false,\r\n            configurable: false,\r\n            enumerable: true\r\n        };\r\n        for (var p in obj) {\r\n            Object.defineProperty(obj, p, desc);\r\n        }\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////\r\n// Adds properties from source to the target,\r\n// making them read-only and enumerable.\r\nfunction addReadProperties(target, source) {\r\n    for (var p in source) {\r\n        addReadProp(target, p, source[p]);\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n// Adds a read-only, non-deletable enumerable property.\r\nfunction addReadProp(obj, name, value, hidden) {\r\n    Object.defineProperty(obj, name, {\r\n        value: value,\r\n        configurable: false,\r\n        enumerable: !hidden,\r\n        writable: false\r\n    });\r\n}\r\n\r\n//////////////////////////////////////////////////////////////\r\n// Converts a connection string or object into its safe copy:\r\n// if password is present, it is masked with symbol '#'.\r\nfunction getSafeConnection(cn) {\r\n    if (typeof cn === 'object') {\r\n        var copy = JSON.parse(JSON.stringify(cn));\r\n        if (typeof copy.password === 'string') {\r\n            copy.password = copy.password.replace(/./g, '#');\r\n        }\r\n        return copy;\r\n    }\r\n    // or else it is a connection string;\r\n    return cn.replace(/:(?![\\/])([^@]+)/, function (_, m) {\r\n        return ':' + new Array(m.length + 1).join('#');\r\n    });\r\n}\r\n\r\n///////////////////////////////////////////\r\n// Returns a space gap for console output;\r\nfunction messageGap(level) {\r\n    return Array(1 + level * 4).join(' ');\r\n}\r\n\r\n/////////////////////////////////////////\r\n// Provides platform-neutral inheritance;\r\nfunction inherits(child, parent) {\r\n    child.prototype.__proto__ = parent.prototype;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n// Checks if the path is absolute;\r\n//\r\n// We exclude this from the coverage, because the code is platform-specific,\r\n// and while most of its code is for Windows, Travis CI is a linux platform.\r\n//\r\n// istanbul ignore next\r\nfunction isPathAbsolute(path) {\r\n    // Based on: https://github.com/sindresorhus/path-is-absolute\r\n    if (process.platform === 'win32') {\r\n        var splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\r\n        var result = splitDeviceRe.exec(path);\r\n        var device = result[1] || '';\r\n        var isUnc = !!device && device.charAt(1) !== ':';\r\n        return !!result[2] || isUnc;\r\n    }\r\n    return path.charAt(0) === '/';\r\n}\r\n\r\nfunction getLocalStack(startIdx) {\r\n    // from the call stack, we take only lines starting with the client's\r\n    // source code, and only those that contain a full path inside brackets,\r\n    // indicating a reference to the client's source code:\r\n    return new Error().stack.split('\\n').slice(startIdx).filter(function (line) {\r\n        return line.match(/\\(.*(\\\\+|\\/+).*\\)/); // contains \\ or / inside ()\r\n    }).join('\\n');\r\n}\r\n\r\n//////////////////////////////\r\n// Internal error container;\r\nfunction InternalError(error) {\r\n    this.error = error;\r\n}\r\n\r\nvar exp = {\r\n    InternalError: InternalError,\r\n    getLocalStack: getLocalStack,\r\n    isPathAbsolute: isPathAbsolute,\r\n    lock: lock,\r\n    isText: isText,\r\n    isNull: isNull,\r\n    isDev: isDev,\r\n    isObject: isObject,\r\n    addReadProp: addReadProp,\r\n    addReadProperties: addReadProperties,\r\n    getSafeConnection: getSafeConnection,\r\n    messageGap: messageGap,\r\n    inherits: inherits\r\n};\r\n\r\nvar mainFile = process.argv[1];\r\n\r\n// istanbul ignore next\r\nexp.startDir = mainFile ? $path.dirname(mainFile) : process.cwd();\r\n\r\nObject.freeze(exp);\r\n\r\nmodule.exports = exp;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/utils/index.js\n// module id = 70\n// module chunks = 0","module.exports = require(\"os\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"os\"\n// module id = 71\n// module chunks = 0","'use strict';\r\n\r\nvar $pgUtils = require('pg/lib/utils');\r\nvar $arr = require('../lib/array');\r\n\r\n// Format Modification Flags;\r\nvar fmFlags = {\r\n    raw: 1, // Raw-Text variable\r\n    name: 2, // SQL Name/Identifier\r\n    json: 4, // JSON modifier\r\n    csv: 8, // CSV modifier\r\n    value: 16 // escaped, but without ''\r\n};\r\n\r\n// Format Modification Map;\r\nvar fmMap = {\r\n    '^': fmFlags.raw,\r\n    ':raw': fmFlags.raw,\r\n    '~': fmFlags.name,\r\n    ':name': fmFlags.name,\r\n    ':json': fmFlags.json,\r\n    ':csv': fmFlags.csv,\r\n    ':value': fmFlags.value,\r\n    '#': fmFlags.value\r\n};\r\n\r\n////////////////////////////////////////////////////\r\n// Converts a single value into its Postgres format.\r\nfunction formatValue(value, fm, obj) {\r\n\r\n    if (typeof value === 'function') {\r\n        return formatValue(resolveFunc(value, obj), fm, obj);\r\n    }\r\n\r\n    if (value && typeof value === 'object') {\r\n        var ctf = value['formatDBType']; // custom type formatting;\r\n        if (typeof ctf === 'function') {\r\n            fm |= value._rawDBType ? fmFlags.raw : 0;\r\n            return formatValue(resolveFunc(ctf, value), fm, obj);\r\n        }\r\n    }\r\n\r\n    var isRaw = !!(fm & fmFlags.raw);\r\n    fm &= ~fmFlags.raw;\r\n\r\n    switch (fm) {\r\n        case fmFlags.name:\r\n            return $as.name(value);\r\n        case fmFlags.json:\r\n            return $as.json(value, isRaw);\r\n        case fmFlags.csv:\r\n            return $as.csv(value);\r\n        case fmFlags.value:\r\n            return $as.value(value);\r\n        default:\r\n            break;\r\n    }\r\n\r\n    if (isNull(value)) {\r\n        throwIfRaw(isRaw);\r\n        return 'null';\r\n    }\r\n\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return $as.text(value, isRaw);\r\n        case 'boolean':\r\n            return $as.bool(value);\r\n        case 'number':\r\n            return $as.number(value);\r\n        default:\r\n            if (value instanceof Date) {\r\n                return $as.date(value, isRaw);\r\n            }\r\n            if (value instanceof Array) {\r\n                return $as.array(value);\r\n            }\r\n            if (value instanceof Buffer) {\r\n                return $as.buffer(value, isRaw);\r\n            }\r\n            return $as.json(value, isRaw);\r\n    }\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////\r\n// Converts array of values into PostgreSQL Array Constructor: array[...],\r\n// as per PostgreSQL documentation: http://www.postgresql.org/docs/9.4/static/arrays.html\r\n// Arrays of any depth/dimension are supported.\r\nfunction formatArray(array) {\r\n    function loop(a) {\r\n        return '[' + $arr.map(a, function (v) {\r\n                return v instanceof Array ? loop(v) : formatValue(v);\r\n            }).join() + ']';\r\n    }\r\n\r\n    return 'array' + loop(array);\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n// Formats array of javascript-type parameters as a csv string,\r\n// so it can be passed into a PostgreSQL function.\r\n// Both single value and array or values are supported.\r\nfunction formatCSV(values) {\r\n    if (values instanceof Array) {\r\n        return $arr.map(values, function (v) {\r\n            return formatValue(v);\r\n        }).join();\r\n    }\r\n    return values === undefined ? '' : formatValue(values);\r\n}\r\n\r\n///////////////////////////////\r\n// Query formatting helpers;\r\nvar formatAs = {\r\n\r\n    object: function (query, obj, raw, options) {\r\n        options = options && typeof options === 'object' ? options : {};\r\n        var pattern = /\\$(?:({)|(\\()|(<)|(\\[)|(\\/))\\s*[a-zA-Z0-9\\$_]+(\\^|~|#|:raw|:name|:json|:csv|:value)?\\s*(?:(?=\\2)(?=\\3)(?=\\4)(?=\\5)}|(?=\\1)(?=\\3)(?=\\4)(?=\\5)\\)|(?=\\1)(?=\\2)(?=\\4)(?=\\5)>|(?=\\1)(?=\\2)(?=\\3)(?=\\5)]|(?=\\1)(?=\\2)(?=\\3)(?=\\4)\\/)/g;\r\n        return query.replace(pattern, function (name) {\r\n            var v = formatAs.stripName(name.replace(/^\\$[{(<[/]|[\\s})>\\]/]/g, ''), raw);\r\n            if (v.name in obj) {\r\n                return formatValue(obj[v.name], v.fm, obj);\r\n            }\r\n            if (v.name === 'this') {\r\n                return formatValue(obj, v.fm);\r\n            }\r\n            if ('default' in options) {\r\n                var d = options.default, value = typeof d === 'function' ? d.call(obj, v.name, obj) : d;\r\n                return formatValue(value, v.fm, obj);\r\n            }\r\n            if (options.partial) {\r\n                return name;\r\n            }\r\n            // property must exist as the object's own or inherited;\r\n            throw new Error('Property \\'' + v.name + '\\' doesn\\'t exist.');\r\n        });\r\n    },\r\n\r\n    array: function (query, array, raw, options) {\r\n        options = options && typeof options === 'object' ? options : {};\r\n        return query.replace(/\\$([1-9][0-9]{0,3}(?![0-9])(\\^|~|#|:raw|:name|:json|:csv|:value)?)/g, function (name) {\r\n            var v = formatAs.stripName(name.substr(1), raw);\r\n            var idx = v.name - 1;\r\n            if (idx < array.length) {\r\n                return formatValue(array[idx], v.fm);\r\n            }\r\n            if ('default' in options) {\r\n                var d = options.default, value = typeof d === 'function' ? d.call(array, idx, array) : d;\r\n                return formatValue(value, v.fm);\r\n            }\r\n            if (options.partial) {\r\n                return name;\r\n            }\r\n            throw new RangeError('Variable $' + v.name + ' out of range. Parameters array length: ' + array.length);\r\n        });\r\n    },\r\n\r\n    value: function (query, value, raw) {\r\n        return query.replace(/\\$1(?![0-9])(\\^|~|#|:raw|:name|:json|:csv|:value)?/g, function (name) {\r\n            var v = formatAs.stripName(name, raw);\r\n            return formatValue(value, v.fm);\r\n        });\r\n    },\r\n\r\n    stripName: function (name, raw) {\r\n        var mod = name.match(/\\^|~|#|:raw|:name|:json|:csv|:value/);\r\n        if (mod) {\r\n            return {\r\n                name: name.substr(0, mod.index),\r\n                fm: fmMap[mod[0]] | (raw ? fmFlags.raw : 0)\r\n            };\r\n        } else {\r\n            return {\r\n                name: name,\r\n                fm: raw ? fmFlags.raw : null\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\n////////////////////////////////////////////\r\n// Simpler check for null/undefined;\r\nfunction isNull(value) {\r\n    return value === undefined || value === null;\r\n}\r\n\r\n/////////////////////////////////////////\r\n// Wraps a text string in single quotes;\r\nfunction TEXT(text) {\r\n    return \"'\" + text + \"'\";\r\n}\r\n\r\n////////////////////////////////////////////////\r\n// Replaces each single-quote symbol ' with two,\r\n// for compliance with PostgreSQL strings.\r\nfunction safeText(text) {\r\n    return text.replace(/'/g, '\\'\\'');\r\n}\r\n\r\n/////////////////////////////////////////////\r\n// Throws an exception, if flag 'raw' is set.\r\nfunction throwIfRaw(raw) {\r\n    if (raw) {\r\n        throw new TypeError('Values null/undefined cannot be used as raw text.');\r\n    }\r\n}\r\n\r\n////////////////////////////////////////////\r\n// Recursively resolves parameter-function,\r\n// with the optional calling context.\r\nfunction resolveFunc(value, obj) {\r\n    while (typeof value === 'function') {\r\n        value = obj ? value.call(obj) : value();\r\n    }\r\n    return value;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n// 'pg-promise' query formatting solution;\r\n//\r\n// It implements two types of formatting, depending on the 'values' passed:\r\n//\r\n// 1. format \"$1, $2, etc\", when 'values' is of type string, boolean, number, date,\r\n//    function or null (or an array of the same types, plus undefined values);\r\n// 2. format $*propName*, when 'values' is an object (not null and not Date),\r\n//    and where * is any of the supported open-close pairs: {}, (), [], <>, //\r\n//\r\n// NOTES:\r\n// 1. Raw-text values can be injected using syntax: $1^,$2^,... or $*propName^*\r\n// 2. If 'values' is an object that supports function formatDBType, either its\r\n//    own or inherited, the actual value and the formatting syntax are determined\r\n//    by the result returned from that function.\r\n//\r\n// When formatting fails, the function throws an error.\r\nfunction $formatQuery(query, values, raw, options) {\r\n    if (typeof query !== 'string') {\r\n        throw new TypeError('Parameter \\'query\\' must be a text string.');\r\n    }\r\n    if (values && typeof values === 'object') {\r\n        var ctf = values['formatDBType']; // custom type formatting;\r\n        if (typeof ctf === 'function') {\r\n            return $formatQuery(query, resolveFunc(ctf, values), raw || values._rawDBType, options);\r\n        }\r\n        if (values instanceof Array) {\r\n            // $1, $2,... formatting to be applied;\r\n            return formatAs.array(query, values, raw, options);\r\n        }\r\n        if (!(values instanceof Date || values instanceof Buffer)) {\r\n            // $*propName* formatting to be applied;\r\n            return formatAs.object(query, values, raw, options);\r\n        }\r\n    }\r\n    // $1 formatting to be applied, if values != undefined;\r\n    return values === undefined ? query : formatAs.value(query, values, raw);\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n// Formats a standard PostgreSQL function call query;\r\nfunction $formatFunction(funcName, values, capSQL) {\r\n    var sql = capSQL ? 'SELECT * FROM ' : 'select * from ';\r\n    return sql + funcName + '(' + formatCSV(values) + ')';\r\n}\r\n\r\n/**\r\n * @namespace formatting\r\n * @description\r\n * Namespace for all query-formatting functions, available from `pgp.as`, before and after initializing the library.\r\n *\r\n * @property {function} name\r\n * {@link formatting.name name} - formats an SQL name.\r\n *\r\n * @property {function} text\r\n * {@link formatting.text text} - formats a text string.\r\n *\r\n * @property {function} number\r\n * {@link formatting.number number} - formats a number.\r\n *\r\n * @property {function} buffer\r\n * {@link formatting.buffer buffer} - formats a `Buffer` object.\r\n *\r\n * @property {function} value\r\n * {@link formatting.value value} - formats text as an open value.\r\n *\r\n * @property {function} json\r\n * {@link formatting.json json} - formats any value as JSON.\r\n *\r\n * @property {function} func\r\n * {@link formatting.func func} - formats the value returned from a function.\r\n *\r\n * @property {function} format\r\n * {@link formatting.format format} - formats a query according to parameters.\r\n *\r\n */\r\nvar $as = {\r\n\r\n    /**\r\n     * @method formatting.text\r\n     * @description\r\n     * Converts a value into PostgreSQL text presentation, escaped as required.\r\n     *\r\n     * Escaping the result means:\r\n     *  1. Every single-quote (apostrophe) is replaced with two\r\n     *  2. The resulting text is wrapped in apostrophes\r\n     *\r\n     * @param {value|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * If the `value` resolves as `null` or `undefined`, while `raw`=`true`,\r\n     * it will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the resulting text.\r\n     *\r\n     * @returns {string}\r\n     *\r\n     * - `null` string, if the `value` resolves as `null` or `undefined`\r\n     * - escaped result of `value.toString()`, if the `value` isn't a string\r\n     * - escaped string version, if `value` is a string.\r\n     *\r\n     *  The result is not escaped, if `raw` was passed in as `true`.\r\n     */\r\n    text: function (value, raw) {\r\n        value = resolveFunc(value);\r\n        if (isNull(value)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (typeof value !== 'string') {\r\n            value = value.toString();\r\n        }\r\n        return raw ? value : TEXT(safeText(value));\r\n    },\r\n\r\n    /**\r\n     * @method formatting.name\r\n     * @description\r\n     * Properly escapes an sql name or identifier, fixing double-quote symbols and wrapping the result in double quotes.\r\n     *\r\n     * Implements a safe way to format SQL Names that neutralizes SQL Injection.\r\n     *\r\n     * @param {string|function|array|object} name\r\n     * SQL name or identifier, or a function that returns it.\r\n     *\r\n     * The name must be at least 1 character long.\r\n     *\r\n     * If `name` doesn't resolve into a non-empty string, it throws {@link external:TypeError TypeError} = `Invalid sql name: ...`\r\n     *\r\n     * If the `name` contains only a single `*` (trailing spaces are ignored), then `name` is returned exactly as is (unescaped).\r\n     *\r\n     * **Added in v.5.2.1:**\r\n     *\r\n     * - If `name` is an Array, it is formatted as a comma-separated list of SQL names\r\n     * - If `name` is a non-Array object, its keys are formatted as a comma-separated list of SQL names\r\n     *\r\n     * Passing in an empty array/object will throw {@link external:Error Error} = `Cannot retrieve sql names from an empty array/object.`\r\n     *\r\n     * @returns {string}\r\n     * The SQL Name/Identifier properly escaped for compliance with the PostgreSQL standard for SQL names and identifiers.\r\n     *\r\n     * @example\r\n     *\r\n     * // example of using v5.2.1 feature:\r\n     * // automatically list object properties as sql names:\r\n     * format('INSERT INTO table(${this~}) VALUES(${one}, ${two})', {\r\n     *     one: 1,\r\n     *     two: 2\r\n     * });\r\n     * //=> INSERT INTO table(\"one\",\"two\") VALUES(1, 2)\r\n     *\r\n     */\r\n    name: function (name) {\r\n        name = resolveFunc(name);\r\n        if (name) {\r\n            if (typeof name === 'string') {\r\n                return /^\\s*\\*(\\s*)$/.test(name) ? name : formatName(name);\r\n            } else {\r\n                if (typeof name === 'object') {\r\n                    var keys = Array.isArray(name) ? name : Object.keys(name);\r\n                    if (!keys.length) {\r\n                        throw new Error('Cannot retrieve sql names from an empty array/object.');\r\n                    }\r\n                    return $arr.map(keys, function (value) {\r\n                        if (!value || typeof value !== 'string') {\r\n                            throw new Error('Invalid sql name: ' + JSON.stringify(value));\r\n                        }\r\n                        return formatName(value);\r\n                    }).join();\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new TypeError('Invalid sql name: ' + JSON.stringify(name));\r\n\r\n        function formatName(name) {\r\n            return '\"' + name.replace(/\"/g, '\"\"') + '\"';\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @method formatting.value\r\n     * @description\r\n     * Represents an open value, one to be formatted according to its type, properly escaped,\r\n     * but without surrounding quotes for text types.\r\n     *\r\n     * @param {value|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * If `value` resolves as `null` or `undefined`, it will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`\r\n     *\r\n     * @returns {string}\r\n     * Formatted and properly escaped string, but without surrounding quotes for text types.\r\n     */\r\n    value: function (value) {\r\n        value = resolveFunc(value);\r\n        if (isNull(value)) {\r\n            throw new TypeError('Open values cannot be null or undefined.');\r\n        }\r\n        return safeText(formatValue(value, fmFlags.raw));\r\n    },\r\n\r\n    /**\r\n     * @method formatting.buffer\r\n     * @description\r\n     * Converts an object of type `Buffer` into a hex string compatible with PostgreSQL type `bytea`.\r\n     *\r\n     * @param {Buffer|function} obj\r\n     * Object to be converted, or a function that returns one.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to wrap the resulting string in quotes.\r\n     *\r\n     * The generated hex string doesn't need to be escaped.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    buffer: function (obj, raw) {\r\n        obj = resolveFunc(obj);\r\n        if (isNull(obj)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (obj instanceof Buffer) {\r\n            var s = '\\\\x' + obj.toString('hex');\r\n            return raw ? s : TEXT(s);\r\n        }\r\n        throw new TypeError(TEXT(obj) + ' is not a Buffer object.');\r\n    },\r\n\r\n    /**\r\n     * @method formatting.bool\r\n     * @description\r\n     * Converts a truthy value into PostgreSQL boolean presentation.\r\n     *\r\n     * @param {boolean|function} value\r\n     * Value to be converted, or a function that returns the value.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    bool: function (value) {\r\n        value = resolveFunc(value);\r\n        if (isNull(value)) {\r\n            return 'null';\r\n        }\r\n        return value ? 'true' : 'false';\r\n    },\r\n\r\n    /**\r\n     * @method formatting.date\r\n     * @description\r\n     * Converts a `Date`-type value into PostgreSQL date/time presentation,\r\n     * wrapped in quotes (unless flag `raw` is set).\r\n     *\r\n     * @param {date|function} d\r\n     * Date object to be converted, or a function that returns one.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the value.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    date: function (d, raw) {\r\n        d = resolveFunc(d);\r\n        if (isNull(d)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (d instanceof Date) {\r\n            var s = $pgUtils.prepareValue(d);\r\n            return raw ? s : TEXT(s);\r\n        }\r\n        throw new TypeError(TEXT(d) + ' is not a Date object.');\r\n    },\r\n\r\n    /**\r\n     * @method formatting.number\r\n     * @description\r\n     * Converts a numeric value into its PostgreSQL number presentation,\r\n     * with support for `NaN`, `+Infinity` and `-Infinity`.\r\n     *\r\n     * @param {number|function} num\r\n     * Number to be converted, or a function that returns one.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    number: function (num) {\r\n        num = resolveFunc(num);\r\n        if (isNull(num)) {\r\n            return 'null';\r\n        }\r\n        if (typeof num !== 'number') {\r\n            throw new TypeError(TEXT(num) + ' is not a number.');\r\n        }\r\n        if (isFinite(num)) {\r\n            return num.toString();\r\n        }\r\n        // Converting NaN/+Infinity/-Infinity according to Postgres documentation:\r\n        // http://www.postgresql.org/docs/9.4/static/datatype-numeric.html#DATATYPE-FLOAT\r\n        //\r\n        // NOTE: strings for 'NaN'/'+Infinity'/'-Infinity' are not case-sensitive.\r\n        if (num === Number.POSITIVE_INFINITY) {\r\n            return TEXT('+Infinity');\r\n        }\r\n        if (num === Number.NEGATIVE_INFINITY) {\r\n            return TEXT('-Infinity');\r\n        }\r\n        return TEXT('NaN');\r\n    },\r\n\r\n    /**\r\n     * @method formatting.array\r\n     * @description\r\n     * Converts an array of values into its PostgreSQL presentation as an Array-Type\r\n     * constructor string: `array[]`.\r\n     *\r\n     * @param {array|function} arr\r\n     * Array to be converted, or a function that returns one.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    array: function (arr) {\r\n        arr = resolveFunc(arr);\r\n        if (isNull(arr)) {\r\n            return 'null';\r\n        }\r\n        if (arr instanceof Array) {\r\n            return formatArray(arr);\r\n        }\r\n        throw new TypeError(TEXT(arr) + ' is not an Array object.');\r\n    },\r\n\r\n    /**\r\n     * @method formatting.csv\r\n     * @description\r\n     * Converts a single value or an array of values into a CSV string, with all values formatted\r\n     * according to their type.\r\n     *\r\n     * @param {array|value|function} values\r\n     * Value(s) to be converted, or a function that returns it.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    csv: function (values) {\r\n        return formatCSV(resolveFunc(values));\r\n    },\r\n\r\n    /**\r\n     * @method formatting.json\r\n     * @description\r\n     * Converts any value into JSON (using `JSON.stringify`), and returns it as\r\n     * a valid string, with single-quote symbols fixed, unless flag `raw` is set.\r\n     *\r\n     * @param {object|function} obj\r\n     * Object/Value to be converted, or a function that returns it.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the result.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    json: function (obj, raw) {\r\n        obj = resolveFunc(obj);\r\n        if (isNull(obj)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        var s = JSON.stringify(obj);\r\n        return raw ? s : TEXT(safeText(s));\r\n    },\r\n\r\n    /**\r\n     * @method formatting.func\r\n     * @description\r\n     * Calls the function to get the actual value, and then formats the result\r\n     * according to its type + `raw` flag.\r\n     *\r\n     * @param {function} func\r\n     * Function to be called, with support for nesting.\r\n     *\r\n     * @param {boolean} [raw=false]\r\n     * Indicates when not to escape the result.\r\n     *\r\n     * @param {object} [obj]\r\n     * `this` context to be passed into the function on all nested levels.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    func: function (func, raw, obj) {\r\n        if (isNull(func)) {\r\n            throwIfRaw(raw);\r\n            return 'null';\r\n        }\r\n        if (typeof func !== 'function') {\r\n            throw new TypeError(TEXT(func) + ' is not a function.');\r\n        }\r\n        var fm = raw ? fmFlags.raw : null;\r\n        if (isNull(obj)) {\r\n            return formatValue(resolveFunc(func), fm);\r\n        }\r\n        if (typeof obj === 'object') {\r\n            return formatValue(resolveFunc(func, obj), fm, obj);\r\n        }\r\n        throw new TypeError(TEXT(obj) + ' is not an object.');\r\n    },\r\n\r\n    /**\r\n     * @method formatting.format\r\n     * @description\r\n     * Replaces variables in a string according to the type of `values`:\r\n     *\r\n     * - Replaces `$1` occurrences when `values` is of type `string`, `boolean`, `number`, `Date`, `Buffer` or when it is `null`.\r\n     * - Replaces variables `$1`, `$2`, ...`$9999` when `values` is an array of parameters. When a variable is out of range,\r\n     *   it throws {@link external:RangeError RangeError} = `Variable $n out of range. Parameters array length: x`, unless\r\n     *   option `partial` is used.\r\n     * - Replaces `$*propName*`, where `*` is any of `{}`, `()`, `[]`, `<>`, `//`, when `values` is an object that's not a\r\n     * `Date`, `Buffer`, {@link QueryFile} or `null`. Special property name `this` refers to the formatting object itself,\r\n     *   to be injected as a JSON string. When referencing a property that doesn't exist in the formatting object, it throws\r\n     *   {@link external:Error Error} = `Property 'PropName' doesn't exist`, unless option `partial` is used.\r\n     *\r\n     * By default, each variable is automatically formatted according to its type, unless it is a special variable:\r\n     * - Raw-text variables end with `:raw` or symbol `^`, and prevent escaping the text. Such variables are not\r\n     *   allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Values null/undefined cannot be used as raw text.`\r\n     *   - `$1:raw`, `$2:raw`,..., and `$*propName:raw*` (see `*` above)\r\n     *   - `$1^`, `$2^`,..., and `$*propName^*` (see `*` above)\r\n     * - Open-value variables end with `:value` or symbol `#`, to be escaped, but not wrapped in quotes. Such variables are\r\n     *   not allowed to be `null` or `undefined`, or the method will throw {@link external:TypeError TypeError} = `Open values cannot be null or undefined.`\r\n     *   - `$1:value`, `$2:value`,..., and `$*propName:value*` (see `*` above)\r\n     *   - `$1#`, `$2#`,..., and `$*propName#*` (see `*` above)\r\n     * - SQL name variables end with `:name` or symbol `~` (tilde), and provide proper escaping for SQL names/identifiers:\r\n     *   - `$1:name`, `$2:name`,..., and `$*propName:name*` (see `*` above)\r\n     *   - `$1~`, `$2~`,..., and `$*propName~*` (see `*` above)\r\n     * - JSON override ends with `:json` to format the value of any type as a JSON string\r\n     * - CSV override ends with `:csv` to format an array as a properly escaped comma-separated list of values.\r\n     *\r\n     * @param {string|value|Object} query\r\n     * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n     *\r\n     * **NOTE:** Support for $[Custom Type Formatting] was added in v5.2.7.\r\n     *\r\n     * @param {array|object|value} [values]\r\n     * Formatting parameter(s) / variable value(s).\r\n     *\r\n     * @param {object} [options]\r\n     * Formatting Options.\r\n     *\r\n     * @param {boolean} [options.partial=false]\r\n     * Indicates that we intend to do only a partial replacement, i.e. throw no error when encountering a variable or\r\n     * property name that's missing within the formatting parameters.\r\n     *\r\n     * This option has no meaning when option `default` is present.\r\n     *\r\n     * @param {} [options.default]\r\n     * **Added in v.5.0.5**\r\n     *\r\n     * Sets a default value for every variable that's missing, consequently preventing errors when encountering a variable\r\n     * or property name that's missing within the formatting parameters.\r\n     *\r\n     * It can also be set to a function, to be called with two parameters that depend on the type of formatting being used,\r\n     * and to return the actual default value:\r\n     *\r\n     * - Named Parameters formatting:\r\n     *   - `name` - name of the property missing in the formatting object\r\n     *   - `obj` - the formatting object, and is the same as `this` context\r\n     *\r\n     * - Regular variable formatting:\r\n     *   - `index` - element's index that's outside of the formatting array's range\r\n     *   - `arr` - the formatting array, and is the same as `this` context\r\n     *\r\n     * @returns {string}\r\n     * Formatted query string.\r\n     *\r\n     * The function will throw an error, if any occurs during formatting.\r\n     */\r\n    format: function (query, values, options) {\r\n        if (query && typeof query.formatDBType === 'function') {\r\n            query = query.formatDBType();\r\n        }\r\n        return $formatQuery(query, values, false, options);\r\n    }\r\n};\r\n\r\nObject.freeze($as);\r\n\r\nmodule.exports = {\r\n    formatQuery: $formatQuery,\r\n    formatFunction: $formatFunction,\r\n    as: $as\r\n};\r\n\r\n/**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */\r\n\r\n/**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */\r\n\r\n/**\r\n * @external RangeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\r\n */\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/formatting.js\n// module id = 72\n// module chunks = 0","'use strict';\r\n\r\n// Number of times it is faster than the standard 'map', by Node.js versions:\r\n// 0.10.44: ~2.8\r\n// 0.11.16: ~3.8\r\n// 0.12.13: ~3.8\r\n// 4.4.4: ~1.38\r\n// 5.11.0: ~1.44\r\n// 6.1.0: ~8.25\r\nfunction map(arr, cb, obj) {\r\n    var res = new Array(arr.length);\r\n    if (obj) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            res[i] = cb.call(obj, arr[i], i, arr);\r\n        }\r\n    } else {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            res[i] = cb(arr[i], i, arr);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n// Number of times it is faster than the standard 'filter', by Node.js versions:\r\n// 0.10.44: ~2.42\r\n// 0.11.16: ~2.83\r\n// 0.12.13: ~2.78\r\n// 4.4.4: ~1.12\r\n// 5.11.0: ~1.14\r\n// 6.1.0: ~7.54\r\nfunction filter(arr, cb, obj) {\r\n    var res = [];\r\n    if (obj) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (cb.call(obj, arr[i], i, arr)) {\r\n                res.push(arr[i]);\r\n            }\r\n        }\r\n    } else {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (cb(arr[i], i, arr)) {\r\n                res.push(arr[i]);\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n// Number of times it is faster than the standard 'forEach', by Node.js versions:\r\n// 0.10.44: ~3.11\r\n// 0.11.16: ~4.6\r\n// 0.12.13: ~4.4\r\n// 4.4.4: ~1.55\r\n// 5.11.0: ~1.54\r\n// 6.1.0: ~1.21\r\nfunction forEach(arr, cb, obj) {\r\n    if (obj) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            cb.call(obj, arr[i], i, arr);\r\n        }\r\n    } else {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            cb(arr[i], i, arr);\r\n        }\r\n    }\r\n}\r\n\r\n//////////////////////////\r\n// Custom Methods\r\n//////////////////////////\r\n\r\n// Counts elements based on a condition;\r\nfunction countIf(arr, cb, obj) {\r\n    var count = 0;\r\n    if (obj) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            count += cb.call(obj, arr[i], i, arr) ? 1 : 0;\r\n        }\r\n    } else {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            count += cb(arr[i], i, arr) ? 1 : 0;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\nmodule.exports = {\r\n    map: map,\r\n    filter: filter,\r\n    forEach: forEach,\r\n    countIf: countIf\r\n};\r\n\r\nObject.freeze(module.exports);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/array.js\n// module id = 73\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    con: require('manakin').local,\r\n    main: require('./'),\r\n    utils: require('./utils')\r\n};\r\n\r\n/////////////////////////////////\r\n// Client notification helpers;\r\nvar $events = {\r\n\r\n    /**\r\n     * @event connect\r\n     * @description\r\n     * Global notification of acquiring a new database connection from the connection pool,\r\n     * i.e. a virtual connection.\r\n     *\r\n     * However, for direct calls to method {@link Database.connect} with parameter `{direct: true}`,\r\n     * this event represents a physical connection.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {external:Client} client\r\n     * $[pg.Client] object that represents the connection.\r\n     *\r\n     * @param {} dc\r\n     * Database Context that was used when creating the database object (see {@link Database}).\r\n     *\r\n     * @param {boolean} isFresh\r\n     * It indicates when it is a fresh physical connection:\r\n     * - `true` - the physical connection just has been allocated\r\n     * - `false` - the connection has been used previously\r\n     *\r\n     * **NOTE:**\r\n     *\r\n     * This parameter is always `true` for direct connections (created by calling {@link Database.connect}\r\n     * with parameter `{direct: true}`).\r\n     *\r\n     * @example\r\n     *\r\n     * var options = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     connect: function (client, dc, isFresh) {\r\n     *         var cp = client.connectionParameters;\r\n     *         console.log(\"Connected to database:\", cp.database);\r\n     *     }\r\n     *\r\n     * };\r\n     */\r\n    connect: function (ctx, client, isFresh) {\r\n        if (typeof ctx.options.connect === 'function') {\r\n            try {\r\n                ctx.options.connect(client, ctx.dc, isFresh);\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // cannot allow unhandled errors while connecting to the database,\r\n                // as it will break the connection logic;\r\n                $events.unexpected('connect', e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event disconnect\r\n     * @description\r\n     * Global notification of releasing a database connection back to the connection pool,\r\n     * i.e. releasing the virtual connection.\r\n     *\r\n     * However, when releasing a direct connection (created by calling {@link Database.connect} with parameter\r\n     * `{direct: true}`), this event represents a physical disconnection.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {external:Client} client - $[pg.Client] object that represents connection with the database.\r\n     *\r\n     * @param {} dc - Database Context that was used when creating the database object (see {@link Database}).\r\n     *\r\n     * @example\r\n     *\r\n     * var options = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     disconnect: function(client, dc) {\r\n     *        var cp = client.connectionParameters;\r\n     *        console.log(\"Disconnecting from database:\", cp.database);\r\n     *     }\r\n     *\r\n     * };\r\n     */\r\n    disconnect: function (ctx, client) {\r\n        if (typeof ctx.options.disconnect === 'function') {\r\n            try {\r\n                ctx.options.disconnect(client, ctx.dc);\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // cannot allow unhandled errors while disconnecting from the database,\r\n                // as it will break the disconnection logic;\r\n                $events.unexpected('disconnect', e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event query\r\n     * @description\r\n     *\r\n     * Global notification of a query that's about to execute.\r\n     *\r\n     * Notification happens just before the query execution. And if the handler throws an error, the query execution\r\n     * will be rejected with that error.\r\n     *\r\n     * @param {object} e - Event Context Object.\r\n     *\r\n     * This is a shared-type object that's passed in with the following events: {@link event:query query},\r\n     * {@link event:receive receive}, {@link event:error error}, {@link event:task task} and {@link event:transact transact}.\r\n     *\r\n     * @param {String|Object} e.cn\r\n     *\r\n     * Set only for event {@link event:error error}, and only when the error is connection-related.\r\n     *\r\n     * It is a safe copy of the connection string/object that was used when initializing `db` - the database instance.\r\n     *\r\n     * If the original connection contains a password, the safe copy contains it masked with symbol `#`, so the connection\r\n     * can be logged safely, without exposing the password.\r\n     *\r\n     * @param {} e.dc\r\n     * Database Context that was used when creating the database object (see {@link Database}). It is set for all events.\r\n     *\r\n     * @param {String|Object} e.query\r\n     *\r\n     * Query string/object that was passed into the query method. This property is only set during events {@link event:query query}\r\n     * and {@link event:receive receive}.\r\n     *\r\n     * @param {external:Client} e.client\r\n     *\r\n     * $[pg.Client] object that represents the connection. It is set for all events, except for event {@link event:error error}\r\n     * when it is connection-related.\r\n     *\r\n     * @param {} e.params - Formatting parameters for the query.\r\n     *\r\n     * It is set only for events {@link event:query query}, {@link event:receive receive} and {@link event:error error}, and only\r\n     * when it is needed for logging. This library takes an extra step in figuring out when formatting parameters are of any value\r\n     * to the event logging:\r\n     * - when an error occurs related to the query formatting, event {@link event:error error} is sent with the property set.\r\n     * - when initialization parameter `pgFormat` is used, and all query formatting is done within the $[PG] library, events\r\n     * {@link event:query query} and {@link event:receive receive} will have this property set also, since this library no longer\r\n     * handles the query formatting.\r\n     *\r\n     * When this parameter is not set, it means one of the two things:\r\n     * - there were no parameters passed into the query method;\r\n     * - property `query` of this object already contains all the formatting values in it, so logging only the query is sufficient.\r\n     *\r\n     * @param {object} e.ctx\r\n     * _Task/Transaction Context_ object. See {@link Task.ctx} for details.\r\n     *\r\n     * This property is always set for events {@link event:task task} and {@link event:transact transact}, while for events\r\n     * {@link event:query query}, {@link event:receive receive} and {@link event:error error} it is only set when the event occurred\r\n     * while executing a task or transaction.\r\n     *\r\n     */\r\n    query: function (options, context) {\r\n        if (typeof options.query === 'function') {\r\n            try {\r\n                options.query(context);\r\n            } catch (e) {\r\n                // throwing an error during event 'query'\r\n                // will result in a reject for the request.\r\n                return e instanceof Error ? e : new $npm.utils.InternalError(e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event receive\r\n     * @description\r\n     * Global notification of any data received from the database, coming from a regular query or from a stream.\r\n     *\r\n     * The event is fired before the data reaches the client, and only when receiving 1 or more records.\r\n     *\r\n     * This event notification serves two purposes:\r\n     *  - Providing selective data logging for debugging;\r\n     *  - Pre-processing data before it reaches the client.\r\n     *\r\n     * **NOTES:**\r\n     * - If you alter the size of `data` directly or through the `result` object, it may affect `QueryResultMask`\r\n     *   validation for regular queries, which is executed right after this notification.\r\n     * - When adding data pre-processing, you should consider possible performance penalty this may bring.\r\n     * - If the event handler throws an error, the original request will be rejected with that error.\r\n     *\r\n     * @param {array} data\r\n     * A non-empty array of received data objects/rows.\r\n     *\r\n     * If any of those objects are modified during notification, the client will receive the modified data.\r\n     *\r\n     * @param {object} result\r\n     * - original $[Result] object, if the data comes from a regular query, in which case `data = result.rows`.\r\n     * - `undefined` when the data comes from a stream.\r\n     *\r\n     * @param {object} e\r\n     * Event Context Object.\r\n     *\r\n     * This type of object is used by several events. See event {@link event:query query} for its complete documentation.\r\n     *\r\n     * @example\r\n     *\r\n     * // Example below shows the fastest way to camelize column names:\r\n     *\r\n     * var options = {\r\n     *     receive: function (data, result, e) {\r\n     *         camelizeColumns(data);\r\n     *     }\r\n     * };\r\n     *\r\n     * function camelizeColumns(data) {\r\n     *     var template = data[0];\r\n     *     for (var prop in template) {\r\n     *         var camel = pgp.utils.camelize(prop);\r\n     *         if (!(camel in template)) {\r\n     *             for (var i = 0; i < data.length; i++) {\r\n     *                 var d = data[i];\r\n     *                 d[camel] = d[prop];\r\n     *                 delete d[prop];\r\n     *             }\r\n     *         }\r\n     *     }\r\n     * }\r\n     */\r\n    receive: function (options, data, result, context) {\r\n        if (typeof options.receive === 'function') {\r\n            try {\r\n                options.receive(data, result, context);\r\n            } catch (e) {\r\n                // throwing an error during event 'receive'\r\n                // will result in a reject for the request.\r\n                return e instanceof Error ? e : new $npm.utils.InternalError(e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event task\r\n     * @description\r\n     * Global notification of a task start / finish events.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {object} e - Event Context Object.\r\n     *\r\n     * This type of object is used by several events. See event {@link event:query query}\r\n     * for its complete documentation.\r\n     *\r\n     * @example\r\n     *\r\n     * var options = {\r\n     *     task: function (e) {\r\n     *         if (e.ctx.finish) {\r\n     *             // this is a task->finish event;\r\n     *             console.log(\"Finish Time:\", e.ctx.finish);\r\n     *             if (e.ctx.success) {\r\n     *                 // e.ctx.result = resolved data;\r\n     *             } else {\r\n     *                 // e.ctx.result = error/rejection reason;\r\n     *             }\r\n     *         } else {\r\n     *             // this is a task->start event;\r\n     *             console.log(\"Start Time:\", e.ctx.start);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     */\r\n    task: function (options, context) {\r\n        if (typeof options.task === 'function') {\r\n            try {\r\n                options.task(context);\r\n            } catch (e) {\r\n                // silencing the error, to avoid breaking the task;\r\n                $events.unexpected('task', e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event transact\r\n     * @description\r\n     * Global notification of a transaction start / finish events.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {object} e - Event Context Object.\r\n     *\r\n     * This type of object is used by several events. See event {@link event:query query}\r\n     * for its complete documentation.\r\n     *\r\n     * @example\r\n     *\r\n     * var options = {\r\n     *     transact: function (e) {\r\n     *         if (e.ctx.finish) {\r\n     *             // this is a transaction->finish event;\r\n     *             console.log(\"Finish Time:\", e.ctx.finish);\r\n     *             if (e.ctx.success) {\r\n     *                 // e.ctx.result = resolved data;\r\n     *             } else {\r\n     *                 // e.ctx.result = error/rejection reason;\r\n     *             }\r\n     *         } else {\r\n     *             // this is a transaction->start event;\r\n     *             console.log(\"Start Time:\", e.ctx.start);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     */\r\n    transact: function (options, context) {\r\n        if (typeof options.transact === 'function') {\r\n            try {\r\n                options.transact(context);\r\n            } catch (e) {\r\n                // silencing the error, to avoid breaking the transaction;\r\n                $events.unexpected('transact', e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event error\r\n     * @description\r\n     * Global notification of every error encountered by this library.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {} err\r\n     * The error encountered, of the same value and type as it was reported.\r\n     *\r\n     * @param {object} e\r\n     * Event Context Object.\r\n     *\r\n     * This type of object is used by several events. See event {@link event:query query}\r\n     * for its complete documentation.\r\n     *\r\n     * @example\r\n     * var options = {\r\n     *\r\n     *     // pg-promise initialization options...\r\n     *\r\n     *     error: function (err, e) {\r\n     *\r\n     *         // e.dc = Database Context\r\n     *\r\n     *         if (e.cn) {\r\n     *             // this is a connection-related error\r\n     *             // cn = safe connection details passed into the library:\r\n     *             //      if password is present, it is masked by #\r\n     *         }\r\n     *\r\n     *         if (e.query) {\r\n     *             // query string is available\r\n     *             if (e.params) {\r\n     *                 // query parameters are available\r\n     *             }\r\n     *         }\r\n     *\r\n     *         if (e.ctx) {\r\n     *             // occurred inside a task or transaction\r\n     *         }\r\n     *       }\r\n     *\r\n     * };\r\n     *\r\n     */\r\n    error: function (options, err, context) {\r\n        if (typeof options.error === 'function') {\r\n            try {\r\n                options.error(err, context);\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // throwing unhandled errors while handling an error\r\n                // notification is simply not acceptable.\r\n                $events.unexpected('error', e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event extend\r\n     * @description\r\n     * Extends database protocol with custom methods and properties.\r\n     *\r\n     * Override this event to extend the existing access layer with your own functions and\r\n     * properties best suited for your application.\r\n     *\r\n     * The extension thus becomes available across all access layers:\r\n     *\r\n     * - Within the root/default database protocol;\r\n     * - Inside transactions, including nested ones;\r\n     * - Inside tasks, including nested ones.\r\n     *\r\n     * All pre-defined methods and properties are read-only, so you will get an error,\r\n     * if you try overriding them.\r\n     *\r\n     * The library will suppress any error thrown by the handler and write it into the console.\r\n     *\r\n     * @param {object} obj - Protocol object to be extended.\r\n     *\r\n     * @param {} dc - Database Context that was used when creating the database object.\r\n     *\r\n     * @example\r\n     *\r\n     * // In the example below we extend the protocol with function `addImage`\r\n     * // that will insert one binary image and resolve with the new record id.\r\n     *\r\n     * var options = {\r\n     *     extend: function (obj, dc) {\r\n     *         // obj = this;\r\n     *         // dc = database context;\r\n     *         obj.addImage = function (data) {\r\n     *             return obj.one(\"insert into images(data) values($1) returning id\", '\\\\x' + data);\r\n     *         }\r\n     *     }\r\n     * };\r\n     *\r\n     * @example\r\n     *\r\n     * // It is best to extend the protocol by adding whole entity repositories to it\r\n     * // as shown in the following example.\r\n     *\r\n     * // Users repository;\r\n     * function repUsers(obj, dc) {\r\n     *     // NOTE: You can change the implementation based on `dc`;\r\n     *     return {\r\n     *         add: function (name, active) {\r\n     *             return obj.none(\"insert into users values($1, $2)\", [name, active]);\r\n     *         },\r\n     *         delete: function (id) {\r\n     *             return obj.none(\"delete from users where id = $1\", id);\r\n     *         }\r\n     *     }\r\n     * }\r\n     *\r\n     * // Overriding 'extend' event;\r\n     * var options = {\r\n     *     extend: function (obj, dc) {\r\n     *         // obj = this;\r\n     *         // dc = database context;\r\n     *         this.users = repUsers(this, dc);\r\n     *         // You can set different repositories based on `dc`\r\n     *     }\r\n     * };\r\n     *\r\n     * // Usage example:\r\n     * db.users.add(\"John\", true)\r\n     *     .then(function () {\r\n     *         // user added successfully;\r\n     *     })\r\n     *     .catch(function (error) {\r\n     *         // failed to add the user;\r\n     *     });\r\n     *\r\n     */\r\n    extend: function (options, obj, dc) {\r\n        if (typeof options.extend === 'function') {\r\n            try {\r\n                options.extend.call(obj, obj, dc);\r\n            } catch (e) {\r\n                // have to silence errors here;\r\n                // the result of throwing unhandled errors while\r\n                // extending the protocol would be unpredictable.\r\n                $events.unexpected('extend', e);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @event unexpected\r\n     * @param {string} event - unhandled event name.\r\n     * @param {String|Error} e - unhandled error.\r\n     * @private\r\n     */\r\n    unexpected: function (event, e) {\r\n        // If you should ever get here, your app is definitely broken, and you need to fix\r\n        // your event handler to prevent unhandled errors during event notifications.\r\n        //\r\n        // Console output is suppressed when running tests, to avoid polluting test output\r\n        // with error messages that are intentional and of no value to the test.\r\n\r\n        /* istanbul ignore if */\r\n        if (!$npm.main.suppressErrors) {\r\n            var stack = e instanceof Error ? e.stack : new Error().stack;\r\n            $npm.con.error(\"Unexpected error in '%s' event handler.\\n%s\\n\", event, stack);\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = $events;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/events.js\n// module id = 74\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    formatting: require('../formatting'),\r\n    TableName: require('./tableName'),\r\n    Column: require('./column')\r\n};\r\n\r\nvar $arr = require('../array');\r\n\r\n/**\r\n * @class helpers.ColumnSet\r\n * @description\r\n *\r\n * Performance-optimized, read-only structure with query-formatting columns.\r\n *\r\n * For performance-oriented applications this type should be created globally, to be reused by all methods.\r\n *\r\n * @param {object|helpers.Column|array} columns\r\n * Columns information object, depending on the type:\r\n *\r\n * - When it is a simple object, its properties are enumerated to represent both column names and property names\r\n *   within the source objects. See also option `inherit` that's applicable in this case.\r\n *\r\n * - When it is a single {@link helpers.Column Column} object, property {@link helpers.ColumnSet#columns columns} is initialized with\r\n *   just a single column. It is not a unique situation when only a single column is required for an update operation.\r\n *\r\n * - When it is an array, each element is assumed to represent details for a column. If the element is already of type {@link helpers.Column Column},\r\n *   it is used directly; otherwise the element is passed into {@link helpers.Column Column} constructor for initialization.\r\n *   On any duplicate column name (case-sensitive) it will throw {@link external:Error Error} = `Duplicate column name \"name\".`\r\n *\r\n * - When it is none of the above, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'columns' specified.`\r\n *\r\n * @param {object} [options]\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [options.table]\r\n * Table details.\r\n *\r\n * When it is a non-null value, and not a {@link helpers.TableName TableName} object, a new {@link helpers.TableName TableName} is constructed from the value.\r\n *\r\n * It can be used as the default for methods {@link helpers.insert insert} and {@link helpers.update update} when their parameter\r\n * `table` is omitted, and for logging purposes.\r\n *\r\n * @param {boolean} [options.inherit = false]\r\n * Use inherited properties in addition to the object's own properties.\r\n *\r\n * By default, only the object's own properties are enumerated for column names.\r\n *\r\n * @returns {helpers.ColumnSet}\r\n *\r\n * @see\r\n *\r\n * {@link helpers.ColumnSet#columns columns},\r\n * {@link helpers.ColumnSet#names names},\r\n * {@link helpers.ColumnSet#table table},\r\n * {@link helpers.ColumnSet#variables variables} |\r\n * {@link helpers.ColumnSet.extend extend},\r\n * {@link helpers.ColumnSet.merge merge},\r\n * {@link helpers.ColumnSet.prepare prepare}\r\n *\r\n * @example\r\n *\r\n * // A complex insert/update object scenario for table 'purchases' in schema 'fiscal'.\r\n * // For a good performance, you should declare such objects once and then reuse them.\r\n * //\r\n * // Column Requirements:\r\n * //\r\n * // 1. Property 'id' is only to be used for a WHERE condition in updates\r\n * // 2. Property 'list' needs to be formatted as a csv\r\n * // 3. Property 'code' is to be used as raw text, and to be defaulted to 0 when the\r\n * //    property is missing in the source object\r\n * // 4. Property 'log' is a JSON object with 'log-entry' for the column name\r\n * // 5. Property 'data' requires SQL type casting '::int[]'\r\n * // 6. Property 'amount' needs to be set to 100, if it is 0\r\n * // 7. Property 'total' must be skipped during updates, if 'amount' was 0, plus its\r\n * //    column name is 'total-val'\r\n *\r\n * var cs = new pgp.helpers.ColumnSet([\r\n *     '?id', // ColumnConfig equivalent: {name: 'id', cnd: true}\r\n *     'list:csv', // ColumnConfig equivalent: {name: 'list', mod: ':csv'}\r\n *     {\r\n *         name: 'code',\r\n *         mod: '^', // format as raw text\r\n *         def: 0 // default to 0 when the property doesn't exist\r\n *     },\r\n *     {\r\n *         name: 'log-entry',\r\n *         prop: 'log',\r\n *         mod: ':json' // format as JSON\r\n *     },\r\n *     {\r\n *         name: 'data',\r\n *         cast: 'int[]' // use SQL type casting '::int[]'\r\n *     },\r\n *     {\r\n *         name: 'amount',\r\n *         init: function (col) {\r\n *             // set to 100, if the value is 0:\r\n *             return col.value === 0 ? 100 : col.value;\r\n *         }\r\n *     },\r\n *     {\r\n *         name: 'total-val',\r\n *         prop: 'total',\r\n *         skip: function (col) {\r\n *             // skip from updates, if 'amount' is 0:\r\n *             return this.amount === 0; // = col.source.amount\r\n *         }\r\n *     }\r\n * ], {table: {table: 'purchases', schema: 'fiscal'}});\r\n *\r\n * // Alternatively, you could take the table declaration out:\r\n * // var table = new pgp.helpers.TableName('purchases', 'fiscal');\r\n *\r\n * console.log(cs); // console output for the object:\r\n * //=>\r\n * // ColumnSet {\r\n * //    table: \"fiscal\".\"purchases\"\r\n * //    columns: [\r\n * //        Column {\r\n * //            name: \"id\"\r\n * //            cnd: true\r\n * //        }\r\n * //        Column {\r\n * //            name: \"list\"\r\n * //            mod: \":csv\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"code\"\r\n * //            mod: \"^\"\r\n * //            def: 0\r\n * //        }\r\n * //        Column {\r\n * //            name: \"log-entry\"\r\n * //            prop: \"log\"\r\n * //            mod: \":json\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"data\"\r\n * //            cast: \"int[]\"\r\n * //        }\r\n * //        Column {\r\n * //            name: \"amount\"\r\n * //            init: [Function]\r\n * //        }\r\n * //        Column {\r\n * //            name: \"total-val\"\r\n * //            prop: \"total\"\r\n * //            skip: [Function]\r\n * //        }\r\n * //    ]\r\n * // }\r\n */\r\nfunction ColumnSet(columns, options) {\r\n\r\n    if (!(this instanceof ColumnSet)) {\r\n        return new ColumnSet(columns, options);\r\n    }\r\n\r\n    if (!columns || typeof columns !== 'object') {\r\n        throw new TypeError(\"Invalid parameter 'columns' specified.\");\r\n    }\r\n\r\n    var inherit, names, variables, updates, cndCount = 0, isSimple = true;\r\n\r\n    if (!$npm.utils.isNull(options)) {\r\n        if (typeof options !== 'object') {\r\n            throw new TypeError(\"Invalid parameter 'options' specified.\");\r\n        }\r\n        if (!$npm.utils.isNull(options.table)) {\r\n            if (options.table instanceof $npm.TableName) {\r\n                this.table = options.table;\r\n            } else {\r\n                this.table = new $npm.TableName(options.table);\r\n            }\r\n        }\r\n        inherit = options.inherit;\r\n    }\r\n\r\n    /**\r\n     * @name helpers.ColumnSet#table\r\n     * @type {helpers.TableName}\r\n     * @readonly\r\n     * @description\r\n     * Destination table. It can be specified for two purposes:\r\n     *\r\n     * - **primary:** to be used as the default table when it is omitted during a call into methods {@link helpers.insert insert} and {@link helpers.update update}\r\n     * - **secondary:** to be automatically written into the console (for logging purposes).\r\n     */\r\n\r\n\r\n    /**\r\n     * @name helpers.ColumnSet#columns\r\n     * @type helpers.Column[]\r\n     * @readonly\r\n     * @description\r\n     * Array of {@link helpers.Column Column} objects.\r\n     */\r\n    if (Array.isArray(columns)) {\r\n        var colNames = {};\r\n        this.columns = $arr.map(columns, function (c) {\r\n            var col = (c instanceof $npm.Column) ? c : new $npm.Column(c);\r\n            if (col.name in colNames) {\r\n                throw new Error('Duplicate column name \"' + col.name + '\".');\r\n            }\r\n            colNames[col.name] = true;\r\n            return col;\r\n        });\r\n    } else {\r\n        if (columns instanceof $npm.Column) {\r\n            this.columns = [columns];\r\n        } else {\r\n            this.columns = [];\r\n            for (var name in columns) {\r\n                if (inherit || columns.hasOwnProperty(name)) {\r\n                    this.columns.push(new $npm.Column(name));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Object.freeze(this.columns);\r\n\r\n    for (var i = 0; i < this.columns.length; i++) {\r\n        var c = this.columns[i];\r\n        if (c.cnd) {\r\n            cndCount++;\r\n        }\r\n        // ColumnSet is simple when the source objects require no preparation,\r\n        // and should be used directly:\r\n        if (c.prop || c.init || 'def' in c) {\r\n            isSimple = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name helpers.ColumnSet#names\r\n     * @type String\r\n     * @readonly\r\n     * @description\r\n     * **Added in v5.5.5**\r\n     *\r\n     * Returns a string - comma-separated list of all column names, properly escaped.\r\n     *\r\n     * This method is primarily for internal use.\r\n     *\r\n     * @example\r\n     * var cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);\r\n     * console.log(cs.names);\r\n     * //=> \"id\",\"cells\",\"doc\"\r\n     */\r\n    Object.defineProperty(this, 'names', {\r\n        get: function () {\r\n            if (!names) {\r\n                names = $arr.map(this.columns, function (c) {\r\n                    return c.escapedName;\r\n                }).join();\r\n            }\r\n            return names;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name helpers.ColumnSet#variables\r\n     * @type String\r\n     * @readonly\r\n     * @description\r\n     * **Added in v5.5.5**\r\n     *\r\n     * Returns a string - formatting template for all column values.\r\n     *\r\n     * This method is primarily for internal use.\r\n     *\r\n     * @example\r\n     * var cs = new ColumnSet(['id^', {name: 'cells', cast: 'int[]'}, 'doc:json']);\r\n     * console.log(cs.variables);\r\n     * //=> ${id^},${cells}::int[],${doc:json}\r\n     */\r\n    Object.defineProperty(this, 'variables', {\r\n        get: function () {\r\n            if (!variables) {\r\n                variables = $arr.map(this.columns, function (c) {\r\n                    return c.variable + c.castText;\r\n                }).join();\r\n            }\r\n            return variables;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @method helpers.ColumnSet.assign\r\n     * @private\r\n     * @description\r\n     * Returns a formatting template of SET assignments for a single object.\r\n     *\r\n     * This method is for internal use only.\r\n     *\r\n     * @param {object} source\r\n     * Source object that contains values for columns.\r\n     *\r\n     * @returns {string}\r\n     * Comma-separated list of variable-to-column assignments.\r\n     */\r\n    this.assign = function (source) {\r\n        if (updates) {\r\n            return updates;\r\n        }\r\n        var dynamic;\r\n        var list = $arr.filter(this.columns, function (c) {\r\n            if (c.cnd) {\r\n                return false;\r\n            }\r\n            if (c.skip) {\r\n                dynamic = true;\r\n                var a = colDesc(c, source);\r\n                if (c.skip.call(source, a)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n\r\n        list = $arr.map(list, function (c) {\r\n            return c.escapedName + '=' + c.variable + c.castText;\r\n        }).join();\r\n\r\n        if (!dynamic) {\r\n            updates = list;\r\n        }\r\n        return list;\r\n    };\r\n\r\n    /**\r\n     * @method helpers.ColumnSet.extend\r\n     * @description\r\n     * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.\r\n     *\r\n     * If the two sets contain a column with the same `name` (case-sensitive), an error is thrown.\r\n     *\r\n     * @param {helpers.Column|helpers.ColumnSet|array} columns\r\n     * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:\r\n     * - it can also be of type {@link helpers.ColumnSet ColumnSet}\r\n     * - it cannot be a simple object (properties enumeration is not supported here)\r\n     *\r\n     * @returns {helpers.ColumnSet}\r\n     * New {@link helpers.ColumnSet ColumnSet} object with the extended/concatenated list of columns.\r\n     *\r\n     * @see\r\n     * {@link helpers.Column Column},\r\n     * {@link helpers.ColumnSet.merge merge}\r\n     *\r\n     * @example\r\n     *\r\n     * var pgp = require('pg-promise')();\r\n     *\r\n     * var cs = new pgp.helpers.ColumnSet(['one', 'two'], {table: 'my-table'});\r\n     * console.log(cs);\r\n     * //=>\r\n     * // ColumnSet {\r\n     * //    table: \"my-table\"\r\n     * //    columns: [\r\n     * //        Column {\r\n     * //            name: \"one\"\r\n     * //        }\r\n     * //        Column {\r\n     * //            name: \"two\"\r\n     * //        }\r\n     * //    ]\r\n     * // }\r\n     * var csExtended = cs.extend(['three']);\r\n     * console.log(csExtended);\r\n     * //=>\r\n     * // ColumnSet {\r\n     * //    table: \"my-table\"\r\n     * //    columns: [\r\n     * //        Column {\r\n     * //            name: \"one\"\r\n     * //        }\r\n     * //        Column {\r\n     * //            name: \"two\"\r\n     * //        }\r\n     * //        Column {\r\n     * //            name: \"three\"\r\n     * //        }\r\n     * //    ]\r\n     * // }\r\n     */\r\n    this.extend = function (columns) {\r\n        var cs = columns;\r\n        if (!(cs instanceof ColumnSet)) {\r\n            cs = new ColumnSet(columns);\r\n        }\r\n        // Any duplicate column will throw Error = 'Duplicate column name \"name\".',\r\n        return new ColumnSet(this.columns.concat(cs.columns), {table: this.table});\r\n    };\r\n\r\n    /**\r\n     * @method helpers.ColumnSet.merge\r\n     * @description\r\n     * Creates a new {@link helpers.ColumnSet ColumnSet}, by joining the two sets of columns.\r\n     *\r\n     * Items in `columns` with the same `name` (case-sensitive) override the original columns.\r\n     *\r\n     * @param {helpers.Column|helpers.ColumnSet|array} columns\r\n     * Columns to be appended, of the same type as parameter `columns` during {@link helpers.ColumnSet ColumnSet} construction, except:\r\n     * - it can also be of type {@link helpers.ColumnSet ColumnSet}\r\n     * - it cannot be a simple object (properties enumeration is not supported here)\r\n     *\r\n     * @see\r\n     * {@link helpers.Column Column},\r\n     * {@link helpers.ColumnSet.extend extend}\r\n     *\r\n     * @returns {helpers.ColumnSet}\r\n     * New {@link helpers.ColumnSet ColumnSet} object with the merged list of columns.\r\n     *\r\n     * @example\r\n     *\r\n     * var pgp = require('pg-promise')();\r\n     *\r\n     * var cs = new pgp.helpers.ColumnSet(['?one', 'two:json'], {table: 'my-table'});\r\n     * console.log(cs);\r\n     * //=>\r\n     * // ColumnSet {\r\n     * //    table: \"my-table\"\r\n     * //    columns: [\r\n     * //        Column {\r\n     * //            name: \"one\"\r\n     * //            cnd: true\r\n     * //        }\r\n     * //        Column {\r\n     * //            name: \"two\"\r\n     * //            mod: \":json\"\r\n     * //        }\r\n     * //    ]\r\n     * // }\r\n     * var csMerged = cs.merge(['two', 'three^']);\r\n     * console.log(csMerged);\r\n     * //=>\r\n     * // ColumnSet {\r\n     * //    table: \"my-table\"\r\n     * //    columns: [\r\n     * //        Column {\r\n     * //            name: \"one\"\r\n     * //            cnd: true\r\n     * //        }\r\n     * //        Column {\r\n     * //            name: \"two\"\r\n     * //        }\r\n     * //        Column {\r\n     * //            name: \"three\"\r\n     * //            mod: \"^\"\r\n     * //        }\r\n     * //    ]\r\n     * // }\r\n     *\r\n     */\r\n    this.merge = function (columns) {\r\n        var cs = columns;\r\n        if (!(cs instanceof ColumnSet)) {\r\n            cs = new ColumnSet(columns);\r\n        }\r\n        var colNames = {}, cols = [];\r\n        $arr.forEach(this.columns, function (c, idx) {\r\n            cols.push(c);\r\n            colNames[c.name] = idx;\r\n        });\r\n        $arr.forEach(cs.columns, function (c) {\r\n            if (c.name in colNames) {\r\n                cols[colNames[c.name]] = c;\r\n            } else {\r\n                cols.push(c);\r\n            }\r\n        });\r\n        return new ColumnSet(cols, {table: this.table});\r\n    };\r\n\r\n    /**\r\n     * @method helpers.ColumnSet.prepare\r\n     * @description\r\n     * **Added in v5.5.6**\r\n     *\r\n     * Prepares a source object to be formatted, by cloning it and applying the rules\r\n     * as set by the columns configuration.\r\n     *\r\n     * This method is primarily for internal use, and as such it does not validate\r\n     * its input parameters.\r\n     *\r\n     * @param {object} source\r\n     * The source object to be prepared, if required.\r\n     *\r\n     * It must be a non-`null` object, which the method does not validate, as it is\r\n     * intended primarily for internal use by the library.\r\n     *\r\n     * @returns {object}\r\n     * When the object needs to be prepared, the method returns a clone of the source object,\r\n     * with all properties and values set according to the columns configuration.\r\n     *\r\n     * When the object does not need to be prepared, the original object is returned.\r\n     */\r\n    this.prepare = function (source) {\r\n        if (isSimple) {\r\n            return source; // a simple ColumnSet requires no object preparation;\r\n        }\r\n        var target = {};\r\n        $arr.forEach(this.columns, function (c) {\r\n            var a = colDesc(c, source);\r\n            if (c.init) {\r\n                target[a.name] = c.init.call(source, a);\r\n            } else {\r\n                if (a.exists || 'def' in c) {\r\n                    target[a.name] = a.value;\r\n                }\r\n            }\r\n        });\r\n        return target;\r\n    };\r\n\r\n    Object.freeze(this);\r\n\r\n    function colDesc(column, source) {\r\n        var a = {\r\n            source: source,\r\n            name: column.prop || column.name\r\n        };\r\n        a.exists = a.name in source;\r\n        if (a.exists) {\r\n            a.value = source[a.name];\r\n        } else {\r\n            a.value = 'def' in column ? column.def : undefined;\r\n        }\r\n        return a;\r\n    }\r\n}\r\n\r\n/**\r\n * @method helpers.ColumnSet.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nColumnSet.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'ColumnSet {'\r\n        ];\r\n    if (this.table) {\r\n        lines.push(gap1 + 'table: ' + this.table);\r\n    }\r\n    if (this.columns.length) {\r\n        lines.push(gap1 + 'columns: [');\r\n        $arr.forEach(this.columns, function (c) {\r\n            lines.push(c.toString(2));\r\n        });\r\n        lines.push(gap1 + ']');\r\n    } else {\r\n        lines.push(gap1 + 'columns: []');\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nColumnSet.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = ColumnSet;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/columnSet.js\n// module id = 75\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    fs: require('fs'),\r\n    os: require('os'),\r\n    path: require('path'),\r\n    minify: require('pg-minify'),\r\n    utils: require('./utils'),\r\n    format: require('./formatting').as.format,\r\n    QueryFileError: require('./errors/queryFile')\r\n};\r\n\r\n/**\r\n * @constructor QueryFile\r\n * @description\r\n *\r\n * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`.\r\n *\r\n * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required.\r\n * The SQL can be of any complexity, with both single and multi-line comments.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}\r\n * and {@link ParameterizedQuery}.\r\n *\r\n * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}.\r\n *\r\n * For any given SQL file you should only create a single instance of this class throughout the application.\r\n *\r\n * @param {string} file\r\n * Path to the SQL file with the query, either absolute or relative to the application's entry point file.\r\n *\r\n * If there is any problem reading the file, it will be reported when executing the query.\r\n *\r\n * @param {QueryFile.Options} [options]\r\n * Set of configuration options, as documented by {@link QueryFile.Options}.\r\n *\r\n * @returns {QueryFile}\r\n *\r\n * @see\r\n * {@link errors.QueryFileError QueryFileError},\r\n * {@link utils}\r\n *\r\n * @example\r\n * // File sql.js\r\n *\r\n * // Proper way to organize an sql provider:\r\n * //\r\n * // - have all sql files for Users in ./sql/users\r\n * // - have all sql files for Products in ./sql/products\r\n * // - have your sql provider module as ./sql/index.js\r\n *\r\n * var QueryFile = require('pg-promise').QueryFile;\r\n * var path = require('path');\r\n *\r\n * // Helper for linking to external query files:\r\n * function sql(file) {\r\n *     var fullPath = path.join(__dirname, file); // generating full path;\r\n *     return new QueryFile(fullPath, {minify: true});\r\n * }\r\n *\r\n * module.exports = {\r\n *     // external queries for Users:\r\n *     users: {\r\n *         add: sql('users/create.sql'),\r\n *         search: sql('users/search.sql'),\r\n *         report: sql('users/report.sql'),\r\n *     },\r\n *     // external queries for Products:\r\n *     products: {\r\n *         add: sql('products/add.sql'),\r\n *         quote: sql('products/quote.sql'),\r\n *         search: sql('products/search.sql'),\r\n *     }\r\n * };\r\n *\r\n * @example\r\n * // Testing our SQL provider\r\n *\r\n * var db = require('./db'); // our database module;\r\n * var sql = require('./sql').users; // our sql for users;\r\n *\r\n * module.exports = {\r\n *     addUser: function (name, age) {\r\n *         return db.none(sql.add, [name, age]);\r\n *     },\r\n *     findUser: function (name) {\r\n *         return db.any(sql.search, name);\r\n *     }\r\n * };\r\n *\r\n */\r\nfunction QueryFile(file, options) {\r\n\r\n    if (!(this instanceof QueryFile)) {\r\n        return new QueryFile(file, options);\r\n    }\r\n\r\n    var sql, error, ready, modTime, after, filePath = file, opt = {\r\n        debug: $npm.utils.isDev(),\r\n        minify: false,\r\n        compress: false\r\n    };\r\n\r\n    if (options && typeof options === 'object') {\r\n        if (options.debug !== undefined) {\r\n            opt.debug = !!options.debug;\r\n        }\r\n        if (options.minify !== undefined) {\r\n            after = options.minify === 'after';\r\n            opt.minify = after ? 'after' : !!options.minify;\r\n        }\r\n        if (options.compress !== undefined) {\r\n            opt.compress = !!options.compress;\r\n        }\r\n        if (opt.compress && options.minify === undefined) {\r\n            opt.minify = true;\r\n        }\r\n        if (options.params !== undefined) {\r\n            opt.params = options.params;\r\n        }\r\n    }\r\n\r\n    Object.freeze(opt);\r\n\r\n    if ($npm.utils.isText(filePath) && !$npm.utils.isPathAbsolute(filePath)) {\r\n        filePath = $npm.path.join($npm.utils.startDir, filePath);\r\n    }\r\n\r\n    // Custom Type Formatting support:\r\n    this.formatDBType = function () {\r\n        this.prepare(true);\r\n        return this.query;\r\n    };\r\n\r\n    /**\r\n     * @method QueryFile.prepare\r\n     * @summary Prepares the query for execution.\r\n     * @description\r\n     * If the the query hasn't been prepared yet, it will read the file and process the contents according\r\n     * to the parameters passed into the constructor.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [throwErrors=false]\r\n     * Throw any error encountered.\r\n     *\r\n     */\r\n    this.prepare = function (throwErrors) {\r\n        var lastMod;\r\n        if (opt.debug && ready) {\r\n            try {\r\n                lastMod = $npm.fs.statSync(filePath).mtime.getTime();\r\n                if (lastMod === modTime) {\r\n                    // istanbul ignore next;\r\n                    // coverage for this works differently under Windows and Linux\r\n                    return;\r\n                }\r\n                ready = false;\r\n            } catch (e) {\r\n                sql = undefined;\r\n                ready = false;\r\n                error = e;\r\n                if (throwErrors) {\r\n                    throw error;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        if (ready) {\r\n            return;\r\n        }\r\n        try {\r\n            sql = $npm.fs.readFileSync(filePath, 'utf8');\r\n            modTime = lastMod || $npm.fs.statSync(filePath).mtime.getTime();\r\n            if (opt.minify && !after) {\r\n                sql = $npm.minify(sql, {compress: opt.compress});\r\n            }\r\n            if (opt.params !== undefined) {\r\n                sql = $npm.format(sql, opt.params, {partial: true});\r\n            }\r\n            if (opt.minify && after) {\r\n                sql = $npm.minify(sql, {compress: opt.compress});\r\n            }\r\n            ready = true;\r\n            error = undefined;\r\n        } catch (e) {\r\n            sql = undefined;\r\n            error = new $npm.QueryFileError(e, this);\r\n            if (throwErrors) {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @name QueryFile#query\r\n     * @type {string}\r\n     * @default undefined\r\n     * @readonly\r\n     * @summary Prepared query string.\r\n     * @description\r\n     * When property {@link QueryFile#error error} is set, the query is `undefined`.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    Object.defineProperty(this, 'query', {\r\n        get: function () {\r\n            return sql;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name QueryFile#error\r\n     * @type {errors.QueryFileError}\r\n     * @default undefined\r\n     * @readonly\r\n     * @description\r\n     * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    Object.defineProperty(this, 'error', {\r\n        get: function () {\r\n            return error;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name QueryFile#file\r\n     * @type {string}\r\n     * @readonly\r\n     * @description\r\n     * File name that was passed into the constructor.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    Object.defineProperty(this, 'file', {\r\n        get: function () {\r\n            return file;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name QueryFile#options\r\n     * @type {QueryFile.Options}\r\n     * @readonly\r\n     * @description\r\n     * Set of options, as configured during the object's construction.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    Object.defineProperty(this, 'options', {\r\n        get: function () {\r\n            return opt;\r\n        }\r\n    });\r\n\r\n    this.prepare();\r\n}\r\n\r\n/**\r\n * @method QueryFile.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryFile.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap = $npm.utils.messageGap(level + 1);\r\n    var lines = [\r\n        'QueryFile {'\r\n    ];\r\n    this.prepare();\r\n    lines.push(gap + 'file: \"' + this.file + '\"');\r\n    lines.push(gap + 'options: ' + JSON.stringify(this.options));\r\n    if (this.error) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    } else {\r\n        lines.push(gap + 'query: \"' + this.query + '\"');\r\n    }\r\n    lines.push($npm.utils.messageGap(level) + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nQueryFile.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = QueryFile;\r\n\r\n/**\r\n * @typedef QueryFile.Options\r\n * @description\r\n * A set of configuration options as passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {boolean} debug\r\n * When in debug mode, the query file is checked for its last modification time on every query request,\r\n * so if it changes, the file is read afresh.\r\n *\r\n * The default for this property is `true` when `NODE_ENV` = `development`,\r\n * or `false` otherwise.\r\n *\r\n * @property {boolean|string} minify=false\r\n * Parses and minifies the SQL using $[pg-minify]:\r\n * - `false` - do not use $[pg-minify]\r\n * - `true` - use $[pg-minify] to parse and minify SQL\r\n * - `'after'` - use $[pg-minify] after applying static formatting parameters\r\n *   (option `params`), as opposed to before it (default)\r\n *\r\n * If option `compress` is set, then the default for `minify` is `true`.\r\n *\r\n * Failure to parse SQL will result in $[SQLParsingError].\r\n *\r\n * @property {boolean} compress=false\r\n * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:\r\n * - `false` - no compression to be applied, keep minimum spaces for easier read\r\n * - `true` - remove all unnecessary spaces from SQL\r\n *\r\n * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not\r\n * specified and `compress` is specified as `true`, then `minify` defaults to `true`.\r\n *\r\n * @property {array|object|value} params\r\n *\r\n * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},\r\n * but with option `partial` = `true`.\r\n *\r\n * Most of the time query formatting is fully dynamic, and applied just before executing the query.\r\n * In some cases though you may need to pre-format SQL with static values. Examples of it can be a\r\n * schema name, or a configurable table name.\r\n *\r\n * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then\r\n * apply the second-step dynamic formatting when executing the query.\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/queryFile.js\n// module id = 76\n// module chunks = 0","var defaults = module.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n\n  //database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  //name of database to connect\n  database: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  //database user's password\n  password: null,\n\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString : undefined,\n\n  //database port\n  port: 5432,\n\n  //number of rows to return at a time from a prepared statement's\n  //portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  //Connection pool options - see https://github.com/coopernurse/node-pool\n  //number of connections to use in connection pool\n  //0 will disable connection pooling\n  poolSize: 10,\n\n  //max milliseconds a client can go unused before it is removed\n  //from the pool and destroyed\n  poolIdleTimeout: 30000,\n\n  //frequency to check for idle clients within the client pool\n  reapIntervalMillis: 1000,\n\n  //if true the most recently released resources will be the first to be allocated\n  returnToHead: false,\n\n  //pool log function / boolean\n  poolLog: false,\n\n  client_encoding: \"\",\n\n  ssl: false,\n\n  application_name: undefined,\n  fallback_application_name: undefined,\n\n  parseInputDatesAsUTC: false\n};\n\n//parse int8 so you can get your count values as actual numbers\nmodule.exports.__defineSetter__(\"parseInt8\", function(val) {\n  require('pg-types').setTypeParser(20, 'text', val ? parseInt : function(val) { return val; });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/defaults.js\n// module id = 77\n// module chunks = 0","'use strict';\r\n\r\nvar Writer = require('./writer');\r\n\r\nfunction getLocal() {\r\n    return new Writer();\r\n}\r\n\r\nvar glb = new Writer();\r\n\r\nfunction getGlobal() {\r\n    console.log = function () {\r\n        glb.log.apply(glb, arguments);\r\n    };\r\n    console.error = function () {\r\n        glb.error.apply(glb, arguments);\r\n    };\r\n    console.warn = function () {\r\n        glb.warn.apply(glb, arguments);\r\n    };\r\n    console.info = function () {\r\n        glb.info.apply(glb, arguments);\r\n    };\r\n    console.success = function () {\r\n        glb.success.apply(glb, arguments);\r\n    };\r\n\r\n    return glb;\r\n}\r\n\r\nvar exp = module.exports = new Writer(true);\r\n\r\nObject.defineProperty(exp, 'local', {\r\n    get: getLocal,\r\n    enumerable: true\r\n});\r\n\r\nObject.defineProperty(exp, 'global', {\r\n    get: getGlobal,\r\n    enumerable: true\r\n});\r\n\r\nObject.freeze(exp);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/manakin/lib/index.js\n// module id = 78\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    qResult: require('./queryResult'),\r\n    qFile: require('./queryFile'),\r\n    prepared: require('./prepared'),\r\n    paramQuery: require('./paramQuery')\r\n};\r\n\r\n/**\r\n * @namespace errors\r\n * @description\r\n * Error types namespace, available as `pgp.errors`, before and after initializing the library.\r\n *\r\n * @property {function} PreparedStatementError\r\n * {@link errors.PreparedStatementError PreparedStatementError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link PreparedStatement}.\r\n *\r\n * @property {function} ParameterizedQueryError\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link ParameterizedQuery}.\r\n *\r\n * @property {function} QueryFileError\r\n * {@link errors.QueryFileError QueryFileError} class constructor.\r\n *\r\n * Represents all errors that can be reported by class {@link QueryFile}.\r\n *\r\n * @property {function} QueryResultError\r\n * {@link errors.QueryResultError QueryResultError} class constructor.\r\n *\r\n * Represents all result-specific errors from query methods.\r\n *\r\n * @property {errors.queryResultErrorCode} queryResultErrorCode\r\n * Error codes `enum` used by class {@link errors.QueryResultError QueryResultError}.\r\n *\r\n */\r\n\r\nmodule.exports = {\r\n    QueryResultError: $npm.qResult.QueryResultError,\r\n    queryResultErrorCode: $npm.qResult.queryResultErrorCode,\r\n    PreparedStatementError: $npm.prepared,\r\n    ParameterizedQueryError: $npm.paramQuery,\r\n    QueryFileError: $npm.qFile\r\n};\r\n\r\nObject.freeze(module.exports);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/errors/index.js\n// module id = 79\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    minify: require('pg-minify')\r\n};\r\n\r\n/**\r\n * @interface errors.QueryFileError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.QueryFileError QueryFileError} interface, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors related to {@link QueryFile}.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryFileError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {string} file\r\n * File path/name that was passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {object} options\r\n * Set of options that was used by the {@link QueryFile} object.\r\n *\r\n * @property {SQLParsingError} error\r\n * Internal $[SQLParsingError] object.\r\n *\r\n * It is set only when the error was thrown by $[pg-minify] while parsing the SQL file.\r\n *\r\n * @see QueryFile\r\n *\r\n */\r\nfunction QueryFileError(error, qf) {\r\n    var temp = Error.apply(this, arguments);\r\n    temp.name = this.name = 'QueryFileError';\r\n    this.stack = temp.stack;\r\n    if (error instanceof $npm.minify.SQLParsingError) {\r\n        this.error = error;\r\n        this.message = \"Failed to parse the SQL.\";\r\n    } else {\r\n        this.message = error.message;\r\n    }\r\n    this.file = qf.file;\r\n    this.options = qf.options;\r\n}\r\n\r\nQueryFileError.prototype = Object.create(Error.prototype, {\r\n    constructor: {\r\n        value: QueryFileError,\r\n        writable: true,\r\n        configurable: true\r\n    }\r\n});\r\n\r\n/**\r\n * @method errors.QueryFileError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryFileError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'QueryFileError {',\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'options: ' + JSON.stringify(this.options),\r\n            gap1 + 'file: \"' + this.file + '\"'\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nQueryFileError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = QueryFileError;\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/errors/queryFile.js\n// module id = 80\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    utils: require('../utils'),\r\n    formatting: require('../formatting')\r\n};\r\n\r\n/**\r\n * @class helpers.TableName\r\n * @description\r\n *\r\n * **Alternative Syntax:** `TableName({table, [schema]})` &#8658; {@link helpers.TableName}\r\n *\r\n * Prepares and escapes a full table name that can be injected into queries directly.\r\n *\r\n * This is a read-only type that can be used wherever parameter `table` is supported.\r\n *\r\n * It supports $[Custom Type Formatting], which means you can use the type directly as a formatting\r\n * parameter, without specifying any escaping.\r\n *\r\n * @param {String|Object} table\r\n * Table name details, depending on the type:\r\n *\r\n * - table name, if `table` is a string\r\n * - object `{table, [schema]}`\r\n *\r\n * @param {string} [schema]\r\n * Database schema name.\r\n *\r\n * When `table` is passed in as `{table, [schema]}`, this parameter is ignored.\r\n *\r\n * @property {string} name\r\n * Formatted/escaped full table name, based on properties `schema` + `table`.\r\n *\r\n * @property {string} table\r\n * Table name.\r\n *\r\n * @property {string} schema\r\n * Database schema name.\r\n *\r\n * It is `undefined` when no schema was specified (or if it was an empty string).\r\n *\r\n * @returns {helpers.TableName}\r\n *\r\n * @example\r\n *\r\n * var table = new pgp.helpers.TableName('my-table', 'my-schema');\r\n * console.log(table);\r\n * //=> \"my-schema\".\"my-table\"\r\n *\r\n * // Formatting the type directly:\r\n * pgp.as.format(\"SELECT * FROM $1\", table);\r\n * //=> SELECT * FROM \"my-schema\".\"my-table\"\r\n *\r\n */\r\nfunction TableName(table, schema) {\r\n\r\n    if (!(this instanceof TableName)) {\r\n        return new TableName(table, schema);\r\n    }\r\n\r\n    if (table && typeof table === 'object' && 'table' in table) {\r\n        schema = table.schema;\r\n        table = table.table;\r\n    }\r\n\r\n    if (!$npm.utils.isText(table)) {\r\n        throw new TypeError(\"Table name must be a non-empty text string.\");\r\n    }\r\n\r\n    if (!$npm.utils.isNull(schema)) {\r\n        if (typeof schema !== 'string') {\r\n            throw new TypeError(\"Invalid schema name.\");\r\n        }\r\n        if (schema.length > 0) {\r\n            this.schema = schema;\r\n        }\r\n    }\r\n\r\n    this.table = table;\r\n    this.name = $npm.formatting.as.name(table);\r\n\r\n    if (this.schema) {\r\n        this.name = $npm.formatting.as.name(schema) + '.' + this.name;\r\n    }\r\n\r\n    this._rawDBType = true;\r\n\r\n    Object.freeze(this);\r\n}\r\n\r\nTableName.prototype.formatDBType = function () {\r\n    return this.name;\r\n};\r\n\r\n/**\r\n * @method helpers.TableName.toString\r\n * @description\r\n * Creates a well-formatted string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @returns {string}\r\n */\r\nTableName.prototype.toString = function () {\r\n    return this.name;\r\n};\r\n\r\nTableName.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = TableName;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/tableName.js\n// module id = 81\n// module chunks = 0","'use strict';\r\n\r\nvar stream = require('stream');\r\nvar util = require('util');\r\n\r\n/////////////////////////////////////\r\n// Checks if the value is a promise;\r\nfunction isPromise(value) {\r\n    return value && typeof value.then === 'function';\r\n}\r\n\r\n////////////////////////////////////////////\r\n// Checks object for being a readable stream;\r\n\r\nfunction isReadableStream(obj) {\r\n    return obj instanceof stream.Stream &&\r\n        typeof obj._read === 'function' &&\r\n        typeof obj._readableState === 'object';\r\n}\r\n\r\n////////////////////////////////////////////////////////////\r\n// Sets an object property as read-only and non-enumerable.\r\nfunction extend(obj, name, value) {\r\n    Object.defineProperty(obj, name, {\r\n        value: value,\r\n        configurable: false,\r\n        enumerable: false,\r\n        writable: false\r\n    });\r\n}\r\n\r\n///////////////////////////////////////////\r\n// Returns a space gap for console output;\r\nfunction messageGap(level) {\r\n    return Array(1 + level * 4).join(' ');\r\n}\r\n\r\nfunction formatError(error, level) {\r\n    var names = ['BatchError', 'PageError', 'SequenceError'];\r\n    var msg = util.inspect(error);\r\n    if (error instanceof Error) {\r\n        if (names.indexOf(error.name) === -1) {\r\n            var gap = messageGap(level);\r\n            msg = msg.split('\\n').map(function (line, index) {\r\n                return (index ? gap : '') + line;\r\n            }).join('\\n');\r\n        } else {\r\n            msg = error.toString(level);\r\n        }\r\n    }\r\n    return msg;\r\n}\r\n\r\nmodule.exports = {\r\n    formatError: formatError,\r\n    isPromise: isPromise,\r\n    isReadableStream: isReadableStream,\r\n    messageGap: messageGap,\r\n    extend: extend\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/utils/static.js\n// module id = 82\n// module chunks = 0","'use strict';\r\n\r\nvar parser = require('./parser');\r\nvar error = require('./error');\r\n\r\nparser.minify.SQLParsingError = error.SQLParsingError;\r\nparser.minify.parsingErrorCode = error.parsingErrorCode;\r\n\r\nmodule.exports = parser.minify;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-minify/lib/index.js\n// module id = 83\n// module chunks = 0","'use strict';\r\n\r\n/**\r\n * @enum {number}\r\n * @alias queryResult\r\n * @readonly\r\n * @description\r\n * _Query Result Mask._\r\n *\r\n * Binary mask that represents the result expected from queries.\r\n * It is used in the generic {@link Database.query query} method,\r\n * as well as method {@link Database.func func}.\r\n *\r\n * The mask is always the last optional parameter, which defaults to `queryResult.any`.\r\n *\r\n * Any combination of flags is supported, except for `one + many`.\r\n *\r\n * The type is available from the library's root: `pgp.queryResult`.\r\n *\r\n * @see {@link Database.query}, {@link Database.func}\r\n */\r\nvar queryResult = {\r\n    /** Single row is expected. */\r\n    one: 1,\r\n    /** One or more rows expected. */\r\n    many: 2,\r\n    /** Expecting no rows. */\r\n    none: 4,\r\n    /** `many|none` - any result is expected. */\r\n    any: 6\r\n};\r\n\r\nObject.freeze(queryResult);\r\n\r\nmodule.exports = queryResult;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/result.js\n// module id = 84\n// module chunks = 0","var defaults = require('./defaults');\n\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString(val) {\n  var result = '{';\n  for (var i = 0 ; i < val.length; i++) {\n    if(i > 0) {\n      result = result + ',';\n    }\n    if(val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL';\n    }\n    else if(Array.isArray(val[i])) {\n      result = result + arrayString(val[i]);\n    }\n    else\n    {\n      result = result + JSON.stringify(prepareValue(val[i]));\n    }\n  }\n  result = result + '}';\n  return result;\n}\n\n//converts values from javascript types\n//to their 'raw' counterparts for use as a postgres parameter\n//note: you can override this function to provide your own conversion mechanism\n//for complex types, etc...\nvar prepareValue = function(val, seen) {\n  if (val instanceof Buffer) {\n    return val;\n  }\n  if(val instanceof Date) {\n    if(defaults.parseInputDatesAsUTC) {\n      return dateToStringUTC(val);\n    } else {\n      return dateToString(val);\n    }\n  }\n  if(Array.isArray(val)) {\n    return arrayString(val);\n  }\n  if(val === null || typeof val === 'undefined') {\n    return null;\n  }\n  if(typeof val === 'object') {\n    return prepareObject(val, seen);\n  }\n  if (typeof val === 'undefined') {\n    throw new Error('SQL queries with undefined where clause option');\n  }\n  return val.toString();\n};\n\nfunction prepareObject(val, seen) {\n  if(val.toPostgres && typeof val.toPostgres === 'function') {\n    seen = seen || [];\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query');\n    }\n    seen.push(val);\n\n    return prepareValue(val.toPostgres(prepareValue), seen);\n  }\n  return JSON.stringify(val);\n}\n\nfunction pad(number, digits) {\n  number = \"\"  +number;\n  while(number.length < digits)\n    number = \"0\" + number;\n  return number;\n}\n\nfunction dateToString(date) {\n\n  var offset = -date.getTimezoneOffset();\n  var ret = pad(date.getFullYear(), 4) + '-' +\n    pad(date.getMonth() + 1, 2) + '-' +\n    pad(date.getDate(), 2) + 'T' +\n    pad(date.getHours(), 2) + ':' +\n    pad(date.getMinutes(), 2) + ':' +\n    pad(date.getSeconds(), 2) + '.' +\n    pad(date.getMilliseconds(), 3);\n\n  if(offset < 0) {\n    ret += \"-\";\n    offset *= -1;\n  }\n  else\n    ret += \"+\";\n\n  return ret + pad(Math.floor(offset/60), 2) + \":\" + pad(offset%60, 2);\n}\n\nfunction dateToStringUTC(date) {\n  \n  var ret = pad(date.getUTCFullYear(), 4) + '-' +\n      pad(date.getUTCMonth() + 1, 2) + '-' +\n      pad(date.getUTCDate(), 2) + 'T' +\n      pad(date.getUTCHours(), 2) + ':' +\n      pad(date.getUTCMinutes(), 2) + ':' +\n      pad(date.getUTCSeconds(), 2) + '.' +\n      pad(date.getUTCMilliseconds(), 3);\n  \n  return ret + \"+00:00\";\n}\n\nfunction normalizeQueryConfig (config, values, callback) {\n  //can take in strings or config objects\n  config = (typeof(config) == 'string') ? { text: config } : config;\n  if(values) {\n    if(typeof values === 'function') {\n      config.callback = values;\n    } else {\n      config.values = values;\n    }\n  }\n  if(callback) {\n    config.callback = callback;\n  }\n  return config;\n}\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper (value) {\n    //this ensures that extra arguments do not get passed into prepareValue\n    //by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value);\n  },\n  normalizeQueryConfig: normalizeQueryConfig\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/utils.js\n// module id = 85\n// module chunks = 0","'use strict';\r\n\r\nvar EOL = require('os').EOL;\r\n\r\nvar parsingErrorCode = {\r\n    unclosedMLC: 0, // Unclosed multi-line comment.\r\n    unclosedText: 1, // Unclosed text block.\r\n    unclosedQI: 2, // Unclosed quoted identifier.\r\n    multiLineQI: 3 // Multi-line quoted identifiers are not supported.\r\n};\r\n\r\nObject.freeze(parsingErrorCode);\r\n\r\nvar errorMessages = [\r\n    {name: \"unclosedMLC\", message: \"Unclosed multi-line comment.\"},\r\n    {name: \"unclosedText\", message: \"Unclosed text block.\"},\r\n    {name: \"unclosedQI\", message: \"Unclosed quoted identifier.\"},\r\n    {name: \"multiLineQI\", message: \"Multi-line quoted identifiers are not supported.\"}\r\n];\r\n\r\nfunction SQLParsingError(code, position) {\r\n    var temp = Error.apply(this, arguments);\r\n    temp.name = this.name = 'SQLParsingError';\r\n    this.stack = temp.stack;\r\n    this.code = code; // one of parsingErrorCode values;\r\n    this.error = errorMessages[code].message;\r\n    this.position = position; // Error position in the text: {line, column}\r\n    this.message = \"Error parsing SQL at {line:\" + position.line + \",col:\" + position.column + \"}: \" + this.error;\r\n}\r\n\r\nSQLParsingError.prototype = Object.create(Error.prototype, {\r\n    constructor: {\r\n        value: SQLParsingError,\r\n        writable: true,\r\n        configurable: true\r\n    }\r\n});\r\n\r\nSQLParsingError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap = messageGap(level + 1);\r\n    var lines = [\r\n        'SQLParsingError {',\r\n        gap + 'code: parsingErrorCode.' + errorMessages[this.code].name,\r\n        gap + 'error: \"' + this.error + '\"',\r\n        gap + 'position: {line: ' + this.position.line + \", col: \" + this.position.column + '}',\r\n        messageGap(level) + '}'\r\n    ];\r\n    return lines.join(EOL);\r\n};\r\n\r\nfunction messageGap(level) {\r\n    return Array(1 + level * 4).join(' ');\r\n}\r\n\r\nSQLParsingError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = {\r\n    SQLParsingError: SQLParsingError,\r\n    parsingErrorCode: parsingErrorCode\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-minify/lib/error.js\n// module id = 86\n// module chunks = 0","'use strict';\r\n\r\n/**\r\n * @constructor PromiseAdapter\r\n * @summary Adapter for the primary promise operations.\r\n * @description\r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * The type is available from the library's root: `pgp.PromiseAdapter`.\r\n *\r\n * @param {function} create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`\r\n *\r\n * @param {function} resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`\r\n *\r\n * @param {function} reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`\r\n *\r\n * @returns {PromiseAdapter}\r\n */\r\nfunction PromiseAdapter(create, resolve, reject) {\r\n\r\n    if (!(this instanceof PromiseAdapter)) {\r\n        return new PromiseAdapter(create, resolve, reject);\r\n    }\r\n\r\n    this.create = create;\r\n    this.resolve = resolve;\r\n    this.reject = reject;\r\n\r\n    if (typeof create !== 'function') {\r\n        throw new TypeError('Adapter requires a function to create a promise.');\r\n    }\r\n\r\n    if (typeof resolve !== 'function') {\r\n        throw new TypeError('Adapter requires a function to resolve a promise.');\r\n    }\r\n\r\n    if (typeof reject !== 'function') {\r\n        throw new TypeError('Adapter requires a function to reject a promise.');\r\n    }\r\n}\r\n\r\nmodule.exports = PromiseAdapter;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/adapter.js\n// module id = 87\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    formatting: require('../formatting')\r\n};\r\n\r\n/**\r\n *\r\n * @class helpers.Column\r\n * @description\r\n *\r\n * It is a read-only structure that contains details for a single column, to be primarily used by {@link helpers.ColumnSet ColumnSet}.\r\n *\r\n * The class parses and validates all the details, and prepares them for high-performance query generation.\r\n *\r\n * @param {String|helpers.ColumnConfig} col\r\n * Column details, depending on the type.\r\n *\r\n * When it is a string, it is expected to contain a name for both the column and the source property, assuming that the two are the same.\r\n * The name must adhere to JavaScript syntax for variable names. The name can be appended with any format modifier as supported by\r\n * {@link formatting.format as.format} (`^`, `~`, `#`, `:csv`, `:json`, `:name`, `:raw`, `:value`), which is then removed from the name and put\r\n * into property `mod`. If the name starts with `?`, it is removed, while setting flag `cnd` = `true`.\r\n *\r\n * If the string doesn't adhere to the above requirements, the method will throw {@link external:TypeError TypeError} = `Invalid column syntax`.\r\n *\r\n * When `col` is a simple {@link helpers.ColumnConfig ColumnConfig}-like object, it is used as an input configurator to set all the properties\r\n * of the class.\r\n *\r\n * @property {string} name\r\n * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,\r\n * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any string.\r\n *\r\n * @property {string} [prop]\r\n * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables.\r\n *\r\n * It is ignored when it is the same as `name`.\r\n *\r\n * @property {string} [mod]\r\n * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:json`, `:name`, `:raw`, `:value`.\r\n *\r\n * @property {string} [cast]\r\n * Server-side type casting, without `::` in front.\r\n *\r\n * @property {boolean} [cnd]\r\n * Conditional column flag.\r\n *\r\n * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and\r\n * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated.\r\n *\r\n * It can be set from a string initialization, by adding `?` in front of the name.\r\n *\r\n * @property {} [def]\r\n * Default value for the property, to be used only when the source object doesn't have the property.\r\n * It is ignored when property `init` is set.\r\n *\r\n * @property {helpers.initCB} [init]\r\n * Override callback for the value.\r\n *\r\n * @property {helpers.skipCB} [skip]\r\n * An override for skipping columns dynamically.\r\n *\r\n * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods\r\n * {@link helpers.insert insert} and {@link helpers.values values}.\r\n *\r\n * It is also ignored when conditional flag `cnd` is set.\r\n *\r\n * @returns {helpers.Column}\r\n *\r\n * @see {@link helpers.ColumnConfig ColumnConfig}\r\n *\r\n * @example\r\n *\r\n * var pgp = require('pg-promise')({\r\n *     capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * var Column = pgp.helpers.Column;\r\n *\r\n * // creating a column from just a name:\r\n * var col1 = new Column('colName');\r\n * console.log(col1);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * // }\r\n *\r\n * // creating a column from a name + modifier:\r\n * var col2 = new Column('colName:csv');\r\n * console.log(col2);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * //    mod: \":csv\"\r\n * // }\r\n *\r\n * // creating a column from a configurator:\r\n * var col3 = new Column({\r\n *     name: 'colName', // required\r\n *     prop: 'propName', // optional\r\n *     mod: '^', // optional\r\n *     def: 123 // optional\r\n * });\r\n * console.log(col3);\r\n * //=>\r\n * // Column {\r\n * //    name: \"colName\"\r\n * //    prop: \"propName\"\r\n * //    mod: \"^\"\r\n * //    def: 123\r\n * // }\r\n *\r\n */\r\nfunction Column(col) {\r\n\r\n    if (!(this instanceof Column)) {\r\n        return new Column(col);\r\n    }\r\n\r\n    if (typeof col === 'string') {\r\n        var info = parseColumn(col);\r\n        this.name = info.name;\r\n        if ('mod' in info) {\r\n            this.mod = info.mod;\r\n        }\r\n        if ('cnd' in info) {\r\n            this.cnd = info.cnd;\r\n        }\r\n    } else {\r\n        if (col && typeof col === 'object' && 'name' in col) {\r\n            if (!$npm.utils.isText(col.name)) {\r\n                throw new TypeError(\"Invalid 'name' value: \" + JSON.stringify(col.name) + \". A non-empty string was expected.\");\r\n            }\r\n            if ($npm.utils.isNull(col.prop) && !isValidVariable(col.name)) {\r\n                throw new TypeError(\"Invalid 'name' syntax: \" + JSON.stringify(col.name) + \". A valid variable name was expected.\");\r\n            }\r\n            this.name = col.name; // column name + property name (if 'prop' isn't specified)\r\n\r\n            if (!$npm.utils.isNull(col.prop)) {\r\n                if (!$npm.utils.isText(col.prop)) {\r\n                    throw new TypeError(\"Invalid 'prop' value: \" + JSON.stringify(col.prop) + \". A non-empty string was expected.\");\r\n                }\r\n                if (!isValidVariable(col.prop)) {\r\n                    throw new TypeError(\"Invalid 'prop' syntax: \" + JSON.stringify(col.prop) + \". A valid variable name was expected.\");\r\n                }\r\n                if (col.prop !== col.name) {\r\n                    // optional property name, if different from the column's name;\r\n                    this.prop = col.prop;\r\n                }\r\n            }\r\n            if (!$npm.utils.isNull(col.mod)) {\r\n                if (typeof col.mod !== 'string' || !isValidMod(col.mod)) {\r\n                    throw new TypeError(\"Invalid 'mod' value: \" + JSON.stringify(col.mod) + \".\");\r\n                }\r\n                this.mod = col.mod; // optional format modifier;\r\n            }\r\n            if (!$npm.utils.isNull(col.cast)) {\r\n                this.cast = parseCast(col.cast); // optional SQL type casting\r\n            }\r\n            if ('cnd' in col) {\r\n                this.cnd = !!col.cnd;\r\n            }\r\n            if ('def' in col) {\r\n                this.def = col.def; // optional default\r\n            }\r\n            if (typeof col.init === 'function') {\r\n                this.init = col.init; // optional value override (overrides 'def' also)\r\n            }\r\n            if (typeof col.skip === 'function') {\r\n                this.skip = col.skip;\r\n            }\r\n        } else {\r\n            throw new TypeError(\"Invalid column details.\");\r\n        }\r\n    }\r\n\r\n    var variable = '${' + (this.prop || this.name) + (this.mod || '') + '}',\r\n        castText = this.cast ? ('::' + this.cast) : '',\r\n        escapedName = $npm.formatting.as.name(this.name);\r\n\r\n    Object.defineProperty(this, 'variable', {\r\n        enumerable: false,\r\n        value: variable\r\n    });\r\n\r\n    Object.defineProperty(this, 'castText', {\r\n        enumerable: false,\r\n        value: castText\r\n    });\r\n\r\n    Object.defineProperty(this, 'escapedName', {\r\n        enumerable: false,\r\n        value: escapedName\r\n    });\r\n\r\n    Object.freeze(this);\r\n}\r\n\r\nfunction parseCast(name) {\r\n    if (typeof name === 'string') {\r\n        var s = name.replace(/^[:\\s]*|\\s*$/g, '');\r\n        if (s) {\r\n            return s;\r\n        }\r\n    }\r\n    throw new TypeError(\"Invalid 'cast' value: \" + JSON.stringify(name) + \".\");\r\n}\r\n\r\nfunction parseColumn(name) {\r\n    var m = name.match(/\\??[a-zA-Z0-9\\$_]+(\\^|~|#|:raw|:name|:json|:csv|:value)?/);\r\n    if (m && m[0] === name) {\r\n        var res = {};\r\n        if (name[0] === '?') {\r\n            res.cnd = true;\r\n            name = name.substr(1);\r\n        }\r\n        var mod = name.match(/\\^|~|#|:raw|:name|:json|:csv|:value/);\r\n        if (mod) {\r\n            res.name = name.substr(0, mod.index);\r\n            res.mod = mod[0];\r\n        } else {\r\n            res.name = name;\r\n        }\r\n        return res;\r\n    }\r\n    throw new TypeError(\"Invalid column syntax: \" + JSON.stringify(name) + \".\");\r\n}\r\n\r\nfunction isValidMod(mod) {\r\n    var values = ['^', '~', '#', ':raw', ':name', ':json', ':csv', ':value'];\r\n    return values.indexOf(mod) !== -1;\r\n}\r\n\r\nfunction isValidVariable(name) {\r\n    var m = name.match(/^[0-9]+|[a-zA-Z0-9\\$_]+/);\r\n    return !!m && m[0] === name;\r\n}\r\n\r\n/**\r\n * @method helpers.Column.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nColumn.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            gap0 + 'Column {',\r\n            gap1 + 'name: ' + JSON.stringify(this.name)\r\n        ];\r\n    if ('prop' in this) {\r\n        lines.push(gap1 + 'prop: ' + JSON.stringify(this.prop));\r\n    }\r\n    if ('mod' in this) {\r\n        lines.push(gap1 + 'mod: ' + JSON.stringify(this.mod));\r\n    }\r\n    if ('cast' in this) {\r\n        lines.push(gap1 + 'cast: ' + JSON.stringify(this.cast));\r\n    }\r\n    if ('cnd' in this) {\r\n        lines.push(gap1 + 'cnd: ' + JSON.stringify(this.cnd));\r\n    }\r\n    if ('def' in this) {\r\n        lines.push(gap1 + 'def: ' + JSON.stringify(this.def));\r\n    }\r\n    if ('init' in this) {\r\n        lines.push(gap1 + 'init: [Function]');\r\n    }\r\n    if ('skip' in this) {\r\n        lines.push(gap1 + 'skip: [Function]');\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nColumn.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\n/**\r\n * @typedef helpers.ColumnConfig\r\n * @description\r\n * A simple structure with column details, to be passed into the {@link helpers.Column Column} constructor for initialization.\r\n *\r\n * @property {string} name\r\n * Destination column name + source property name (if `prop` is skipped). The name must adhere to JavaScript syntax for variables,\r\n * unless `prop` is specified, in which case `name` represents only the column name, and therefore can be any string.\r\n *\r\n * @property {string} [prop]\r\n * Source property name, if different from the column's name. It must adhere to JavaScript syntax for variables.\r\n *\r\n * It is ignored when it is the same as `name`.\r\n *\r\n * @property {string} [mod]\r\n * Formatting modifier, as supported by method {@link formatting.format as.format}: `^`, `~`, `#`, `:csv`, `:json`, `:name`, `:raw`, `:value`.\r\n *\r\n * @property {string} [cast]\r\n * Server-side type casting. Leading `::` is allowed, but not needed (automatically removed when specified).\r\n *\r\n * @property {boolean} [cnd]\r\n * Conditional column flag.\r\n *\r\n * Used by methods {@link helpers.update update} and {@link helpers.sets sets}, ignored by methods {@link helpers.insert insert} and\r\n * {@link helpers.values values}. It indicates that the column is reserved for a `WHERE` condition, not to be set or updated.\r\n *\r\n * It can be set from a string initialization, by adding `?` in front of the name.\r\n *\r\n * @property {} [def]\r\n * Default value for the property, to be used only when the source object doesn't have the property.\r\n * It is ignored when property `init` is set.\r\n *\r\n * @property {helpers.initCB} [init]\r\n * Override callback for the value.\r\n *\r\n * @property {helpers.skipCB} [skip]\r\n * An override for skipping columns dynamically.\r\n *\r\n * Used by methods {@link helpers.update update} (for a single object) and {@link helpers.sets sets}, ignored by methods\r\n * {@link helpers.insert insert} and {@link helpers.values values}.\r\n *\r\n * It is also ignored when conditional flag `cnd` is set.\r\n *\r\n */\r\n\r\n/**\r\n * @callback helpers.initCB\r\n * @description\r\n * A callback function type used by parameter `init` within {@link helpers.ColumnConfig ColumnConfig}.\r\n *\r\n * It works as an override for the corresponding property value in the `source` object.\r\n *\r\n * The function is called with `this` set to the `source` object.\r\n *\r\n * @param {} col\r\n * Column-to-property descriptor.\r\n *\r\n * @param {object} col.source\r\n * The source object, equals to `this` that's passed into the function.\r\n *\r\n * @param {string} col.name\r\n * Name of the property within the `source` object.\r\n *\r\n * @param {} col.value\r\n *\r\n * Property value, set to one of the following:\r\n *\r\n * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists\r\n * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`\r\n * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`\r\n *\r\n * @param {boolean} col.exists\r\n * Indicates whether the property exists in the `source` object (`exists = name in source`).\r\n *\r\n * @returns {}\r\n * The new value to be used for the corresponding column.\r\n */\r\n\r\n/**\r\n * @callback helpers.skipCB\r\n * @description\r\n * A callback function type used by parameter `skip` within {@link helpers.ColumnConfig ColumnConfig}.\r\n *\r\n * It is to dynamically determine when the property with specified `name` in the `source` object is to be skipped.\r\n *\r\n * The function is called with `this` set to the `source` object.\r\n *\r\n * @param {} col\r\n * Column-to-property descriptor.\r\n *\r\n * @param {object} col.source\r\n * The source object, equals to `this` that's passed into the function.\r\n *\r\n * @param {string} col.name\r\n * Name of the property within the `source` object.\r\n *\r\n * @param {} col.value\r\n *\r\n * Property value, set to one of the following:\r\n *\r\n * - Value of the property within the `source` object (`value` = `source[name]`), if the property exists\r\n * - If the property doesn't exist and `def` is set in the column, then `value` is set to the value of `def`\r\n * - If the property doesn't exist and `def` is not set in the column, then `value` is set to `undefined`\r\n *\r\n * @param {boolean} col.exists\r\n * Indicates whether the property exists in the `source` object (`exists = name in source`).\r\n *\r\n * @returns {boolean}\r\n * A truthy value that indicates whether the column is to be skipped.\r\n *\r\n */\r\n\r\nmodule.exports = Column;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/column.js\n// module id = 88\n// module chunks = 0","'use strict';\r\n\r\nvar nodeHighVer = +process.versions.node.split('.')[0];\r\n\r\n// istanbul ignore if\r\nif (nodeHighVer < 4) {\r\n\r\n    // Starting from pg-promise v5.6.0, the library no longer supports legacy\r\n    // Node.js versions 0.10 and 0.12, requiring Node.js 4.x as the minimum.\r\n\r\n    throw new Error('Minimum Node.js version required by pg-promise is 4.x');\r\n}\r\n\r\nmodule.exports = require('./main');\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/index.js\n// module id = 89\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    utils: require('./utils'),\r\n    special: require('./special'),\r\n    QueryFile: require('./queryFile'),\r\n    formatting: require('./formatting'),\r\n    result: require('./result'),\r\n    errors: require('./errors'),\r\n    events: require('./events'),\r\n    stream: require('./stream'),\r\n    types: require('./types')\r\n};\r\n\r\nvar QueryResultError = $npm.errors.QueryResultError,\r\n    InternalError = $npm.utils.InternalError,\r\n    ExternalQuery = $npm.types.ExternalQuery,\r\n    PreparedStatement = $npm.types.PreparedStatement,\r\n    ParameterizedQuery = $npm.types.ParameterizedQuery,\r\n    SpecialQuery = $npm.special.SpecialQuery,\r\n    qrec = $npm.errors.queryResultErrorCode;\r\n\r\nvar badMask = $npm.result.one | $npm.result.many; // the combination isn't supported;\r\n\r\n//////////////////////////////\r\n// Generic query method;\r\nfunction $query(ctx, query, values, qrm, config) {\r\n\r\n    var isResult, $p = config.promise;\r\n\r\n    if (qrm instanceof SpecialQuery) {\r\n        if (qrm.isStream) {\r\n            return $npm.stream.call(this, ctx, query, values, config);\r\n        }\r\n        isResult = qrm.isResult;\r\n    }\r\n\r\n    var error, isFunc,\r\n        opt = ctx.options,\r\n        pgFormatting = opt.pgFormatting,\r\n        capSQL = opt.capSQL,\r\n        params = pgFormatting ? values : undefined;\r\n\r\n    if (!query) {\r\n        error = new TypeError(\"Empty or undefined query.\");\r\n    }\r\n\r\n    if (!error && typeof query === 'object') {\r\n        if (query instanceof $npm.QueryFile) {\r\n            query.prepare();\r\n            if (query.error) {\r\n                error = query.error;\r\n                query = query.file;\r\n            } else {\r\n                query = query.query;\r\n            }\r\n        } else {\r\n            if ('funcName' in query) {\r\n                isFunc = true;\r\n                query = query.funcName; // query is a function name;\r\n            } else {\r\n                if (query instanceof ExternalQuery) {\r\n                    pgFormatting = true;\r\n                } else {\r\n                    if ('name' in query) {\r\n                        query = new PreparedStatement(query);\r\n                        pgFormatting = true;\r\n                    } else {\r\n                        if ('text' in query) {\r\n                            query = new ParameterizedQuery(query);\r\n                            pgFormatting = true;\r\n                        }\r\n                    }\r\n                }\r\n                if (query instanceof ExternalQuery && !$npm.utils.isNull(values)) {\r\n                    query.values = values;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!error) {\r\n        if (!pgFormatting && !$npm.utils.isText(query)) {\r\n            error = new TypeError(isFunc ? \"Invalid function name.\" : \"Invalid query format.\");\r\n        }\r\n        if (query instanceof ExternalQuery) {\r\n            var qp = query.parse();\r\n            if (qp instanceof Error) {\r\n                error = qp;\r\n            } else {\r\n                query = qp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!error && !isResult) {\r\n        if ($npm.utils.isNull(qrm)) {\r\n            qrm = $npm.result.any; // default query result;\r\n        } else {\r\n            if (qrm !== parseInt(qrm) || (qrm & badMask) === badMask || qrm < 1 || qrm > 6) {\r\n                error = new TypeError(\"Invalid Query Result Mask specified.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!error && (!pgFormatting || isFunc)) {\r\n        try {\r\n            // use 'pg-promise' implementation of values formatting;\r\n            if (isFunc) {\r\n                query = $npm.formatting.formatFunction(query, values, capSQL);\r\n            } else {\r\n                query = $npm.formatting.formatQuery(query, values);\r\n            }\r\n        } catch (e) {\r\n            if (isFunc) {\r\n                var prefix = capSQL ? 'SELECT * FROM' : 'select * from';\r\n                query = prefix + ' ' + query + '(...)';\r\n            }\r\n            error = e instanceof Error ? e : new $npm.utils.InternalError(e);\r\n            params = values;\r\n        }\r\n    }\r\n\r\n    return $p(function (resolve, reject) {\r\n\r\n        if (notifyReject()) {\r\n            return;\r\n        }\r\n        error = $npm.events.query(opt, getContext());\r\n        if (notifyReject()) {\r\n            return;\r\n        }\r\n        var start = Date.now();\r\n        try {\r\n            ctx.db.client.query(query, params, function (err, result) {\r\n                var data;\r\n                if (!err) {\r\n                    $npm.utils.addReadProp(result, 'duration', Date.now() - start);\r\n                    $npm.utils.addReadProp(result.rows, 'duration', result.duration, true);\r\n                    if (result.rows.length) {\r\n                        err = $npm.events.receive(opt, result.rows, result, getContext());\r\n                        err = err || error;\r\n                    }\r\n                }\r\n                if (err) {\r\n                    error = err;\r\n                } else {\r\n                    if (isResult) {\r\n                        data = result; // raw object requested (Result type);\r\n                    } else {\r\n                        data = result.rows;\r\n                        var len = data.length;\r\n                        if (len) {\r\n                            if (len > 1 && qrm & $npm.result.one) {\r\n                                // one row was expected, but returned multiple;\r\n                                error = new QueryResultError(qrec.multiple, result, query, params);\r\n                            } else {\r\n                                if (!(qrm & ($npm.result.one | $npm.result.many))) {\r\n                                    // no data should have been returned;\r\n                                    error = new QueryResultError(qrec.notEmpty, result, query, params);\r\n                                } else {\r\n                                    if (!(qrm & $npm.result.many)) {\r\n                                        data = data[0];\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // no data returned;\r\n                            if (qrm & $npm.result.none) {\r\n                                if (qrm & $npm.result.one) {\r\n                                    data = null;\r\n                                } else {\r\n                                    data = qrm & $npm.result.many ? data : null;\r\n                                }\r\n                            } else {\r\n                                error = new QueryResultError(qrec.noData, result, query, params);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (!notifyReject()) {\r\n                    resolve(data);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            // this can only happen as a result of an internal failure within node-postgres,\r\n            // like during a sudden loss of communications, which is impossible to reproduce\r\n            // automatically, so removing it from the test coverage:\r\n            // istanbul ignore next\r\n            error = e;\r\n        }\r\n\r\n        function getContext() {\r\n            var client;\r\n            if (ctx.db) {\r\n                client = ctx.db.client;\r\n            } else {\r\n                error = new Error(\"Loose request outside an expired connection.\");\r\n            }\r\n            return {\r\n                client: client,\r\n                dc: ctx.dc,\r\n                query: query,\r\n                params: params,\r\n                ctx: ctx.ctx\r\n            };\r\n        }\r\n\r\n        notifyReject();\r\n\r\n        function notifyReject() {\r\n            var context = getContext();\r\n            if (error) {\r\n                if (error instanceof InternalError) {\r\n                    error = error.error;\r\n                }\r\n                $npm.events.error(opt, error, context);\r\n                reject(error);\r\n                return true;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (ctx, query, values, qrm) {\r\n        return $query.call(this, ctx, query, values, qrm, config);\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/query.js\n// module id = 90\n// module chunks = 0","'use strict';\r\n\r\n/////////////////////////////\r\n// Special Query type;\r\nfunction SpecialQuery(type) {\r\n    this.isStream = type === 'stream';\r\n    this.isResult = type === 'result';\r\n}\r\n\r\nvar cache = {\r\n    resultQuery: new SpecialQuery('result'),\r\n    streamQuery: new SpecialQuery('stream')\r\n};\r\n\r\nmodule.exports = {\r\n    SpecialQuery: SpecialQuery,\r\n    cache: cache\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/special.js\n// module id = 91\n// module chunks = 0","'use strict';\r\n\r\n/**\r\n * @enum {number}\r\n * @alias txMode.isolationLevel\r\n * @readonly\r\n * @summary Transaction Isolation Level.\r\n * @description\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @see $[Transaction Isolation]\r\n */\r\nvar isolationLevel = {\r\n    /** Isolation level not specified. */\r\n    none: 0,\r\n\r\n    /** ISOLATION LEVEL SERIALIZABLE */\r\n    serializable: 1,\r\n\r\n    /** ISOLATION LEVEL REPEATABLE READ */\r\n    repeatableRead: 2,\r\n\r\n    /** ISOLATION LEVEL READ COMMITTED */\r\n    readCommitted: 3\r\n\r\n    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n    // The SQL standard defines one additional level, READ UNCOMMITTED. In PostgreSQL READ UNCOMMITTED is treated as READ COMMITTED.\r\n    // => skipping `READ UNCOMMITTED`.\r\n};\r\n\r\nObject.freeze(isolationLevel);\r\n\r\n/**\r\n * @class txMode.TransactionMode\r\n * @description\r\n * **Alternative Syntax:** `TransactionMode({tiLevel, readOnly, deferrable})` &#8658; {@link TransactionMode}\r\n *\r\n * Constructs a complete transaction-opening command, based on the parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * The type is available from the {@link txMode} namespace.\r\n *\r\n * @param {isolationLevel|Object} [tiLevel]\r\n * Transaction Isolation Level, or an object with parameters, if the alternative\r\n * syntax is used.\r\n *\r\n * @param {boolean} [readOnly]\r\n * Sets transaction access mode based on the read-only flag:\r\n *  - `undefined` - access mode not specified (default)\r\n *  - `true` - access mode is set to `READ ONLY`\r\n *  - `false` - access mode is set to `READ WRITE`\r\n *\r\n * @param {boolean} [deferrable]\r\n * Sets transaction deferrable mode based on the boolean value:\r\n *  - `undefined` - deferrable mode not specified (default)\r\n *  - `true` - mode is set to `DEFERRABLE`\r\n *  - `false` - mode is set to `NOT DEFERRABLE`\r\n *\r\n * It is used only when `tiLevel`=`isolationLevel.serializable`\r\n * and `readOnly`=`true`, or else it is ignored.\r\n *\r\n * @returns {txMode.TransactionMode}\r\n *\r\n * @see $[BEGIN], {@link txMode.isolationLevel}\r\n *\r\n * @example\r\n *\r\n * var TransactionMode = pgp.txMode.TransactionMode;\r\n * var isolationLevel = pgp.txMode.isolationLevel;\r\n *\r\n * // Create a reusable transaction mode (serializable + read-only + deferrable):\r\n * var tmSRD = new TransactionMode({\r\n *     tiLevel: isolationLevel.serializable,\r\n *     readOnly: true,\r\n *     deferrable: true\r\n * });\r\n *\r\n * function myTransaction() {\r\n *     return this.query(\"SELECT * FROM table\");\r\n * }\r\n *\r\n * myTransaction.txMode = tmSRD; // assign transaction mode;\r\n *\r\n * db.tx(myTransaction)\r\n *     .then(function() {\r\n *         // success;\r\n *     });\r\n *\r\n * // Instead of the default BEGIN, such transaction will initiate with:\r\n *\r\n * // BEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\r\n *\r\n */\r\nfunction TransactionMode(tiLevel, readOnly, deferrable) {\r\n\r\n    if (!(this instanceof TransactionMode)) {\r\n        return new TransactionMode(tiLevel, readOnly, deferrable);\r\n    }\r\n\r\n    if (tiLevel && typeof tiLevel === 'object') {\r\n        readOnly = tiLevel.readOnly;\r\n        deferrable = tiLevel.deferrable;\r\n        tiLevel = tiLevel.tiLevel;\r\n    }\r\n\r\n    var level, accessMode, deferrableMode, capBegin, begin = 'begin';\r\n\r\n    tiLevel = (tiLevel > 0) ? parseInt(tiLevel) : 0;\r\n\r\n    if (tiLevel > 0 && tiLevel < 4) {\r\n        var values = ['serializable', 'repeatable read', 'read committed'];\r\n        level = 'isolation level ' + values[tiLevel - 1];\r\n    }\r\n\r\n    if (readOnly) {\r\n        accessMode = 'read only';\r\n    } else {\r\n        if (readOnly !== undefined) {\r\n            accessMode = 'read write';\r\n        }\r\n    }\r\n\r\n    // From the official documentation: http://www.postgresql.org/docs/9.5/static/sql-set-transaction.html\r\n    // The DEFERRABLE transaction property has no effect unless the transaction is also SERIALIZABLE and READ ONLY\r\n    if (tiLevel === isolationLevel.serializable && readOnly) {\r\n        if (deferrable) {\r\n            deferrableMode = 'deferrable';\r\n        } else {\r\n            if (deferrable !== undefined) {\r\n                deferrableMode = 'not deferrable';\r\n            }\r\n        }\r\n    }\r\n\r\n    if (level) {\r\n        begin += ' ' + level;\r\n    }\r\n\r\n    if (accessMode) {\r\n        begin += ' ' + accessMode;\r\n    }\r\n\r\n    if (deferrableMode) {\r\n        begin += ' ' + deferrableMode;\r\n    }\r\n\r\n    capBegin = begin.toUpperCase();\r\n\r\n    this.begin = function (cap) {\r\n        return cap ? capBegin : begin;\r\n    };\r\n}\r\n\r\n/**\r\n * @namespace txMode\r\n * @description\r\n * Transaction Mode namespace, available as `pgp.txMode`, before and after initializing the library.\r\n *\r\n * Extends the default `BEGIN` with Transaction Mode parameters:\r\n *  - isolation level\r\n *  - access mode\r\n *  - deferrable mode\r\n *\r\n * @property {function} TransactionMode\r\n * {@link txMode.TransactionMode TransactionMode} class constructor.\r\n *\r\n * @property {txMode.isolationLevel} isolationLevel\r\n * Transaction Isolation Level enumerator\r\n *\r\n * @see $[BEGIN]\r\n */\r\nmodule.exports = {\r\n    isolationLevel: isolationLevel,\r\n    TransactionMode: TransactionMode\r\n};\r\n\r\nObject.freeze(module.exports);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/txMode.js\n// module id = 92\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    utils: require('../utils'),\r\n    PS: require('./prepared'),\r\n    PQ: require('./parameterized')\r\n};\r\n\r\n// istanbul ignore next;\r\nfunction ExternalQuery() {\r\n}\r\n\r\nExternalQuery.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\n$npm.utils.inherits($npm.PS, ExternalQuery);\r\n$npm.utils.inherits($npm.PQ, ExternalQuery);\r\n\r\nmodule.exports = {\r\n    ExternalQuery: ExternalQuery,\r\n    PreparedStatement: $npm.PS,\r\n    ParameterizedQuery: $npm.PQ\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/types/index.js\n// module id = 93\n// module chunks = 0","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 94;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/utils\n// module id = 94\n// module chunks = 0","var url = require('url');\nvar dns = require('dns');\n\nvar defaults = require('./defaults');\n\nvar val = function(key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env[ 'PG' + key.toUpperCase() ];\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[ envVar ];\n  }\n\n  return config[key] ||\n    envVar ||\n    defaults[key];\n};\n\n//parses a connection string\nvar parse = require('pg-connection-string').parse;\n\nvar useSsl = function() {\n  switch(process.env.PGSSLMODE) {\n  case \"disable\":\n    return false;\n  case \"prefer\":\n  case \"require\":\n  case \"verify-ca\":\n  case \"verify-full\":\n    return true;\n  }\n  return defaults.ssl;\n};\n\nvar ConnectionParameters = function(config) {\n  //if a string is passed, it is a raw connection string so we parse it into a config\n  config = typeof config == 'string' ? parse(config) : (config || {});\n  //if the config has a connectionString defined, parse IT into the config we use\n  //this will override other default values with what is stored in connectionString\n  if(config.connectionString) {\n    config = parse(config.connectionString);\n  }\n  this.user = val('user', config);\n  this.database = val('database', config);\n  this.port = parseInt(val('port', config), 10);\n  this.host = val('host', config);\n  this.password = val('password', config);\n  this.binary = val('binary', config);\n  this.ssl = config.ssl || useSsl();\n  this.client_encoding = val(\"client_encoding\", config);\n  //a domain socket begins with '/'\n  this.isDomainSocket = (!(this.host||'').indexOf('/'));\n\n  this.application_name = val('application_name', config, 'PGAPPNAME');\n  this.fallback_application_name = val('fallback_application_name', config, false);\n};\n\nvar add = function(params, config, paramName) {\n  var value = config[paramName];\n  if(value) {\n    params.push(paramName+\"='\"+value+\"'\");\n  }\n};\n\nConnectionParameters.prototype.getLibpqConnectionString = function(cb) {\n  var params = [];\n  add(params, this, 'user');\n  add(params, this, 'password');\n  add(params, this, 'port');\n  add(params, this, 'application_name');\n  add(params, this, 'fallback_application_name');\n\n  if(this.database) {\n    params.push(\"dbname='\" + this.database + \"'\");\n  }\n  if(this.host) {\n    params.push(\"host=\" + this.host);\n  }\n  if(this.isDomainSocket) {\n    return cb(null, params.join(' '));\n  }\n  if(this.client_encoding) {\n    params.push(\"client_encoding='\" + this.client_encoding + \"'\");\n  }\n  dns.lookup(this.host, function(err, address) {\n    if(err) return cb(err, null);\n    params.push(\"hostaddr=\" + address);\n    return cb(null, params.join(' '));\n  });\n};\n\nmodule.exports = ConnectionParameters;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/connection-parameters.js\n// module id = 95\n// module chunks = 0","var net = require('net');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar Writer = require('buffer-writer');\nvar Reader = require('packet-reader');\n\nvar TEXT_MODE = 0;\nvar BINARY_MODE = 1;\nvar Connection = function(config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this.stream = config.stream || new net.Stream();\n  this.lastBuffer = false;\n  this.lastOffset = 0;\n  this.buffer = null;\n  this.offset = null;\n  this.encoding = 'utf8';\n  this.parsedStatements = {};\n  this.writer = new Writer();\n  this.ssl = config.ssl || false;\n  this._ending = false;\n  this._mode = TEXT_MODE;\n  this._emitMessage = false;\n  this._reader = new Reader({\n    headerSize: 1,\n    lengthPadding: -4\n  });\n  var self = this;\n  this.on('newListener', function(eventName) {\n    if(eventName == 'message') {\n      self._emitMessage = true;\n    }\n  });\n};\n\nutil.inherits(Connection, EventEmitter);\n\nConnection.prototype.connect = function(port, host) {\n\n  if(this.stream.readyState === 'closed') {\n    this.stream.connect(port, host);\n  } else if(this.stream.readyState == 'open') {\n    this.emit('connect');\n  }\n\n  var self = this;\n\n  this.stream.on('connect', function() {\n    self.emit('connect');\n  });\n\n  this.stream.on('error', function(error) {\n    //don't raise ECONNRESET errors - they can & should be ignored\n    //during disconnect\n    if(self._ending && error.code == 'ECONNRESET') {\n      return;\n    }\n    self.emit('error', error);\n  });\n\n  this.stream.on('close', function() {\n    // NOTE: node-0.10 emits both 'end' and 'close'\n    //       for streams closed by the peer, while\n    //       node-0.8 only emits 'close'\n    self.emit('end');\n  });\n\n  if(!this.ssl) {\n    return this.attachListeners(this.stream);\n  }\n\n  this.stream.once('data', function(buffer) {\n    var responseCode = buffer.toString('utf8');\n    if(responseCode != 'S') {\n      return self.emit('error', new Error('The server does not support SSL connections'));\n    }\n    var tls = require('tls');\n    self.stream = tls.connect({\n      socket: self.stream,\n      servername: host,\n      rejectUnauthorized: self.ssl.rejectUnauthorized,\n      ca: self.ssl.ca,\n      pfx: self.ssl.pfx,\n      key: self.ssl.key,\n      passphrase: self.ssl.passphrase,\n      cert: self.ssl.cert,\n      NPNProtocols: self.ssl.NPNProtocols\n    });\n    self.attachListeners(self.stream);\n    self.emit('sslconnect');\n\n    self.stream.on('error', function(error){\n      self.emit('error', error);\n    });\n  });\n};\n\nConnection.prototype.attachListeners = function(stream) {\n  var self = this;\n  stream.on('data', function(buff) {\n    self._reader.addChunk(buff);\n    var packet = self._reader.read();\n    while(packet) {\n      var msg = self.parseMessage(packet);\n      if(self._emitMessage) {\n        self.emit('message', msg);\n      }\n      self.emit(msg.name, msg);\n      packet = self._reader.read();\n    }\n  });\n};\n\nConnection.prototype.requestSsl = function() {\n  this.checkSslResponse = true;\n\n  var bodyBuffer = this.writer\n    .addInt16(0x04D2)\n    .addInt16(0x162F).flush();\n\n  var length = bodyBuffer.length + 4;\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.startup = function(config) {\n  var writer = this.writer\n    .addInt16(3)\n    .addInt16(0)\n  ;\n\n  Object.keys(config).forEach(function(key){\n    var val = config[key];\n    writer.addCString(key).addCString(val);\n  });\n\n  writer.addCString('client_encoding').addCString(\"'utf-8'\");\n\n  var bodyBuffer = writer.addCString('').flush();\n  //this message is sent without a code\n\n  var length = bodyBuffer.length + 4;\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.cancel = function(processID, secretKey) {\n  var bodyBuffer = this.writer\n    .addInt16(1234)\n    .addInt16(5678)\n    .addInt32(processID)\n    .addInt32(secretKey)\n    .flush();\n\n  var length = bodyBuffer.length + 4;\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.password = function(password) {\n  //0x70 = 'p'\n  this._send(0x70, this.writer.addCString(password));\n};\n\nConnection.prototype._send = function(code, more) {\n  if(!this.stream.writable) { return false; }\n  if(more === true) {\n    this.writer.addHeader(code);\n  } else {\n    return this.stream.write(this.writer.flush(code));\n  }\n};\n\nConnection.prototype.query = function(text) {\n  //0x51 = Q\n  this.stream.write(this.writer.addCString(text).flush(0x51));\n};\n\n//send parse message\n//\"more\" === true to buffer the message until flush() is called\nConnection.prototype.parse = function(query, more) {\n  //expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  //normalize missing query names to allow for null\n  query.name = query.name || '';\n  if (query.name.length > 63) {\n    console.error('Warning! Postgres only supports 63 characters for query names.');\n    console.error('You supplied', query.name, '(', query.name.length, ')');\n    console.error('This can cause conflicts and silent errors executing queries');\n  }\n  //normalize null type array\n  query.types = query.types || [];\n  var len = query.types.length;\n  var buffer = this.writer\n    .addCString(query.name) //name of query\n    .addCString(query.text) //actual query text\n    .addInt16(len);\n  for(var i = 0; i < len; i++) {\n    buffer.addInt32(query.types[i]);\n  }\n\n  var code = 0x50;\n  this._send(code, more);\n};\n\n//send bind message\n//\"more\" === true to buffer the message until flush() is called\nConnection.prototype.bind = function(config, more) {\n  //normalize config\n  config = config || {};\n  config.portal = config.portal || '';\n  config.statement = config.statement || '';\n  config.binary = config.binary || false;\n  var values = config.values || [];\n  var len = values.length;\n  var useBinary = false;\n  for (var j = 0; j < len; j++)\n    useBinary |= values[j] instanceof Buffer;\n  var buffer = this.writer\n    .addCString(config.portal)\n    .addCString(config.statement);\n  if (!useBinary)\n    buffer.addInt16(0);\n  else {\n    buffer.addInt16(len);\n    for (j = 0; j < len; j++)\n      buffer.addInt16(values[j] instanceof Buffer);\n  }\n  buffer.addInt16(len);\n  for(var i = 0; i < len; i++) {\n    var val = values[i];\n    if(val === null || typeof val === \"undefined\") {\n      buffer.addInt32(-1);\n    } else if (val instanceof Buffer) {\n      buffer.addInt32(val.length);\n      buffer.add(val);\n    } else {\n      buffer.addInt32(Buffer.byteLength(val));\n      buffer.addString(val);\n    }\n  }\n\n  if(config.binary) {\n    buffer.addInt16(1); // format codes to use binary\n    buffer.addInt16(1);\n  }\n  else {\n    buffer.addInt16(0); // format codes to use text\n  }\n  //0x42 = 'B'\n  this._send(0x42, more);\n};\n\n//send execute message\n//\"more\" === true to buffer the message until flush() is called\nConnection.prototype.execute = function(config, more) {\n  config = config || {};\n  config.portal = config.portal || '';\n  config.rows = config.rows || '';\n  this.writer\n    .addCString(config.portal)\n    .addInt32(config.rows);\n\n  //0x45 = 'E'\n  this._send(0x45, more);\n};\n\nvar emptyBuffer = Buffer(0);\n\nConnection.prototype.flush = function() {\n  //0x48 = 'H'\n  this.writer.add(emptyBuffer);\n  this._send(0x48);\n};\n\nConnection.prototype.sync = function() {\n  //clear out any pending data in the writer\n  this.writer.flush(0);\n\n  this.writer.add(emptyBuffer);\n  this._ending = true;\n  this._send(0x53);\n};\n\nConnection.prototype.end = function() {\n  //0x58 = 'X'\n  this.writer.add(emptyBuffer);\n  this._ending = true;\n  this._send(0x58);\n};\n\nConnection.prototype.close = function(msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n  this._send(0x43, more);\n};\n\nConnection.prototype.describe = function(msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n  this._send(0x44, more);\n};\n\nConnection.prototype.sendCopyFromChunk = function (chunk) {\n  this.stream.write(this.writer.add(chunk).flush(0x64));\n};\n\nConnection.prototype.endCopyFrom = function () {\n  this.stream.write(this.writer.add(emptyBuffer).flush(0x63));\n};\n\nConnection.prototype.sendCopyFail = function (msg) {\n  //this.stream.write(this.writer.add(emptyBuffer).flush(0x66));\n  this.writer.addCString(msg);\n  this._send(0x66);\n};\n\nvar Message = function(name, length) {\n  this.name = name;\n  this.length = length;\n};\n\nConnection.prototype.parseMessage =  function(buffer) {\n\n  this.offset = 0;\n  var length = buffer.length + 4;\n  switch(this._reader.header)\n  {\n\n  case 0x52: //R\n    return this.parseR(buffer, length);\n\n  case 0x53: //S\n    return this.parseS(buffer, length);\n\n  case 0x4b: //K\n    return this.parseK(buffer, length);\n\n  case 0x43: //C\n    return this.parseC(buffer, length);\n\n  case 0x5a: //Z\n    return this.parseZ(buffer, length);\n\n  case 0x54: //T\n    return this.parseT(buffer, length);\n\n  case 0x44: //D\n    return this.parseD(buffer, length);\n\n  case 0x45: //E\n    return this.parseE(buffer, length);\n\n  case 0x4e: //N\n    return this.parseN(buffer, length);\n\n  case 0x31: //1\n    return new Message('parseComplete', length);\n\n  case 0x32: //2\n    return new Message('bindComplete', length);\n\n  case 0x33: //3\n    return new Message('closeComplete', length);\n\n  case 0x41: //A\n    return this.parseA(buffer, length);\n\n  case 0x6e: //n\n    return new Message('noData', length);\n\n  case 0x49: //I\n    return new Message('emptyQuery', length);\n\n  case 0x73: //s\n    return new Message('portalSuspended', length);\n\n  case 0x47: //G\n    return this.parseG(buffer, length);\n\n  case 0x48: //H\n    return this.parseH(buffer, length);\n\n  case 0x63: //c\n    return new Message('copyDone', length);\n\n  case 0x64: //d\n    return this.parsed(buffer, length);\n  }\n};\n\nConnection.prototype.parseR = function(buffer, length) {\n  var code = 0;\n  var msg = new Message('authenticationOk', length);\n  if(msg.length === 8) {\n    code = this.parseInt32(buffer);\n    if(code === 3) {\n      msg.name = 'authenticationCleartextPassword';\n    }\n    return msg;\n  }\n  if(msg.length === 12) {\n    code = this.parseInt32(buffer);\n    if(code === 5) { //md5 required\n      msg.name = 'authenticationMD5Password';\n      msg.salt = new Buffer(4);\n      buffer.copy(msg.salt, 0, this.offset, this.offset + 4);\n      this.offset += 4;\n      return msg;\n    }\n  }\n  throw new Error(\"Unknown authenticationOk message type\" + util.inspect(msg));\n};\n\nConnection.prototype.parseS = function(buffer, length) {\n  var msg = new Message('parameterStatus', length);\n  msg.parameterName = this.parseCString(buffer);\n  msg.parameterValue = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseK = function(buffer, length) {\n  var msg = new Message('backendKeyData', length);\n  msg.processID = this.parseInt32(buffer);\n  msg.secretKey = this.parseInt32(buffer);\n  return msg;\n};\n\nConnection.prototype.parseC = function(buffer, length) {\n  var msg = new Message('commandComplete', length);\n  msg.text = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseZ = function(buffer, length) {\n  var msg = new Message('readyForQuery', length);\n  msg.name = 'readyForQuery';\n  msg.status = this.readString(buffer, 1);\n  return msg;\n};\n\nvar ROW_DESCRIPTION = 'rowDescription';\nConnection.prototype.parseT = function(buffer, length) {\n  var msg = new Message(ROW_DESCRIPTION, length);\n  msg.fieldCount = this.parseInt16(buffer);\n  var fields = [];\n  for(var i = 0; i < msg.fieldCount; i++){\n    fields.push(this.parseField(buffer));\n  }\n  msg.fields = fields;\n  return msg;\n};\n\nvar Field = function() {\n  this.name = null;\n  this.tableID = null;\n  this.columnID = null;\n  this.dataTypeID = null;\n  this.dataTypeSize = null;\n  this.dataTypeModifier = null;\n  this.format = null;\n};\n\nvar FORMAT_TEXT = 'text';\nvar FORMAT_BINARY = 'binary';\nConnection.prototype.parseField = function(buffer) {\n  var field = new Field();\n  field.name = this.parseCString(buffer);\n  field.tableID = this.parseInt32(buffer);\n  field.columnID = this.parseInt16(buffer);\n  field.dataTypeID = this.parseInt32(buffer);\n  field.dataTypeSize = this.parseInt16(buffer);\n  field.dataTypeModifier = this.parseInt32(buffer);\n  if(this.parseInt16(buffer) === TEXT_MODE) {\n    this._mode = TEXT_MODE;\n    field.format = FORMAT_TEXT;\n  } else {\n    this._mode = BINARY_MODE;\n    field.format = FORMAT_BINARY;\n  }\n  return field;\n};\n\nvar DATA_ROW = 'dataRow';\nvar DataRowMessage = function(length, fieldCount) {\n  this.name = DATA_ROW;\n  this.length = length;\n  this.fieldCount = fieldCount;\n  this.fields = [];\n};\n\n\n//extremely hot-path code\nConnection.prototype.parseD = function(buffer, length) {\n  var fieldCount = this.parseInt16(buffer);\n  var msg = new DataRowMessage(length, fieldCount);\n  for(var i = 0; i < fieldCount; i++) {\n    msg.fields.push(this._readValue(buffer));\n  }\n  return msg;\n};\n\n//extremely hot-path code\nConnection.prototype._readValue = function(buffer) {\n  var length = this.parseInt32(buffer);\n  if(length === -1) return null;\n  if(this._mode === TEXT_MODE) {\n    return this.readString(buffer, length);\n  }\n  return this.readBytes(buffer, length);\n};\n\n//parses error\nConnection.prototype.parseE = function(buffer, length) {\n  var fields = {};\n  var msg, item;\n  var input = new Message('error', length);\n  var fieldType = this.readString(buffer, 1);\n  while(fieldType != '\\0') {\n    fields[fieldType] = this.parseCString(buffer);\n    fieldType = this.readString(buffer, 1);\n  }\n  if(input.name === 'error') {\n    // the msg is an Error instance\n    msg = new Error(fields.M);\n    for (item in input) {\n      // copy input properties to the error\n      if(input.hasOwnProperty(item)) {\n        msg[item] = input[item];\n      }\n    }\n  } else {\n    // the msg is an object literal\n    msg = input;\n    msg.message = fields.M;\n  }\n  msg.severity = fields.S;\n  msg.code = fields.C;\n  msg.detail = fields.D;\n  msg.hint = fields.H;\n  msg.position = fields.P;\n  msg.internalPosition = fields.p;\n  msg.internalQuery = fields.q;\n  msg.where = fields.W;\n  msg.schema = fields.s;\n  msg.table = fields.t;\n  msg.column = fields.c;\n  msg.dataType = fields.d;\n  msg.constraint = fields.n;\n  msg.file = fields.F;\n  msg.line = fields.L;\n  msg.routine = fields.R;\n  return msg;\n};\n\n//same thing, different name\nConnection.prototype.parseN = function(buffer, length) {\n  var msg = this.parseE(buffer, length);\n  msg.name = 'notice';\n  return msg;\n};\n\nConnection.prototype.parseA = function(buffer, length) {\n  var msg = new Message('notification', length);\n  msg.processId = this.parseInt32(buffer);\n  msg.channel = this.parseCString(buffer);\n  msg.payload = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseG = function (buffer, length) {\n  var msg = new Message('copyInResponse', length);\n  return this.parseGH(buffer, msg);\n};\n\nConnection.prototype.parseH = function(buffer, length) {\n  var msg = new Message('copyOutResponse', length);\n  return this.parseGH(buffer, msg);\n};\n\nConnection.prototype.parseGH = function (buffer, msg) {\n  var isBinary = buffer[this.offset] !== 0;\n  this.offset++;\n  msg.binary = isBinary;\n  var columnCount = this.parseInt16(buffer);\n  msg.columnTypes = [];\n  for(var i = 0; i<columnCount; i++) {\n    msg.columnTypes.push(this.parseInt16(buffer));\n  }\n  return msg;\n};\n\nConnection.prototype.parsed = function (buffer, length) {\n  var msg = new Message('copyData', length);\n  msg.chunk = this.readBytes(buffer, msg.length - 4);\n  return msg;\n};\n\nConnection.prototype.parseInt32 = function(buffer) {\n  var value = buffer.readInt32BE(this.offset, true);\n  this.offset += 4;\n  return value;\n};\n\nConnection.prototype.parseInt16 = function(buffer) {\n  var value = buffer.readInt16BE(this.offset, true);\n  this.offset += 2;\n  return value;\n};\n\nConnection.prototype.readString = function(buffer, length) {\n  return buffer.toString(this.encoding, this.offset, (this.offset += length));\n};\n\nConnection.prototype.readBytes = function(buffer, length) {\n  return buffer.slice(this.offset, this.offset += length);\n};\n\nConnection.prototype.parseCString = function(buffer) {\n  var start = this.offset;\n  while(buffer[this.offset++] !== 0) { }\n  return buffer.toString(this.encoding, start, this.offset - 1);\n};\n//end parsing methods\nmodule.exports = Connection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/connection.js\n// module id = 96\n// module chunks = 0","var Native = require('pg-native');\nvar TypeOverrides = require('../type-overrides');\nvar semver = require('semver');\nvar pkg = require('../../package.json');\nvar assert = require('assert');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar ConnectionParameters = require('../connection-parameters');\n\nvar msg = 'Version >= ' + pkg.minNativeVersion + ' of pg-native required.';\nassert(semver.gte(Native.version, pkg.minNativeVersion), msg);\n\nvar NativeQuery = require('./query');\n\nvar Client = module.exports = function(config) {\n  EventEmitter.call(this);\n  config = config || {};\n\n  this._types = new TypeOverrides(config.types);\n\n  this.native = new Native({\n    types: this._types\n  });\n\n  this._queryQueue = [];\n  this._connected = false;\n\n  //keep these on the object for legacy reasons\n  //for the time being. TODO: deprecate all this jazz\n  var cp = this.connectionParameters = new ConnectionParameters(config);\n  this.user = cp.user;\n  this.password = cp.password;\n  this.database = cp.database;\n  this.host = cp.host;\n  this.port = cp.port;\n\n  //a hash to hold named queries\n  this.namedQueries = {};\n};\n\nutil.inherits(Client, EventEmitter);\n\n//connect to the backend\n//pass an optional callback to be called once connected\n//or with an error if there was a connection error\n//if no callback is passed and there is a connection error\n//the client will emit an error event.\nClient.prototype.connect = function(cb) {\n  var self = this;\n\n  var onError = function(err) {\n    if(cb) return cb(err);\n    return self.emit('error', err);\n  };\n\n  this.connectionParameters.getLibpqConnectionString(function(err, conString) {\n    if(err) return onError(err);\n    self.native.connect(conString, function(err) {\n      if(err) return onError(err);\n\n      //set internal states to connected\n      self._connected = true;\n\n      //handle connection errors from the native layer\n      self.native.on('error', function(err) {\n        //error will be handled by active query\n        if(self._activeQuery && self._activeQuery.state != 'end') {\n          return;\n        }\n        self.emit('error', err);\n      });\n\n      self.native.on('notification', function(msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra\n        });\n      });\n\n      //signal we are connected now\n      self.emit('connect');\n      self._pulseQueryQueue(true);\n\n      //possibly call the optional callback\n      if(cb) cb();\n    });\n  });\n};\n\n//send a query to the server\n//this method is highly overloaded to take\n//1) string query, optional array of parameters, optional function callback\n//2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function(config, values, callback) {\n  var query = new NativeQuery(this.native);\n\n  //support query('text', ...) style calls\n  if(typeof config == 'string') {\n    query.text = config;\n  }\n\n  //support passing everything in via a config object\n  if(typeof config == 'object') {\n    query.text = config.text;\n    query.values = config.values;\n    query.name = config.name;\n    query.callback = config.callback;\n    query._arrayMode = config.rowMode == 'array';\n  }\n\n  //support query({...}, function() {}) style calls\n  //& support query(..., ['values'], ...) style calls\n  if(typeof values == 'function') {\n    query.callback = values;\n  }\n  else if(util.isArray(values)) {\n    query.values = values;\n  }\n  if(typeof callback == 'function') {\n    query.callback = callback;\n  }\n\n  this._queryQueue.push(query);\n  this._pulseQueryQueue();\n  return query;\n};\n\n//disconnect from the backend server\nClient.prototype.end = function(cb) {\n  var self = this;\n  if(!this._connected) {\n    this.once('connect', this.end.bind(this, cb));\n  }\n  this.native.end(function() {\n    //send an error to the active query\n    if(self._hasActiveQuery()) {\n      var msg = 'Connection terminated';\n      self._queryQueue.length = 0;\n      self._activeQuery.handleError(new Error(msg));\n    }\n    self.emit('end');\n    if(cb) cb();\n  });\n};\n\nClient.prototype._hasActiveQuery = function() {\n  return this._activeQuery && this._activeQuery.state != 'error' && this._activeQuery.state != 'end';\n};\n\nClient.prototype._pulseQueryQueue = function(initialConnection) {\n  if(!this._connected) {\n    return;\n  }\n  if(this._hasActiveQuery()) {\n    return;\n  }\n  var query = this._queryQueue.shift();\n  if(!query) {\n    if(!initialConnection) {\n      this.emit('drain');\n    }\n    return;\n  }\n  this._activeQuery = query;\n  query.submit(this);\n  var self = this;\n  query.once('_done', function() {\n    self._pulseQueryQueue();\n  });\n};\n\n//attempt to cancel an in-progress query\nClient.prototype.cancel = function(query) {\n  if(this._activeQuery == query) {\n    this.native.cancel(function() {});\n  } else if (this._queryQueue.indexOf(query) != -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1);\n  }\n};\n\nClient.prototype.setTypeParser = function(oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\n\nClient.prototype.getTypeParser = function(oid, format) {\n  return this._types.getTypeParser(oid, format);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/native/index.js\n// module id = 97\n// module chunks = 0","var types = require('pg-types');\n\nfunction TypeOverrides(userTypes) {\n  this._types = userTypes || types;\n  this.text = {};\n  this.binary = {};\n}\n\nTypeOverrides.prototype.getOverrides = function(format) {\n  switch(format) {\n    case 'text': return this.text;\n    case 'binary': return this.binary;\n    default: return {};\n  }\n};\n\nTypeOverrides.prototype.setTypeParser = function(oid, format, parseFn) {\n  if(typeof format == 'function') {\n    parseFn = format;\n    format = 'text';\n  }\n  this.getOverrides(format)[oid] = parseFn;\n};\n\nTypeOverrides.prototype.getTypeParser = function(oid, format) {\n  format = format || 'text';\n  return this.getOverrides(format)[oid] || this._types.getTypeParser(oid, format);\n};\n\nmodule.exports = TypeOverrides;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/type-overrides.js\n// module id = 98\n// module chunks = 0","module.exports = {\n\t\"_args\": [\n\t\t[\n\t\t\t{\n\t\t\t\t\"raw\": \"pg-promise\",\n\t\t\t\t\"scope\": null,\n\t\t\t\t\"escapedName\": \"pg-promise\",\n\t\t\t\t\"name\": \"pg-promise\",\n\t\t\t\t\"rawSpec\": \"\",\n\t\t\t\t\"spec\": \"latest\",\n\t\t\t\t\"type\": \"tag\"\n\t\t\t},\n\t\t\t\"/home/neil/DevGit/zf2dbmodelgen/modgen\"\n\t\t]\n\t],\n\t\"_from\": \"pg-promise@latest\",\n\t\"_id\": \"pg-promise@5.6.0\",\n\t\"_inCache\": true,\n\t\"_location\": \"/pg-promise\",\n\t\"_nodeVersion\": \"4.7.1\",\n\t\"_npmOperationalInternal\": {\n\t\t\"host\": \"packages-18-east.internal.npmjs.com\",\n\t\t\"tmp\": \"tmp/pg-promise-5.6.0.tgz_1488031568113_0.2753716658335179\"\n\t},\n\t\"_npmUser\": {\n\t\t\"name\": \"vitaly.tomilov\",\n\t\t\"email\": \"vitaly.tomilov@gmail.com\"\n\t},\n\t\"_npmVersion\": \"2.15.11\",\n\t\"_phantomChildren\": {\n\t\t\"buffer-writer\": \"1.0.1\",\n\t\t\"generic-pool\": \"2.4.2\",\n\t\t\"packet-reader\": \"0.2.0\",\n\t\t\"pg-connection-string\": \"0.1.3\",\n\t\t\"pg-types\": \"1.11.0\",\n\t\t\"semver\": \"4.3.2\",\n\t\t\"split\": \"1.0.0\"\n\t},\n\t\"_requested\": {\n\t\t\"raw\": \"pg-promise\",\n\t\t\"scope\": null,\n\t\t\"escapedName\": \"pg-promise\",\n\t\t\"name\": \"pg-promise\",\n\t\t\"rawSpec\": \"\",\n\t\t\"spec\": \"latest\",\n\t\t\"type\": \"tag\"\n\t},\n\t\"_requiredBy\": [\n\t\t\"#USER\",\n\t\t\"/\"\n\t],\n\t\"_resolved\": \"https://registry.npmjs.org/pg-promise/-/pg-promise-5.6.0.tgz\",\n\t\"_shasum\": \"ff5a482cb6764a508ad0a8b7c81dae1adfee4d1d\",\n\t\"_shrinkwrap\": null,\n\t\"_spec\": \"pg-promise\",\n\t\"_where\": \"/home/neil/DevGit/zf2dbmodelgen/modgen\",\n\t\"author\": {\n\t\t\"name\": \"Vitaly Tomilov\",\n\t\t\"email\": \"vitaly.tomilov@gmail.com\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/vitaly-t/pg-promise/issues\",\n\t\t\"email\": \"vitaly.tomilov@gmail.com\"\n\t},\n\t\"dependencies\": {\n\t\t\"manakin\": \"0.4\",\n\t\t\"pg\": \"5.1\",\n\t\t\"pg-minify\": \"0.4\",\n\t\t\"spex\": \"1.2\"\n\t},\n\t\"description\": \"Promises interface for PostgreSQL\",\n\t\"devDependencies\": {\n\t\t\"@types/node\": \"6.x\",\n\t\t\"JSONStream\": \"1.x\",\n\t\t\"bluebird\": \"3.x\",\n\t\t\"coveralls\": \"2.x\",\n\t\t\"istanbul\": \"0.4\",\n\t\t\"jasmine-node\": \"1.x\",\n\t\t\"jsdoc\": \"3.x\",\n\t\t\"pg-query-stream\": \"1.x\",\n\t\t\"typescript\": \"2.x\"\n\t},\n\t\"directories\": {},\n\t\"dist\": {\n\t\t\"shasum\": \"ff5a482cb6764a508ad0a8b7c81dae1adfee4d1d\",\n\t\t\"tarball\": \"https://registry.npmjs.org/pg-promise/-/pg-promise-5.6.0.tgz\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=4.0\",\n\t\t\"npm\": \">=2.15\"\n\t},\n\t\"files\": [\n\t\t\"lib\",\n\t\t\"typescript\"\n\t],\n\t\"gitHead\": \"e1e81fa19a7fba36f56d0cdf2bb101487842017e\",\n\t\"homepage\": \"https://github.com/vitaly-t/pg-promise\",\n\t\"keywords\": [\n\t\t\"pg\",\n\t\t\"promise\",\n\t\t\"postgres\"\n\t],\n\t\"license\": \"MIT\",\n\t\"main\": \"lib/index.js\",\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"vitaly.tomilov\",\n\t\t\t\"email\": \"vitaly.tomilov@gmail.com\"\n\t\t}\n\t],\n\t\"name\": \"pg-promise\",\n\t\"optionalDependencies\": {},\n\t\"readme\": \"ERROR: No README data found!\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/vitaly-t/pg-promise.git\"\n\t},\n\t\"scripts\": {\n\t\t\"coverage\": \"istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test\",\n\t\t\"doc\": \"jsdoc -c ./jsdoc/jsDoc.json ./jsdoc/README.md\",\n\t\t\"test\": \"jasmine-node test\",\n\t\t\"test-native\": \"jasmine-node test --config PG_NATIVE true\",\n\t\t\"travis\": \"istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test --captureExceptions && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\"\n\t},\n\t\"typings\": \"typescript/pg-promise.d.ts\",\n\t\"version\": \"5.6.0\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/package.json\n// module id = 99\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    u: require('util'),\r\n    os: require('os'),\r\n    utils: require('../utils/static')\r\n};\r\n\r\n/**\r\n * @interface errors.BatchError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link batch}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `BatchError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * It represents the message of the first error encountered in the batch, and is a safe\r\n * version of using `first.message`.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {array} data\r\n * Array of objects `{success, result, [origin]}`:\r\n * - `success` = true/false, indicates whether the corresponding value in the input array was resolved.\r\n * - `result` = resolved data, if `success`=`true`, or else the rejection reason.\r\n * - `origin` - set only when failed as a result of an unsuccessful call into the notification callback\r\n *    (parameter `cb` of method {@link batch})\r\n *\r\n * The array has the same size as the input one that was passed into method {@link batch}, providing direct mapping.\r\n *\r\n * @property {} stat\r\n * Resolution Statistics.\r\n *\r\n * @property {number} stat.total\r\n * Total number of elements in the batch.\r\n *\r\n * @property {number} stat.succeeded\r\n * Number of resolved values in the batch.\r\n *\r\n * @property {number} stat.failed\r\n * Number of rejected values in the batch.\r\n *\r\n * @property {number} stat.duration\r\n * Time in milliseconds it took to settle all values.\r\n *\r\n * @property {} first\r\n * The very first error within the batch, with support for nested batch results, it is also the same error\r\n * as $[promise.all] would provide.\r\n *\r\n * @see {@link batch}\r\n *\r\n */\r\nfunction BatchError(result, errors, duration) {\r\n\r\n    this.data = result;\r\n\r\n    /**\r\n     * @method errors.BatchError.getErrors\r\n     * @description\r\n     * Returns the complete list of errors only.\r\n     *\r\n     * It supports nested batch results, presented as a sub-array.\r\n     *\r\n     * @returns {array}\r\n     */\r\n    this.getErrors = function () {\r\n        var err = new Array(errors.length);\r\n        for (var i = 0; i < errors.length; i++) {\r\n            err[i] = result[errors[i]].result;\r\n            if (err[i] instanceof BatchError) {\r\n                err[i] = err[i].getErrors();\r\n            }\r\n        }\r\n        $npm.utils.extend(err, '$isErrorList', true);\r\n        return err;\r\n    };\r\n\r\n    var e = this.getErrors(),\r\n        first = e[0];\r\n\r\n    while (first && first.$isErrorList) {\r\n        first = first[0];\r\n    }\r\n\r\n    // we do not show it within the inspect, because when the error\r\n    // happens for a nested result, the output becomes a mess.\r\n    this.first = first;\r\n\r\n    if (first instanceof Error) {\r\n        this.message = first.message;\r\n    } else {\r\n        if (typeof first !== 'string') {\r\n            first = $npm.u.inspect(first);\r\n        }\r\n        this.message = first;\r\n    }\r\n\r\n    this.stat = {\r\n        total: result.length,\r\n        succeeded: result.length - e.length,\r\n        failed: e.length,\r\n        duration: duration\r\n    };\r\n\r\n    Error.captureStackTrace(this, BatchError);\r\n\r\n}\r\n\r\n$npm.u.inherits(BatchError, Error);\r\nBatchError.prototype.name = 'BatchError';\r\n\r\n/**\r\n * @method errors.BatchError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * The output is an abbreviated version of the error, because the complete error\r\n * is often too much for displaying or even logging, as a batch can be of any size.\r\n * Therefore, only errors are rendered from the `data` property, alongside their indexes,\r\n * and only up to the first 5, to avoid polluting the screen or the log file.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nBatchError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        gap2 = $npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'BatchError {',\r\n            gap1 + 'stat: { total: ' + this.stat.total + ', succeeded: ' + this.stat.succeeded +\r\n            ', failed: ' + this.stat.failed + ', duration: ' + this.stat.duration + ' }',\r\n            gap1 + 'errors: ['\r\n        ];\r\n\r\n    // In order to avoid polluting the error log or the console, \r\n    // we limit the log output to the top 5 errors:\r\n    var counter = 0, maxErrors = 5;\r\n    this.data.forEach(function (d, index) {\r\n        if (!d.success && counter < maxErrors) {\r\n            lines.push(gap2 + index + ': ' + $npm.utils.formatError(d.result, level + 2));\r\n            counter++;\r\n        }\r\n    });\r\n    lines.push(gap1 + ']');\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nBatchError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = BatchError;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/errors/batch.js\n// module id = 100\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    u: require('util'),\r\n    os: require('os'),\r\n    utils: require('../utils/static')\r\n};\r\n\r\nvar errorReasons = {\r\n    0: \"Page with index %d rejected.\",\r\n    1: \"Source %s returned a rejection at index %d.\",\r\n    2: \"Source %s threw an error at index %d.\",\r\n    3: \"Destination %s returned a rejection at index %d.\",\r\n    4: \"Destination %s threw an error at index %d.\",\r\n    5: \"Source %s returned a non-array value at index %d.\"\r\n};\r\n\r\n/**\r\n * @interface errors.PageError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link page}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PageError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown, or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see\r\n * {@link page},\r\n * {@link batch}\r\n *\r\n */\r\nfunction PageError(e, code, cbName, duration) {\r\n\r\n    this.index = e.index;\r\n    this.duration = duration;\r\n    this.error = e.error;\r\n\r\n    if ('source' in e) {\r\n        this.source = e.source;\r\n    }\r\n\r\n    if ('dest' in e) {\r\n        this.dest = e.dest;\r\n    }\r\n\r\n    if (this.error instanceof Error) {\r\n        this.message = this.error.message;\r\n    } else {\r\n        this.message = this.error;\r\n        if (typeof this.message !== 'string') {\r\n            this.message = $npm.u.inspect(this.message);\r\n        }\r\n    }\r\n\r\n    if (code) {\r\n        cbName = cbName ? (\"'\" + cbName + \"'\") : '<anonymous>';\r\n        this.reason = $npm.u.format(errorReasons[code], cbName, e.index);\r\n    } else {\r\n        this.reason = $npm.u.format(errorReasons[code], e.index);\r\n    }\r\n\r\n    Error.captureStackTrace(this, PageError);\r\n\r\n}\r\n\r\n$npm.u.inherits(PageError, Error);\r\nPageError.prototype.name = 'PageError';\r\n\r\n/**\r\n * @method errors.PageError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPageError.prototype.toString = function (level) {\r\n\r\n    level = level > 0 ? parseInt(level) : 0;\r\n\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'PageError {',\r\n            gap1 + 'message: ' + JSON.stringify(this.message),\r\n            gap1 + 'reason: ' + this.reason,\r\n            gap1 + 'index: ' + this.index,\r\n            gap1 + 'duration: ' + this.duration\r\n        ];\r\n\r\n    lines.push(gap1 + 'error: ' + $npm.utils.formatError(this.error, level + 1));\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nPageError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = PageError;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/errors/page.js\n// module id = 101\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    u: require('util'),\r\n    os: require('os'),\r\n    utils: require('../utils/static')\r\n};\r\n\r\nvar errorReasons = {\r\n    0: \"Source %s returned a rejection at index %d.\",\r\n    1: \"Source %s threw an error at index %d.\",\r\n    2: \"Destination %s returned a rejection at index %d.\",\r\n    3: \"Destination %s threw an error at index %d.\"\r\n};\r\n\r\n/**\r\n * @interface errors.SequenceError\r\n * @augments external:Error\r\n * @description\r\n * This type represents all errors rejected by method {@link sequence}, except for {@link external:TypeError TypeError}\r\n * when the method receives invalid input parameters.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `SequenceError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {} error\r\n * The error that was thrown or the rejection reason.\r\n *\r\n * @property {number} index\r\n * Index of the element in the sequence for which the error/rejection occurred.\r\n *\r\n * @property {number} duration\r\n * Duration (in milliseconds) of processing until the error/rejection occurred.\r\n *\r\n * @property {string} reason\r\n * Textual explanation of why the method failed.\r\n *\r\n * @property {} source\r\n * Resolved `data` parameter that was passed into the `source` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `source` function.\r\n *\r\n * @property {} dest\r\n * Resolved `data` parameter that was passed into the `dest` function.\r\n *\r\n * It is only set when the error/rejection occurred inside the `dest` function.\r\n *\r\n * @see {@link sequence}\r\n *\r\n */\r\nfunction SequenceError(e, code, cbName, duration) {\r\n\r\n    this.index = e.index;\r\n    this.duration = duration;\r\n    this.error = e.error;\r\n\r\n    if (this.error instanceof Error) {\r\n        this.message = this.error.message;\r\n    } else {\r\n        this.message = this.error;\r\n        if (typeof this.message !== 'string') {\r\n            this.message = $npm.u.inspect(this.message);\r\n        }\r\n    }\r\n\r\n    if ('source' in e) {\r\n        this.source = e.source;\r\n    } else {\r\n        this.dest = e.dest;\r\n    }\r\n\r\n    cbName = cbName ? (\"'\" + cbName + \"'\") : '<anonymous>';\r\n    this.reason = $npm.u.format(errorReasons[code], cbName, e.index);\r\n\r\n    Error.captureStackTrace(this, SequenceError);\r\n}\r\n\r\n$npm.u.inherits(SequenceError, Error);\r\nSequenceError.prototype.name = 'SequenceError';\r\n\r\n/**\r\n * @method errors.SequenceError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nSequenceError.prototype.toString = function (level) {\r\n\r\n    level = level > 0 ? parseInt(level) : 0;\r\n\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'SequenceError {',\r\n            gap1 + 'message: ' + JSON.stringify(this.message),\r\n            gap1 + 'reason: ' + this.reason,\r\n            gap1 + 'index: ' + this.index,\r\n            gap1 + 'duration: ' + this.duration\r\n        ];\r\n\r\n    lines.push(gap1 + 'error: ' + $npm.utils.formatError(this.error, level + 1));\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nSequenceError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = SequenceError;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/errors/sequence.js\n// module id = 102\n// module chunks = 0","import {configService} from '../configService';\nimport { dbConn } from './dbConn';\n\nexport class connPgSQL {\n\n    private _pConn: Object;\n    private _pgp = require('pg-promise');\n\n    // private _client: pg-prom\n\n    constructor(private _cs: configService) {\n        try {\n            this.configure();\n        }\n        catch (err) {\n            console.log(\"Error in constructor of PgSQL : \" + err);\n        }\n    }\n    configure() {\n       this._pConn = this._convertParams(); // ._cs.getDBParams();\n        console.log(this._convertParams());\n        console.log(\"PGP : \" + this._pgp(this._convertParams()).connect());\n        // this._client = new this._pg.Client(this.getConnectString());\n        // console.log(this._client);\n    }\n\n    // Read http://stackoverflow.com/questions/34382796/where-should-i-initialize-pg-promise/34427278#34427278\n    \n    getConnectString(): string {\n        try {\n            return `postgres://${this._pConn.user}:${this._pConn.password}@${this._pConn.server}/${this._pConn.dbname}`;\n        }\n        catch (err) {\n            console.log(\"Error in db.ts getConnectString :: \" + err);\n        }\n    }\n    getRows(): string[] {\n\n        return [\"\"];\n\n    }\n\n    private _convertParams():Object{\n      let _conn = {\n        user:\"\",\n        database: \"\",\n        port: \"\",\n        host:\"\",\n        password: \"\"\n      };\n\n\n      try{\n          _conn.user = this._cs.getDBParams().username;\n          _conn.database = this._cs.getDBParams().dbname;\n          _conn.port = this._cs.getDBParams().port;\n          _conn.host = this._cs.getDBParams().server;\n          _conn.password = this._cs.getDBParams().password;\n      }\n      catch(err){\n        console.log(\"Error in _convertParams :: \"  + err);\n      }\n      return _conn;\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/db/connPgSQL.ts","'use strict';\r\n\r\nvar util = require('util');\r\n\r\nvar $def = {\r\n\r\n    // process.stdout:\r\n    log: console.log,\r\n    info: console.info,\r\n\r\n    // process.stderr:\r\n    error: console.error,\r\n    warn: console.warn\r\n};\r\n\r\nfunction colorize(value, color, isMsg) {\r\n    value = isMsg && typeof value === 'string' ? value : util.inspect(value);\r\n    return \"\\x1b[\" + color + 'm' + value + \"\\x1b[0m\";\r\n}\r\n\r\nfunction format(stream, values, color) {\r\n    if (stream.isTTY) {\r\n        if (values.length && typeof values[0] === 'string') {\r\n            return [colorize(util.format.apply(null, values), color, true)];\r\n        }\r\n        return Object.keys(values).map(function (key) {\r\n            return colorize(values[key], color);\r\n        });\r\n    }\r\n    return values;\r\n}\r\n\r\n/**\r\n * @class Writer\r\n * @param noLock\r\n */\r\nfunction Writer(noLock) {\r\n\r\n    var self = this;\r\n\r\n    /**\r\n     * @method Writer.log\r\n     * @description\r\n     * Formats and sends console.log into stdout.\r\n     */\r\n    this.log = function () {\r\n        $def.log.apply(null, format(process.stdout, arguments, getColor(self.log, 39, 97)));\r\n    };\r\n\r\n    /**\r\n     * @method Writer.error\r\n     * @description\r\n     * Formats and sends console.error into stderr.\r\n     */\r\n    this.error = function () {\r\n        $def.error.apply(null, format(process.stderr, arguments, getColor(self.error, 31, 91)));\r\n    };\r\n\r\n    /**\r\n     * @method Writer.warn\r\n     * @description\r\n     * Formats and sends console.log into stderr.\r\n     */\r\n    this.warn = function () {\r\n        $def.warn.apply(null, format(process.stderr, arguments, getColor(self.warn, 33, 93)));\r\n    };\r\n\r\n    /**\r\n     * @method Writer.info\r\n     * @description\r\n     * Formats and sends console.log into stdout.\r\n     */\r\n    this.info = function () {\r\n        $def.info.apply(null, format(process.stdout, arguments, getColor(self.info, 36, 96)));\r\n    };\r\n\r\n    /**\r\n     * @method Writer.log\r\n     * @description\r\n     * Formats and sends console.log into stdout.\r\n     */\r\n    this.success = function () {\r\n        $def.log.apply(null, format(process.stdout, arguments, getColor(self.success, 32, 92)));\r\n    };\r\n\r\n    /**\r\n     * @method Writer.write\r\n     * @description\r\n     * Formats and sends custom-color values either into stdout or stderr.\r\n     *\r\n     * @param {} values - output parameters\r\n     *\r\n     * @param {number} color - output color: 0 <= color <= 256\r\n     *\r\n     * @param {boolean}[isError=false] - sends console.error into stderr;\r\n     * By default, the method sends console.log into stdout.\r\n     *\r\n     */\r\n    this.write = function (values, color, isError) {\r\n        var method = $def.log, stream = process.stdout;\r\n        if (isError) {\r\n            method = $def.error;\r\n            stream = process.stderr;\r\n        }\r\n        if (color !== +color || color < 0 || color > 256) {\r\n            method.apply(null, values);\r\n        } else {\r\n            method.apply(null, format(stream, values, color));\r\n        }\r\n    };\r\n\r\n    addProperties('log');\r\n    addProperties('error');\r\n    addProperties('warn');\r\n    addProperties('info');\r\n    addProperties('success');\r\n\r\n    /**\r\n     * @method Writer.setBright\r\n     * @description\r\n     * Set brightness for all methods at once.\r\n     *\r\n     * @param {boolean} [bright=true]\r\n     * Indicates whether the color is to be set to be bright.\r\n     *\r\n     */\r\n    this.setBright = function (bright) {\r\n        // set to bright colors, if the flag is truthy or undefined;\r\n        // set to dim colors, if flag is falsy\r\n        bright = bright === undefined ? true : !!bright;\r\n\r\n        self.log.bright = bright;\r\n        self.error.bright = bright;\r\n        self.warn.bright = bright;\r\n        self.success.bright = bright;\r\n        self.info.bright = bright;\r\n    };\r\n\r\n    if (!noLock) {\r\n        Object.freeze(this);\r\n    }\r\n\r\n    function addProperties(name, color) {\r\n\r\n        // brightness for the predefined color:\r\n        Object.defineProperty(self[name], 'bright', {\r\n            value: false,\r\n            writable: true\r\n        });\r\n\r\n        // override for the predefined color:\r\n        Object.defineProperty(self[name], 'color', {\r\n            writable: true\r\n        });\r\n\r\n        Object.seal(self[name]);\r\n    }\r\n\r\n}\r\n\r\nfunction getColor(prop, normal, bright) {\r\n    var c = prop.color;\r\n    return (c === +c && c >= 0 && c <= 256) ? c : (prop.bright ? bright : normal);\r\n}\r\n\r\nmodule.exports = Writer;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/manakin/lib/writer.js\n// module id = 104\n// module chunks = 0","'use strict';\r\n\r\nvar os = require('os');\r\nvar errorLib = require('./error');\r\n\r\nvar PEC = errorLib.parsingErrorCode;\r\n\r\n// symbols that need no spaces around them:\r\nvar compressors = '.,;:()[]=<>+-*/|!?@#';\r\n\r\n///////////////////////////////////////////\r\n// Parses and minifies a PostgreSQL script.\r\nfunction minify(sql, options) {\r\n\r\n    if (typeof sql !== 'string') {\r\n        throw new TypeError(\"Input SQL must be a text string.\");\r\n    }\r\n\r\n    if (options !== undefined && typeof options !== 'object') {\r\n        throw new TypeError(\"Parameter 'options' must be an object.\");\r\n    }\r\n\r\n    if (!sql.length) {\r\n        return '';\r\n    }\r\n\r\n    var idx = 0, // current index\r\n        result = '', // resulting sql\r\n        len = sql.length, // sql length\r\n        EOL = getEOL(sql), // end-of-line\r\n        space = false, // add a space on the next step\r\n        compress = options && options.compress; // option 'compress'\r\n\r\n    do {\r\n        var s = sql[idx], // current symbol;\r\n            s1 = idx < len - 1 ? sql[idx + 1] : ''; // next symbol;\r\n\r\n        if (isGap(s)) {\r\n            while (++idx < len && isGap(sql[idx]));\r\n            if (idx < len) {\r\n                space = true;\r\n            }\r\n            idx--;\r\n            continue;\r\n        }\r\n\r\n        if (s === '-' && s1 === '-') {\r\n            var lb = sql.indexOf(EOL, idx + 2);\r\n            if (lb < 0) {\r\n                break;\r\n            }\r\n            idx = lb - 1;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        if (s === '/' && s1 === '*') {\r\n            var end = sql.indexOf('*/', idx + 2);\r\n            if (end < 0) {\r\n                throwError(PEC.unclosedMLC);\r\n            }\r\n            idx = end + 1;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        if (s === '\"') {\r\n            var closeIdx = sql.indexOf('\"', idx + 1);\r\n            if (closeIdx < 0) {\r\n                throwError(PEC.unclosedQI);\r\n            }\r\n            var text = sql.substr(idx, closeIdx - idx + 1);\r\n            if (text.indexOf(EOL) > 0) {\r\n                throwError(PEC.multiLineQI);\r\n            }\r\n            if (compress) {\r\n                space = false;\r\n            }\r\n            addSpace();\r\n            result += text;\r\n            idx = closeIdx;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        if (s === '\\'') {\r\n            var closeIdx = idx;\r\n            do {\r\n                closeIdx = sql.indexOf('\\'', closeIdx + 1);\r\n                if (closeIdx > 0) {\r\n                    var step = closeIdx;\r\n                    while (++step < len && sql[step] === '\\'');\r\n                    if ((step - closeIdx) % 2) {\r\n                        closeIdx = step - 1;\r\n                        break;\r\n                    }\r\n                    closeIdx = step === len ? -1 : step;\r\n                }\r\n            } while (closeIdx > 0);\r\n            if (closeIdx < 0) {\r\n                throwError(PEC.unclosedText);\r\n            }\r\n            if (compress) {\r\n                space = false;\r\n            }\r\n            addSpace();\r\n            var text = sql.substr(idx, closeIdx - idx + 1);\r\n            var hasLB = text.indexOf(EOL) > 0;\r\n            if (hasLB) {\r\n                text = text.split(EOL).map(function (m) {\r\n                    return m.replace(/^\\s+|\\s+$/g, '');\r\n                }).join('\\\\n');\r\n            }\r\n            var hasTabs = text.indexOf('\\t') > 0;\r\n            if (hasLB || hasTabs) {\r\n                var prev = idx ? sql[idx - 1] : '';\r\n                if (prev !== 'E' && prev !== 'e') {\r\n                    var r = result ? result[result.length - 1] : '';\r\n                    if (r && r !== ' ' && compressors.indexOf(r) < 0) {\r\n                        result += ' ';\r\n                    }\r\n                    result += 'E';\r\n                }\r\n                if (hasTabs) {\r\n                    text = text.replace(/\\t/g, '\\\\t');\r\n                }\r\n            }\r\n            result += text;\r\n            idx = closeIdx;\r\n            skipGaps();\r\n            continue;\r\n        }\r\n\r\n        if (compress && compressors.indexOf(s) >= 0) {\r\n            space = false;\r\n            skipGaps();\r\n        }\r\n\r\n        addSpace();\r\n        result += s;\r\n\r\n    } while (++idx < len);\r\n\r\n    return result;\r\n\r\n    function skipGaps() {\r\n        if (compress) {\r\n            while (idx < len - 1 && isGap(sql[idx + 1])) {\r\n                idx++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addSpace() {\r\n        if (space) {\r\n            if (result.length) {\r\n                result += ' ';\r\n            }\r\n            space = false;\r\n        }\r\n    }\r\n\r\n    function throwError(code) {\r\n        var position = getIndexPos(sql, idx, EOL);\r\n        throw new errorLib.SQLParsingError(code, position);\r\n    }\r\n}\r\n\r\n//////////////////////////////////////\r\n// Returns the End-Of-Line from text.\r\nfunction getEOL(text) {\r\n    var idx = 0, unix = 0, windows = 0;\r\n    while (idx < text.length) {\r\n        idx = text.indexOf('\\n', idx);\r\n        if (idx == -1) {\r\n            break;\r\n        }\r\n        if (idx > 0 && text[idx - 1] === '\\r') {\r\n            windows++;\r\n        } else {\r\n            unix++;\r\n        }\r\n        idx++;\r\n    }\r\n    if (unix === windows) {\r\n        return os.EOL;\r\n    }\r\n    return unix > windows ? '\\n' : '\\r\\n';\r\n}\r\n\r\n///////////////////////////////////////////////////////\r\n// Returns {line, column} of an index within the text.\r\nfunction getIndexPos(text, index, eol) {\r\n    var lineIdx = 0, colIdx = index, pos = 0;\r\n    do {\r\n        pos = text.indexOf(eol, pos);\r\n        if (pos == -1 || index < pos + eol.length) {\r\n            break;\r\n        }\r\n        lineIdx++;\r\n        pos += eol.length;\r\n        colIdx = index - pos;\r\n    } while (pos < index);\r\n    return {\r\n        line: lineIdx + 1,\r\n        column: colIdx + 1\r\n    };\r\n}\r\n\r\n////////////////////////////////////\r\n// Identifies a gap / empty symbol.\r\nfunction isGap(s) {\r\n    return s === ' ' || s === '\\t' || s === '\\r' || s === '\\n';\r\n}\r\n\r\nmodule.exports = {\r\n    minify: minify,\r\n\r\n    // these are exported only for testing:\r\n    getEOL: getEOL,\r\n    getIndexPos: getIndexPos\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-minify/lib/parser.js\n// module id = 105\n// module chunks = 0","'use strict';\r\n\r\n/**\r\n * ES6 generators\r\n * @module async\r\n * @author Vitaly Tomilov\r\n * @private\r\n */\r\nmodule.exports = function (config) {\r\n\r\n    /////////////////////////////////\r\n    // Generator-to-Promise adapter;\r\n    //\r\n    // Based on: https://www.promisejs.org/generators/#both\r\n    return function (generator) {\r\n        var $p = config.promise;\r\n        return function () {\r\n            var g = generator.apply(this, arguments);\r\n\r\n            function handle(result) {\r\n                if (result.done) {\r\n                    return $p.resolve(result.value);\r\n                }\r\n                return $p.resolve(result.value)\r\n                    .then(function (res) {\r\n                        return handle(g.next(res));\r\n                    }, function (err) {\r\n                        return handle(g.throw(err));\r\n                    });\r\n            }\r\n\r\n            return handle(g.next());\r\n        }\r\n    };\r\n\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/async.js\n// module id = 106\n// module chunks = 0","'use strict';\r\n\r\n/**\r\n * @constructor ConnectionContext\r\n * @private\r\n * @summary Connection context object.\r\n * @param {object} cn\r\n * @param {} dc\r\n * @param {object} options\r\n * @param {object} db\r\n * @param {number} txLevel\r\n */\r\nfunction ConnectionContext(cn, dc, options, db, txLevel) {\r\n\r\n    this.cn = cn; // connection details;\r\n    this.dc = dc; // database context;\r\n    this.options = options; // library options;\r\n    this.db = db; // database session;\r\n    this.txLevel = txLevel; // transaction level;\r\n\r\n    this.connect = function (db) {\r\n        this.db = db;\r\n    };\r\n\r\n    this.disconnect = function () {\r\n        if (this.db) {\r\n            this.db.done();\r\n            this.db = null;\r\n        }\r\n    };\r\n\r\n    this.clone = function () {\r\n        return new ConnectionContext(this.cn, this.dc, this.options, this.db, this.txLevel);\r\n    };\r\n}\r\n\r\n/**\r\n * Connection Context\r\n * @module context\r\n * @author Vitaly Tomilov\r\n * @private\r\n */\r\nmodule.exports = ConnectionContext;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/cnContext.js\n// module id = 107\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    con: require('manakin').local,\r\n    utils: require('./utils'),\r\n    events: require('./events')\r\n};\r\n\r\nfunction poolConnect(ctx, config) {\r\n    return config.promise(function (resolve, reject) {\r\n        config.pgp.pg.connect(ctx.cn, function (err, client, done) {\r\n            if (err) {\r\n                $npm.events.error(ctx.options, err, {\r\n                    cn: $npm.utils.getSafeConnection(ctx.cn),\r\n                    dc: ctx.dc\r\n                });\r\n                reject(err);\r\n            } else {\r\n                var isFresh = !client.$used;\r\n                if (isFresh) {\r\n                    $npm.utils.addReadProp(client, '$used', true, true);\r\n                }\r\n                setCtx(client, ctx);\r\n                var end = lockClientEnd(client);\r\n                resolve({\r\n                    isFresh: isFresh,\r\n                    client: client,\r\n                    done: function () {\r\n                        client.end = end;\r\n                        done();\r\n                        $npm.events.disconnect(ctx, client);\r\n                    }\r\n                });\r\n                $npm.events.connect(ctx, client, isFresh);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction directConnect(ctx, config) {\r\n    return config.promise(function (resolve, reject) {\r\n        var client = new config.pgp.pg.Client(ctx.cn);\r\n        client.connect(function (err) {\r\n            if (err) {\r\n                $npm.events.error(ctx.options, err, {\r\n                    cn: $npm.utils.getSafeConnection(ctx.cn),\r\n                    dc: ctx.dc\r\n                });\r\n                reject(err);\r\n            } else {\r\n                setCtx(client, ctx);\r\n                var end = lockClientEnd(client);\r\n                resolve({\r\n                    isFresh: true,\r\n                    client: client,\r\n                    done: function () {\r\n                        client.end = end;\r\n                        client.end();\r\n                        $npm.events.disconnect(ctx, client);\r\n                    }\r\n                });\r\n                $npm.events.connect(ctx, client, true);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction lockClientEnd(client) {\r\n    var end = client.end;\r\n    client.end = function () {\r\n        // This call can happen only in the following two cases:\r\n        // 1. the client made the call directly, against the library's documentation (invalid code)\r\n        // 2. connection with the server broke while under heavy communications, and the connection\r\n        //    pool is trying to terminate all clients forcefully.\r\n        $npm.con.error(\"Abnormal client.end() call, due to invalid code or failed server connection.\\n%s\\n\",\r\n            $npm.utils.getLocalStack(3));\r\n        end.call(client);\r\n    };\r\n    return end;\r\n}\r\n\r\nfunction setCtx(client, ctx) {\r\n    Object.defineProperty(client, '$ctx', {\r\n        value: ctx,\r\n        writable: true\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return {\r\n        pool: function (ctx) {\r\n            return poolConnect(ctx, config);\r\n        },\r\n        direct: function (ctx) {\r\n            return directConnect(ctx, config);\r\n        }\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/connect.js\n// module id = 108\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    con: require('manakin').local,\r\n    result: require('./result'),\r\n    special: require('./special'),\r\n    context: require('./cnContext'),\r\n    events: require('./events'),\r\n    utils: require('./utils'),\r\n    connect: require('./connect'),\r\n    query: require('./query'),\r\n    task: require('./task')\r\n};\r\n\r\nvar $arr = require('./array');\r\n\r\n/**\r\n * @class Database\r\n * @description\r\n *\r\n * Represents the database protocol, extensible via event {@link event:extend extend}.\r\n * This type is not available directly, it can only be created via the library's base call.\r\n *\r\n * **IMPORTANT:**\r\n *\r\n * For any given connection, you should only create a single {@link Database} object in a separate module,\r\n * to be shared in your application (see the code example below). If instead you keep creating the {@link Database}\r\n * object dynamically, your application will suffer from loss in performance, and will be getting a warning in a\r\n * development environment (when `NODE_ENV` = `development`):\r\n *\r\n * `WARNING: Creating a duplicate database object for the same connection.`\r\n *\r\n * If you ever see this warning, rectify your {@link Database} object initialization, so there is only one object\r\n * per connection details. See the example provided below.\r\n *\r\n * See also: property `noWarnings` in {@link module:pg-promise Initialization Options}.\r\n *\r\n * @param {String|Object} cn\r\n * Database connection details, which can be:\r\n *\r\n * - a configuration object\r\n * - a connection string\r\n *\r\n * For details see {@link https://github.com/vitaly-t/pg-promise/wiki/Connection-Syntax Connection Syntax}.\r\n *\r\n * @param {} [dc]\r\n * Database Context.\r\n *\r\n * Any object or value to be propagated through the protocol, to allow implementations\r\n * and event handling that depend on the database context.\r\n *\r\n * This is mainly to facilitate the use of multiple databases which may need separate protocol\r\n * extensions, or different implementations within a single task / transaction callback,\r\n * depending on the database context.\r\n *\r\n * @returns {Database}\r\n *\r\n * @see\r\n *\r\n * {@link Database.query query},\r\n * {@link Database.none none},\r\n * {@link Database.one one},\r\n * {@link Database.oneOrNone oneOrNone},\r\n * {@link Database.many many},\r\n * {@link Database.manyOrNone manyOrNone},\r\n * {@link Database.any any},\r\n * {@link Database.func func},\r\n * {@link Database.proc proc},\r\n * {@link Database.result result},\r\n * {@link Database.map map},\r\n * {@link Database.each each},\r\n * {@link Database.stream stream},\r\n * {@link Database.task task},\r\n * {@link Database.tx tx},\r\n * {@link Database.connect connect},\r\n * {@link Database.$config $config},\r\n * {@link event:extend extend}\r\n *\r\n * @example\r\n * // Proper way to initialize and share the Database object\r\n *\r\n * // Loading and initializing the library:\r\n * var pgp = require('pg-promise')({\r\n *     // Initialization Options\r\n * });\r\n *\r\n * // Preparing the connection details:\r\n * var cn = \"postgres://username:password@host:port/database\";\r\n *\r\n * // Creating a new database instance from the connection details:\r\n * var db = pgp(cn);\r\n *\r\n * // Exporting the database object for shared use:\r\n * module.exports = db;\r\n */\r\nfunction Database(cn, dc, config) {\r\n\r\n    checkForDuplicates(cn, config);\r\n    setErrorHandler(config);\r\n\r\n    var $p = config.promise;\r\n\r\n    /**\r\n     * @method Database.connect\r\n     *\r\n     * @description\r\n     * Acquires a new or existing connection, based on the current connection parameters.\r\n     *\r\n     * This method creates a shared connection for executing a chain of queries against it.\r\n     * The connection must be released in the end of the chain by calling method `done()` on the connection object.\r\n     *\r\n     * This is an older, low-level approach to chaining queries on the same connection.\r\n     * A newer and safer approach is via methods {@link Database.task task} and {@link Database.tx tx} (for transactions),\r\n     * which allocate and release the shared connection automatically.\r\n     *\r\n     * **NOTE:** Even though this method exposes a {@link external:Client Client} object via property `client`,\r\n     * you cannot call `client.end()` directly, or it will print an error into the console:\r\n     * `Abnormal client.end() call, due to invalid code or failed server connection.`\r\n     * You should only call method `done()` to release the connection.\r\n     *\r\n     * @param {object} [options]\r\n     * @param {boolean} [options.direct=false]\r\n     * Creates the connection directly, through the {@link external:Client Client}, bypassing the connection pool.\r\n     *\r\n     * By default, all connections are acquired from the connection pool. If you set this option, the library will instead\r\n     * create a new {@link external:Client Client} object directly (separately from the pool), and then call its `connect` method.\r\n     *\r\n     * **WARNING:**\r\n     *\r\n     * Do not use this option for regular query execution, because it exclusively occupies one physical connection,\r\n     * and therefore cannot scale. This option is only suitable for global connection usage, such as database event listeners.\r\n     *\r\n     * @returns {external:Promise}\r\n     * A promise object that represents the connection result:\r\n     *  - resolves with the complete {@link Database} protocol, extended with:\r\n     *    - property `client` of type {@link external:Client Client} that represents the open connection\r\n     *    - method `done()` that must be called in the end, in order to release the connection\r\n     *  - rejects with a connection-related error when it fails to connect.\r\n     *\r\n     * @see\r\n     * {@link Database.task},\r\n     * {@link Database.tx}\r\n     *\r\n     * @example\r\n     *\r\n     * var sco; // shared connection object;\r\n     *\r\n     * db.connect()\r\n     *     .then(function (obj) {\r\n     *         // obj.client = new connected Client object;\r\n     *\r\n     *         sco = obj; // save the connection object;\r\n     *\r\n     *         // execute all the queries you need:\r\n     *         return sco.any('SELECT * FROM Users');\r\n     *     })\r\n     *     .then(function (data) {\r\n     *         // success\r\n     *     })\r\n     *     .catch(function (error) {\r\n     *         // error\r\n     *     })\r\n     *     .finally(function () {\r\n     *         // release the connection, if it was successful:\r\n     *         if (sco) {\r\n     *             sco.done();\r\n     *         }\r\n     *     });\r\n     *\r\n     */\r\n    this.connect = function (options) {\r\n        var ctx = createContext();\r\n        var self = {\r\n            // Generic query method;\r\n            query: function (query, values, qrm) {\r\n                if (!ctx.db) {\r\n                    throw new Error(\"Cannot execute a query on a disconnected client.\");\r\n                }\r\n                return config.$npm.query.call(this, ctx, query, values, qrm);\r\n            },\r\n            // Connection release method;\r\n            done: function () {\r\n                if (!ctx.db) {\r\n                    throw new Error(\"Cannot invoke done() on a disconnected client.\");\r\n                }\r\n                ctx.disconnect();\r\n            }\r\n        };\r\n        var method = (options && options.direct) ? 'direct' : 'pool';\r\n        return config.$npm.connect[method](ctx)\r\n            .then(function (db) {\r\n                ctx.connect(db);\r\n                self.client = db.client;\r\n                extend(ctx, self);\r\n                return self;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * @method Database.query\r\n     *\r\n     * @description\r\n     * Executes a generic query request that expects the return data according to parameter `qrm`.\r\n     *\r\n     * @param {String|Object} query\r\n     * Query to be executed, which can any of the following types:\r\n     * - A non-empty query string\r\n     * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n     * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n     * - {@link QueryFile} object\r\n     *\r\n     * @param {array|value} [values]\r\n     * Query formatting parameters.\r\n     *\r\n     * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n     * - a single value - to replace all `$1` occurrences\r\n     * - an array of values - to replace all `$1`, `$2`, ... variables\r\n     * - an object - to apply $[Named Parameters] formatting\r\n     *\r\n     * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n     * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n     * as an override for its internal `values`.\r\n     *\r\n     * @param {queryResult} [qrm=queryResult.any]\r\n     * {@link queryResult Query Result Mask}\r\n     *\r\n     * @returns {external:Promise}\r\n     * A promise object that represents the query result.\r\n     *\r\n     * When the query result is an array, it is extended with hidden property `duration` -\r\n     * number of milliseconds it took the client to execute the query.\r\n     */\r\n    this.query = function (query, values, qrm) {\r\n        var self = this, ctx = createContext();\r\n        return config.$npm.connect.pool(ctx)\r\n            .then(function (db) {\r\n                ctx.connect(db);\r\n                return config.$npm.query.call(self, ctx, query, values, qrm);\r\n            })\r\n            .then(function (data) {\r\n                ctx.disconnect();\r\n                return data;\r\n            })\r\n            .catch(function (error) {\r\n                ctx.disconnect();\r\n                return $p.reject(error);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * @member {object} Database.$config\r\n     * @readonly\r\n     * @description\r\n     * This is a hidden property, to help integrating type {@link Database} directly with third-party libraries.\r\n     *\r\n     * Properties available in the object:\r\n     * - `pgp` - instance of the entire library after initialization\r\n     * - `options` - the library's {@link module:pg-promise Initialization Options} object\r\n     * - `promiseLib` - instance of the promise library that's used\r\n     * - `promise` - generic promise interface that uses `promiseLib` via 3 basic methods:\r\n     *   - `promise((resolve, reject)=>{})` - to create a new promise\r\n     *   - `promise.resolve(value)` - to resolve with a value\r\n     *   - `promise.reject(value)` - to reject with a value\r\n     * - `version` - this library's version\r\n     * - `$npm` _(hidden property)_ - internal module cache\r\n     *\r\n     * @example\r\n     *\r\n     * // Using the promise protocol as configured by pg-promise:\r\n     *\r\n     * var $p = db.$config.promise;\r\n     *\r\n     * var resolvedPromise = $p.resolve('some data');\r\n     * var rejectedPromise = $p.reject('some reason');\r\n     *\r\n     * var newPromise = $p(function(resolve, reject) {\r\n     *     // call either resolve(data) or reject(reason) here\r\n     * });\r\n     */\r\n    $npm.utils.addReadProp(this, '$config', config, true);\r\n\r\n    extend(createContext(), this); // extending root protocol;\r\n\r\n    function createContext() {\r\n        return new $npm.context(cn, dc, config.options);\r\n    }\r\n\r\n    function transform(value, cb, thisArg) {\r\n        if (typeof cb === 'function') {\r\n            value = value.then(function (data) {\r\n                return cb.call(thisArg, data);\r\n            });\r\n        }\r\n        return value;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////\r\n    // Injects additional methods into an access object,\r\n    // extending the protocol's base method 'query'.\r\n    function extend(ctx, obj) {\r\n\r\n        /**\r\n         * @method Database.none\r\n         * @description\r\n         * Executes a query that expects no data to be returned.\r\n         * If the query returns any kind of data, the method rejects.\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When no records are returned, it resolves with `null`.\r\n         * - When any data is returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No return data was expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.notEmpty queryResultErrorCode.notEmpty}\r\n         */\r\n        obj.none = function (query, values) {\r\n            return obj.query.call(this, query, values, $npm.result.none);\r\n        };\r\n\r\n        /**\r\n         * @method Database.one\r\n         * @description\r\n         * Executes a query that expects exactly one row of data.\r\n         * When 0 or more than 1 rows are returned, the method rejects.\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value transformation callback, to allow in-line value change.\r\n         * When specified, the return value replaces the original resolved value.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When 1 row is returned, it resolves with that row as a single object.\r\n         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No data returned from the query.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}\r\n         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `Multiple rows were not expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation:\r\n         * db.one('INSERT INTO Events VALUES($1) RETURNING id', [123], event => event.id)\r\n         *     .then(data=> {\r\n         *         // data = a new event id, rather than an object with it\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation + conversion:\r\n         * db.one('SELECT count(*) FROM Users', null, c => +c.count)\r\n         *     .then(count=> {\r\n         *         // count = a proper integer value, rather than an object with a string\r\n         *     });\r\n         *\r\n         */\r\n        obj.one = function (query, values, cb, thisArg) {\r\n            var v = obj.query.call(this, query, values, $npm.result.one);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database.many\r\n         * @description\r\n         * Executes a query that expects one or more rows.\r\n         * When the query returns no rows, the method rejects.\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When 1 or more rows are returned, it resolves with the array of rows. The array is extended with\r\n         *   hidden property `duration` - number of milliseconds it took the client to execute the query.\r\n         * - When no rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `No data returned from the query.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.noData queryResultErrorCode.noData}\r\n         */\r\n        obj.many = function (query, values) {\r\n            return obj.query.call(this, query, values, $npm.result.many);\r\n        };\r\n\r\n        /**\r\n         * @method Database.oneOrNone\r\n         * @description\r\n         * Executes a query that expects 0 or 1 rows.\r\n         * When the query returns more than 1 row, the method rejects.\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value transformation callback, to allow in-line value change.\r\n         * When specified, the return value replaces the original resolved value.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with `null`.\r\n         * - When 1 row is returned, it resolves with that row as a single object.\r\n         * - When multiple rows are returned, it rejects with {@link errors.QueryResultError QueryResultError}:\r\n         *   - `.message` = `Multiple rows were not expected.`\r\n         *   - `.code` = {@link errors.queryResultErrorCode.multiple queryResultErrorCode.multiple}\r\n         *\r\n         * @see\r\n         * {@link Database.one one},\r\n         * {@link Database.none none}\r\n         *\r\n         * @example\r\n         *\r\n         * // a query with in-line value transformation:\r\n         * db.oneOrNone('SELECT id FROM Events WHERE type = $1', ['entry'], e => e && e.id)\r\n         *     .then(data=> {\r\n         *         // data = the event id or null (rather than object or null)\r\n         *     });\r\n         *\r\n         */\r\n        obj.oneOrNone = function (query, values, cb, thisArg) {\r\n            var v = obj.query.call(this, query, values, $npm.result.one | $npm.result.none);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database.manyOrNone\r\n         * @description\r\n         * Executes a query that expects any number of rows.\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with an empty array.\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         *\r\n         * The resolved array is extended with hidden property `duration` - number of milliseconds\r\n         * it took the client to execute the query.\r\n         *\r\n         * @see {@link Database.any any}\r\n         *\r\n         */\r\n        obj.manyOrNone = function (query, values) {\r\n            return obj.query.call(this, query, values, $npm.result.many | $npm.result.none);\r\n        };\r\n\r\n        /**\r\n         * @method Database.any\r\n         * @description\r\n         * Executes a query that expects any number of rows.\r\n         * This is simply a shorter alias for method {@link Database.manyOrNone manyOrNone}.\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - When no rows are returned, it resolves with an empty array.\r\n         * - When 1 or more rows are returned, it resolves with the array of rows.\r\n         *\r\n         * The resolved array is extended with hidden property `duration` - number of milliseconds\r\n         * it took the client to execute the query.\r\n         *\r\n         * @see\r\n         * {@link Database.manyOrNone manyOrNone},\r\n         * {@link Database.map map},\r\n         * {@link Database.each each}\r\n         *\r\n         */\r\n        obj.any = function (query, values) {\r\n            return obj.query.call(this, query, values, $npm.result.any);\r\n        };\r\n\r\n        /**\r\n         * @method Database.result\r\n         * @description\r\n         * Executes a query without any expectation for the return data, to resolve with the\r\n         * original $[Result] object when successful.\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value transformation callback, to allow in-line value change.\r\n         * When specified, the return value replaces the original resolved value.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * A promise object that represents the query result:\r\n         * - resolves with the original $[Result] object, extended with property `duration` -\r\n         *   number of milliseconds it took the client to execute the query.\r\n         *\r\n         * @example\r\n         *\r\n         * // use of value transformation:\r\n         * // deleting rows and returning the number of rows deleted\r\n         * db.result('DELETE FROM Events WHERE id = $1', [123], r=>r.rowCount)\r\n         *     .then(data=> {\r\n         *         // data = number of rows that were deleted\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // use of value transformation:\r\n         * // getting only column details from a table\r\n         * db.result('SELECT * FROM Users LIMIT 0', null, r=>r.fields)\r\n         *     .then(data=> {\r\n         *         // data = array of column descriptors\r\n         *     });\r\n         *\r\n         */\r\n        obj.result = function (query, values, cb, thisArg) {\r\n            var v = obj.query.call(this, query, values, $npm.special.cache.resultQuery);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database.stream\r\n         * @description\r\n         * Custom data streaming, with the help of $[pg-query-stream].\r\n         *\r\n         * This method doesn't work with the $[Native Bindings], and if option `pgNative`\r\n         * is set, it will reject with `Streaming doesn't work with Native Bindings.`\r\n         *\r\n         * @param {QueryStream} qs\r\n         * Stream object of type $[QueryStream].\r\n         *\r\n         * @param {Database.streamInitCB} initCB\r\n         * Stream initialization callback.\r\n         *\r\n         * It is invoked with the same `this` context as the calling method.\r\n         *\r\n         * @returns {external:Promise}\r\n         * Result of the streaming operation.\r\n         *\r\n         * Once the streaming has finished successfully, the method resolves with\r\n         * `{processed, duration}`:\r\n         * - `processed` - total number of rows processed;\r\n         * - `duration` - streaming duration, in milliseconds.\r\n         *\r\n         * Possible rejections messages:\r\n         * - `Invalid or missing stream object.`\r\n         * - `Invalid stream state.`\r\n         * - `Invalid or missing stream initialization callback.`\r\n         */\r\n        obj.stream = function (qs, init) {\r\n            return obj.query.call(this, qs, init, $npm.special.cache.streamQuery);\r\n        };\r\n\r\n        /**\r\n         * @method Database.func\r\n         * @description\r\n         * Executes a query against a database function by its name: `SELECT * FROM funcName(values)`.\r\n         *\r\n         * @param {string} funcName\r\n         * Name of the function to be executed.\r\n         *\r\n         * @param {array|value} [values]\r\n         * Parameters for the function - one value or an array of values.\r\n         *\r\n         * @param {queryResult} [qrm=queryResult.any] - {@link queryResult Query Result Mask}.\r\n         *\r\n         * @returns {external:Promise}\r\n         *\r\n         * A promise object as returned from method {@link Database.query query}, according to parameter `qrm`.\r\n         *\r\n         * @see\r\n         * {@link Database.query query},\r\n         * {@link Database.proc proc}\r\n         */\r\n        obj.func = function (funcName, values, qrm) {\r\n            return obj.query.call(this, {\r\n                funcName: funcName\r\n            }, values, qrm);\r\n        };\r\n\r\n        /**\r\n         * @method Database.proc\r\n         * @description\r\n         * Executes a query against a stored procedure via its name: `select * from procName(values)`,\r\n         * expecting back 0 or 1 rows.\r\n         *\r\n         * The method simply forwards into {@link Database.func func}`(procName, values, queryResult.one|queryResult.none)`.\r\n         *\r\n         * @param {string} procName\r\n         * Name of the stored procedure to be executed.\r\n         *\r\n         * @param {array|value} [values]\r\n         * Parameters for the procedure - one value or an array of values.\r\n         *\r\n         * @param {function} [cb]\r\n         * Value transformation callback, to allow in-line value change.\r\n         * When specified, the return value replaces the original resolved value.\r\n         *\r\n         * The function takes only one parameter - value resolved from the query.\r\n         *\r\n         * @param {} [thisArg]\r\n         * Value to use as `this` when executing the transformation callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         *\r\n         * It calls {@link Database.func func}(`procName`, `values`, `queryResult.one|queryResult.none`),\r\n         * and then returns the same result as method {@link Database.oneOrNone oneOrNone}.\r\n         *\r\n         * @see\r\n         * {@link Database.oneOrNone oneOrNone},\r\n         * {@link Database.func func}\r\n         */\r\n        obj.proc = function (procName, values, cb, thisArg) {\r\n            var v = obj.func.call(this, procName, values, $npm.result.one | $npm.result.none);\r\n            return transform(v, cb, thisArg);\r\n        };\r\n\r\n        /**\r\n         * @method Database.map\r\n         * @description\r\n         * Creates a new array with the results of calling a provided function on every element in the array of rows\r\n         * resolved by method {@link Database.any any}.\r\n         *\r\n         * It is a convenience method to reduce the following code:\r\n         *\r\n         * ```js\r\n         * db.any(query, values)\r\n         *     .then(function(data) {\r\n         *         return data.map(function(row, index, data) {\r\n         *              // return a new element\r\n         *         });\r\n         *     });\r\n         * ```\r\n         *\r\n         * In addition to much shorter code, it offers the following benefits:\r\n         *\r\n         * - Use of a custom iterator has a much better performance than the standard {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map Array.map}\r\n         * - Automatic `this` context through the database protocol\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} values\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} cb\r\n         * Function that produces an element of the new array, taking three arguments:\r\n         * - `row` - the current row object being processed in the array\r\n         * - `index` - the index of the current row being processed in the array\r\n         * - `data` - the original array of rows resolved by method {@link Database.any any}\r\n         *\r\n         * @param {} [thisArg]\r\n         * Value to use as `this` when executing the callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * Resolves with the new array of values returned from the callback. The array is extended with\r\n         * hidden property `duration` - number of milliseconds it took the client to execute the query.\r\n         *\r\n         * @see\r\n         * {@link Database.any any},\r\n         * {@link Database.each each},\r\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map Array.map}\r\n         *\r\n         * @example\r\n         *\r\n         * db.map('SELECT id FROM Users WHERE status = $1', ['active'], row => row.id)\r\n         *     .then(data => {\r\n         *         // data = array of active user id-s\r\n         *     })\r\n         *     .catch(error => {\r\n         *        // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * db.tx(t => {\r\n         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], row => {\r\n         *        return t.none('UPDATE Events SET checked = $1 WHERE userId = $2', [true, row.id]);\r\n         *     }).then(t.batch);\r\n         * })\r\n         *     .then(data => {\r\n         *         // success\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // Build a list of active users, each with the list of user events:\r\n         * db.task(t => {\r\n         *     return t.map('SELECT id FROM Users WHERE status = $1', ['active'], user => {\r\n         *         return t.any('SELECT * FROM Events WHERE userId = $1', user.id)\r\n         *             .then(events=> {\r\n         *                 user.events = events;\r\n         *                 return user;\r\n         *             });\r\n         *     }).then(t.batch);\r\n         * })\r\n         *     .then(data => {\r\n         *         // success\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.map = function (query, values, cb, thisArg) {\r\n            return obj.any.call(this, query, values)\r\n                .then(function (data) {\r\n                    var result = $arr.map(data, cb, thisArg);\r\n                    $npm.utils.addReadProp(result, 'duration', data.duration, true);\r\n                    return result;\r\n                });\r\n        };\r\n\r\n        /**\r\n         * @method Database.each\r\n         * @description\r\n         * Executes a provided function once per array element, for an array of rows resolved by method {@link Database.any any}.\r\n         *\r\n         * It is a convenience method to reduce the following code:\r\n         *\r\n         * ```js\r\n         * db.any(query, values)\r\n         *     .then(function(data) {\r\n         *         data.forEach(function(row, index, data) {\r\n         *              // process the row\r\n         *         });\r\n         *         return data;\r\n         *     });\r\n         * ```\r\n         *\r\n         * In addition to much shorter code, it offers the following benefits:\r\n         *\r\n         * - Use of a custom iterator has a much better performance than the regular {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach Array.forEach}\r\n         * - Automatic `this` context through the database protocol\r\n         *\r\n         * @param {String|Object} query\r\n         * Query to be executed, which can any of the following types:\r\n         * - A non-empty query string\r\n         * - Prepared Statement `{name, text, values, ...}` or {@link PreparedStatement} object\r\n         * - Parameterized Query `{text, values, ...}` or {@link ParameterizedQuery} object\r\n         * - {@link QueryFile} object\r\n         *\r\n         * @param {array|value} [values]\r\n         * Query formatting parameters.\r\n         *\r\n         * When `query` is of type `string` or a {@link QueryFile} object, the `values` can be:\r\n         * - a single value - to replace all `$1` occurrences\r\n         * - an array of values - to replace all `$1`, `$2`, ... variables\r\n         * - an object - to apply $[Named Parameters] formatting\r\n         *\r\n         * When `query` is a Prepared Statement or a Parameterized Query (or their class types),\r\n         * and `values` is not `null` or `undefined`, it is automatically set within such object,\r\n         * as an override for its internal `values`.\r\n         *\r\n         * @param {function} cb\r\n         * Function to execute for each row, taking three arguments:\r\n         * - `row` - the current row object being processed in the array\r\n         * - `index` - the index of the current row being processed in the array\r\n         * - `data` - the array of rows resolved by method {@link Database.any any}\r\n         *\r\n         * @param {} [thisArg]\r\n         * Value to use as `this` when executing the callback.\r\n         *\r\n         * @returns {external:Promise}\r\n         * Resolves with the original array of rows, extended with hidden property `duration` -\r\n         * number of milliseconds it took the client to execute the query.\r\n         *\r\n         * @see\r\n         * {@link Database.any any},\r\n         * {@link Database.map map},\r\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach Array.forEach}\r\n         *\r\n         * @example\r\n         *\r\n         * db.each('SELECT id, code, name FROM Events', [], row => {\r\n         *     row.code = +row.code; // leading `+` is short for `parseInt()`\r\n         * })\r\n         *     .then(data => {\r\n         *         // data = array of events, with 'code' converted into integer\r\n         *     })\r\n         *     .catch(error => {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.each = function (query, values, cb, thisArg) {\r\n            return obj.any.call(this, query, values)\r\n                .then(function (data) {\r\n                    $arr.forEach(data, cb, thisArg);\r\n                    return data;\r\n                });\r\n        };\r\n\r\n        /**\r\n         * @method Database.task\r\n         * @description\r\n         * Executes a callback function (or $[ES6 generator]) with an automatically managed connection.\r\n         *\r\n         * This method should be used whenever executing more than one query at once, so the allocated connection\r\n         * is reused between all queries, and released only after the task has finished.\r\n         *\r\n         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods\r\n         * {@link Task.batch batch}, {@link Task.page page}, {@link Task.sequence sequence}, plus property {@link Task.ctx ctx} -\r\n         * the task context object.\r\n         *\r\n         * See class {@link Task} for more details.\r\n         *\r\n         * @param {} tag/cb\r\n         * When the method takes only one parameter, it must be the callback function (or $[ES6 generator]) for the task.\r\n         * However, when calling the method with 2 parameters, the first one is always the `tag` - traceable context for the\r\n         * task (see $[tags]).\r\n         *\r\n         * @param {function|generator} [cb]\r\n         * Task callback function (or $[ES6 generator]), if it is not `undefined`, or else the callback is expected to\r\n         * be passed in as the first parameter.\r\n         *\r\n         * @returns {external:Promise}\r\n         *\r\n         * A promise object that represents the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database.tx tx},\r\n         * $[tags]\r\n         *\r\n         * @example\r\n         *\r\n         * // using the regular callback syntax:\r\n         * db.task(function(t) {\r\n         *         // t = this\r\n         *         // t.ctx = task context object\r\n         *\r\n         *         return t.one('SELECT id FROM Users WHERE name = $1', 'John')\r\n         *             .then(user=> {\r\n         *                 return t.any('SELECT * FROM Events WHERE userId = $1', user.id);\r\n         *             });\r\n         *     })\r\n         *     .then(function(data) {\r\n         *         // success\r\n         *         // data = as returned from the task's callback\r\n         *     })\r\n         *     .catch(function(error) {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using the ES6 arrow syntax:\r\n         * db.task(t=> {\r\n         *         // t.ctx = task context object\r\n         *         \r\n         *         return t.one('SELECT id FROM Users WHERE name = $1', 'John')\r\n         *             .then(user=> {\r\n         *                 return t.any('SELECT * FROM Events WHERE userId = $1', user.id);\r\n         *             });\r\n         *     })\r\n         *     .then(data=> {\r\n         *         // success\r\n         *         // data = as returned from the task's callback\r\n         *     })\r\n         *     .catch(error=> {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using an ES6 generator for the callback:\r\n         * db.task(function*(t) {\r\n         *         // t = this\r\n         *         // t.ctx = task context object\r\n         *\r\n         *         let user = yield t.one('SELECT id FROM Users WHERE name = $1', 'John');\r\n         *         return yield t.any('SELECT * FROM Events WHERE userId = $1', user.id);\r\n         *     })\r\n         *     .then(function(data) {\r\n         *         // success\r\n         *         // data = as returned from the task's callback\r\n         *     })\r\n         *     .catch(function(error) {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.task = function (p1, p2) {\r\n            return taskProcessor.call(this, p1, p2, false);\r\n        };\r\n\r\n        /**\r\n         * @method Database.tx\r\n         * @description\r\n         * Executes a callback function (or $[ES6 generator]) as a transaction.\r\n         *\r\n         * A transaction simply wraps a regular {@link Database.task task} in automatic queries:\r\n         * - it executes `BEGIN` just before invoking the callback function\r\n         * - it executes `COMMIT`, if the callback didn't throw any error or return a rejected promise\r\n         * - it executes `ROLLBACK`, if the callback did throw an error or return a rejected promise\r\n         *\r\n         * The callback function is called with one parameter - database protocol (same as `this`), extended with methods\r\n         * {@link Task.batch batch}, {@link Task.page page}, {@link Task.sequence sequence}, plus property {@link Task.ctx ctx} -\r\n         * the transaction context object.\r\n         *\r\n         * See class {@link Task} for more details.\r\n         *\r\n         * Note that transactions should be chosen over tasks only where they are necessary, because unlike regular tasks,\r\n         * transactions are blocking operations, and must be used with caution.\r\n         *\r\n         * @param {} tag/cb\r\n         * When the method takes only one parameter, it must be the callback function (or $[ES6 generator]) for the transaction.\r\n         * However, when calling the method with 2 parameters, the first one is always the `tag` - traceable context for the\r\n         * transaction (see $[tags]).\r\n         *\r\n         * @param {function|generator} [cb]\r\n         * Transaction callback function (or $[ES6 generator]), if it is not `undefined`, or else the callback is expected to be\r\n         * passed in as the first parameter.\r\n         *\r\n         * @returns {external:Promise}\r\n         *\r\n         * A promise object that represents the result from the callback function.\r\n         *\r\n         * @see\r\n         * {@link Task},\r\n         * {@link Database.task},\r\n         * $[tags]\r\n         *\r\n         * @example\r\n         *\r\n         * // using the regular callback syntax:\r\n         * db.tx(function(t) {\r\n         *         // t = this\r\n         *         // t.ctx = transaction context object\r\n         *\r\n         *         return t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25])\r\n         *             .then(user=> {\r\n         *                 return t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']);\r\n         *             });\r\n         *     })\r\n         *     .then(function(data) {\r\n         *         // success\r\n         *         // data = as returned from the transaction's callback\r\n         *     })\r\n         *     .catch(function(error) {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using the ES6 arrow syntax:\r\n         * db.tx(t=> {\r\n         *         // t.ctx = transaction context object\r\n         *         \r\n         *         return t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25])\r\n         *             .then(user=> {\r\n         *                 return t.batch([\r\n         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']),\r\n         *                     t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'login'])\r\n         *                 ]);\r\n         *             });\r\n         *     })\r\n         *     .then(data=> {\r\n         *         // success\r\n         *         // data = as returned from the transaction's callback\r\n         *     })\r\n         *     .catch(error=> {\r\n         *         // error\r\n         *     });\r\n         *\r\n         * @example\r\n         *\r\n         * // using an ES6 generator for the callback:\r\n         * db.tx(function*(t) {\r\n         *         // t = this\r\n         *         // t.ctx = transaction context object\r\n         *\r\n         *         let user = yield t.one('INSERT INTO Users(name, age) VALUES($1, $2) RETURNING id', ['Mike', 25]);\r\n         *         return yield t.none('INSERT INTO Events(userId, name) VALUES($1, $2)', [user.id, 'created']);\r\n         *     })\r\n         *     .then(function(data) {\r\n         *         // success\r\n         *         // data = as returned from the transaction's callback\r\n         *     })\r\n         *     .catch(function(error) {\r\n         *         // error\r\n         *     });\r\n         *\r\n         */\r\n        obj.tx = function (p1, p2) {\r\n            return taskProcessor.call(this, p1, p2, true);\r\n        };\r\n\r\n        // Task method;\r\n        // Resolves with result from the callback function;\r\n        function taskProcessor(p1, p2, isTX) {\r\n\r\n            var tag, // tag object/value;\r\n                taskCtx = ctx.clone(); // task context object;\r\n\r\n            if (isTX) {\r\n                taskCtx.txLevel = taskCtx.txLevel >= 0 ? (taskCtx.txLevel + 1) : 0;\r\n            }\r\n\r\n            if (this !== obj) {\r\n                taskCtx.context = this; // calling context object;\r\n            }\r\n\r\n            taskCtx.cb = p1; // callback function;\r\n\r\n            // allow inserting a tag in front of the callback\r\n            // function, for better code readability;\r\n            if (p2 !== undefined) {\r\n                tag = p1; // overriding any default tag;\r\n                taskCtx.cb = p2;\r\n            }\r\n\r\n            var cb = taskCtx.cb;\r\n\r\n            if (typeof cb !== 'function') {\r\n                return $p.reject(new TypeError(\"Callback function is required for the \" + (isTX ? \"transaction.\" : \"task.\")));\r\n            }\r\n\r\n            if (tag === undefined) {\r\n                if (cb.tag !== undefined) {\r\n                    // use the default tag associated with the task:\r\n                    tag = cb.tag;\r\n                } else {\r\n                    if (cb.name) {\r\n                        tag = cb.name; // use the function name as tag;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var tsk = new config.$npm.task(taskCtx, tag, isTX, config);\r\n\r\n            extend(taskCtx, tsk);\r\n\r\n            if (taskCtx.db) {\r\n                // reuse existing connection;\r\n                $npm.utils.addReadProp(tsk.ctx, 'isFresh', taskCtx.db.isFresh);\r\n                return config.$npm.task.exec(taskCtx, tsk, isTX, config);\r\n            }\r\n\r\n            // connection required;\r\n            return config.$npm.connect.pool(taskCtx)\r\n                .then(function (db) {\r\n                    taskCtx.connect(db);\r\n                    $npm.utils.addReadProp(tsk.ctx, 'isFresh', db.isFresh);\r\n                    return config.$npm.task.exec(taskCtx, tsk, isTX, config);\r\n                })\r\n                .then(function (data) {\r\n                    taskCtx.disconnect();\r\n                    return data;\r\n                })\r\n                .catch(function (error) {\r\n                    taskCtx.disconnect();\r\n                    return $p.reject(error);\r\n                });\r\n        }\r\n\r\n        // lock all default properties to read-only,\r\n        // to prevent override by the client.\r\n        $npm.utils.lock(obj, false, ctx.options);\r\n\r\n        // extend the protocol;\r\n        $npm.events.extend(ctx.options, obj, ctx.dc);\r\n\r\n        // freeze the protocol permanently;\r\n        $npm.utils.lock(obj, true, ctx.options);\r\n    }\r\n\r\n}\r\n\r\nvar jsHandled, nativeHandled, dbObjects = {};\r\n\r\nfunction checkForDuplicates(cn, config) {\r\n    var cnKey = normalizeConnection(cn);\r\n    if (cnKey in dbObjects) {\r\n        if (!config.options.noWarnings) {\r\n            $npm.con.warn(\"WARNING: Creating a duplicate database object for the same connection.\\n%s\\n\",\r\n                $npm.utils.getLocalStack(5));\r\n        }\r\n    } else {\r\n        dbObjects[cnKey] = true;\r\n    }\r\n}\r\n\r\n/**\r\n * For connections that are objects it reorders the keys alphabetically,\r\n * and then serializes the result into a JSON string.\r\n *\r\n * @param {string|object} cn - connection string or object\r\n */\r\nfunction normalizeConnection(cn) {\r\n    if (typeof cn === 'object') {\r\n        var obj = {}, keys = Object.keys(cn).sort();\r\n        $arr.forEach(keys, function (name) {\r\n            obj[name] = cn[name];\r\n        });\r\n        cn = obj;\r\n    }\r\n    return JSON.stringify(cn);\r\n}\r\n\r\nfunction setErrorHandler(config) {\r\n    // we do not do code coverage specific to Native Bindings:\r\n    // istanbul ignore if\r\n    if (config.options.pgNative) {\r\n        if (!nativeHandled) {\r\n            config.pgp.pg.on('error', onError);\r\n            nativeHandled = true;\r\n        }\r\n    } else {\r\n        if (!jsHandled) {\r\n            config.pgp.pg.on('error', onError);\r\n            jsHandled = true;\r\n        }\r\n    }\r\n}\r\n\r\n// this event only happens when the connection is lost physically,\r\n// which cannot be tested automatically; removing from coverage:\r\n// istanbul ignore next\r\nfunction onError(err, client) {\r\n    var ctx = client.$ctx;\r\n    $npm.events.error(ctx.options, err, {\r\n        cn: $npm.utils.getSafeConnection(ctx.cn),\r\n        dc: ctx.dc\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    var npm = config.$npm;\r\n    npm.connect = npm.connect || $npm.connect(config);\r\n    npm.query = npm.query || $npm.query(config);\r\n    npm.task = npm.task || $npm.task(config);\r\n    return Database;\r\n};\r\n\r\n/**\r\n * @callback Database.streamInitCB\r\n * @description\r\n * Stream initialization callback, used by {@link Database.stream}.\r\n *\r\n * @param {external:Stream} stream\r\n * Stream object to initialize streaming.\r\n *\r\n * @example\r\n * var QueryStream = require('pg-query-stream');\r\n * var JSONStream = require('JSONStream');\r\n *\r\n * // you can also use pgp.as.format(query, values, options)\r\n * // to format queries properly, via pg-promise;\r\n * var qs = new QueryStream('select * from users');\r\n *\r\n * db.stream(qs, function (stream) {\r\n *         // initiate streaming into the console:\r\n *         stream.pipe(JSONStream.stringify()).pipe(process.stdout);\r\n *     })\r\n *     .then(function (data) {\r\n *         console.log(\"Total rows processed:\", data.processed,\r\n *           \"Duration in milliseconds:\", data.duration);\r\n *     })\r\n *     .catch(function (error) {\r\n *         // error;\r\n *     });\r\n */\r\n\r\n/**\r\n * @external Stream\r\n * @see https://nodejs.org/api/stream.html\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/database.js\n// module id = 109\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    QueryFileError: require('./queryFile')\r\n};\r\n\r\n/**\r\n * @interface errors.ParameterizedQueryError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError} interface, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link ParameterizedQuery}, whether it is used\r\n * explicitly or implicitly (via a simple `{text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `ParameterizedQueryError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link ParameterizedQuery} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Parameterized Query object.\r\n *\r\n * @see ParameterizedQuery\r\n */\r\nfunction ParameterizedQueryError(error, ps) {\r\n    var temp = Error.apply(this, arguments);\r\n    temp.name = this.name = 'ParameterizedQueryError';\r\n    this.stack = temp.stack;\r\n    if (error instanceof $npm.QueryFileError) {\r\n        this.error = error;\r\n        this.message = \"Failed to initialize 'text' from a QueryFile.\";\r\n    } else {\r\n        this.message = error;\r\n    }\r\n    this.result = ps;\r\n}\r\n\r\nParameterizedQueryError.prototype = Object.create(Error.prototype, {\r\n    constructor: {\r\n        value: ParameterizedQueryError,\r\n        writable: true,\r\n        configurable: true\r\n    }\r\n});\r\n\r\n/**\r\n * @method errors.ParameterizedQueryError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nParameterizedQueryError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        gap2 = $npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'ParameterizedQueryError {',\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'result: {',\r\n            gap2 + 'text: ' + JSON.stringify(this.result.text),\r\n            gap2 + 'values: ' + JSON.stringify(this.result.values),\r\n            gap1 + '}'\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nParameterizedQueryError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = ParameterizedQueryError;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/errors/paramQuery.js\n// module id = 110\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    QueryFileError: require('./queryFile')\r\n};\r\n\r\n/**\r\n * @interface errors.PreparedStatementError\r\n * @augments external:Error\r\n * @description\r\n * {@link errors.PreparedStatementError PreparedStatementError} interface, available from the {@link errors} namespace.\r\n *\r\n * This type represents all errors that can be reported by class {@link PreparedStatement}, whether it is used\r\n * explicitly or implicitly (via a simple `{name, text, values}` object).\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `PreparedStatementError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {errors.QueryFileError} error\r\n * Internal {@link errors.QueryFileError} object.\r\n *\r\n * It is set only when the source {@link PreparedStatement} used a {@link QueryFile} which threw the error.\r\n *\r\n * @property {object} result\r\n * Resulting Prepared Statement object.\r\n *\r\n * @see PreparedStatement\r\n */\r\nfunction PreparedStatementError(error, ps) {\r\n    var temp = Error.apply(this, arguments);\r\n    temp.name = this.name = 'PreparedStatementError';\r\n    this.stack = temp.stack;\r\n    if (error instanceof $npm.QueryFileError) {\r\n        this.error = error;\r\n        this.message = \"Failed to initialize 'text' from a QueryFile.\";\r\n    } else {\r\n        this.message = error;\r\n    }\r\n    this.result = ps;\r\n}\r\n\r\nPreparedStatementError.prototype = Object.create(Error.prototype, {\r\n    constructor: {\r\n        value: PreparedStatementError,\r\n        writable: true,\r\n        configurable: true\r\n    }\r\n});\r\n\r\n/**\r\n * @method errors.PreparedStatementError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPreparedStatementError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        gap2 = $npm.utils.messageGap(level + 2),\r\n        lines = [\r\n            'PreparedStatementError {',\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'result: {',\r\n            gap2 + 'name: ' + JSON.stringify(this.result.name),\r\n            gap2 + 'text: ' + JSON.stringify(this.result.text),\r\n            gap2 + 'values: ' + JSON.stringify(this.result.values),\r\n            gap1 + '}'\r\n        ];\r\n    if (this.error) {\r\n        lines.push(gap1 + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nPreparedStatementError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = PreparedStatementError;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/errors/prepared.js\n// module id = 111\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils')\r\n};\r\n\r\n/**\r\n * @enum {number}\r\n * @alias errors.queryResultErrorCode\r\n * @readonly\r\n * @description\r\n * `queryResultErrorCode` enumerator, available from the {@link errors} namespace.\r\n *\r\n * Represents an integer code for each type of error supported by type {@link errors.QueryResultError}.\r\n *\r\n * @see {@link errors.QueryResultError}\r\n */\r\nvar queryResultErrorCode = {\r\n    /** No data returned from the query. */\r\n    noData: 0,\r\n\r\n    /** No return data was expected. */\r\n    notEmpty: 1,\r\n\r\n    /** Multiple rows were not expected. */\r\n    multiple: 2\r\n};\r\n\r\nObject.freeze(queryResultErrorCode);\r\n\r\nvar errorMessages = [\r\n    {name: \"noData\", message: \"No data returned from the query.\"},\r\n    {name: \"notEmpty\", message: \"No return data was expected.\"},\r\n    {name: \"multiple\", message: \"Multiple rows were not expected.\"}\r\n];\r\n\r\n/**\r\n * @interface errors.QueryResultError\r\n * @augments external:Error\r\n * @description\r\n *\r\n * This error is specified as the rejection reason for all result-specific methods when the result doesn't match\r\n * the expectation, i.e. when a query result doesn't match its Query Result Mask - the value of {@link queryResult}.\r\n *\r\n * The error applies to the result from the following methods: {@link Database.none none},\r\n * {@link Database.one one}, {@link Database.oneOrNone oneOrNone} and {@link Database.many many}.\r\n *\r\n * Supported errors:\r\n *\r\n * - `No return data was expected.`, method {@link Database.none none}\r\n * - `No data returned from the query.`, methods {@link Database.one one} and {@link Database.many many}\r\n * - `Multiple rows were not expected.`, methods {@link Database.one one} and {@link Database.oneOrNone oneOrNone}\r\n *\r\n * Like any other error, this one is notified with through the global event {@link event:error error}.\r\n *\r\n * The type is available from the {@link errors} namespace.\r\n *\r\n * @property {string} name\r\n * Standard {@link external:Error Error} property - error type name = `QueryResultError`.\r\n *\r\n * @property {string} message\r\n * Standard {@link external:Error Error} property - the error message.\r\n *\r\n * @property {string} stack\r\n * Standard {@link external:Error Error} property - the stack trace.\r\n *\r\n * @property {object} result\r\n * The original $[Result] object that was received.\r\n *\r\n * @property {number} received\r\n * Total number of rows received. It is simply the value of `result.rows.length`.\r\n *\r\n * @property {number} code\r\n * Error code - {@link errors.queryResultErrorCode queryResultErrorCode} value.\r\n *\r\n * @property {string} query\r\n * Query that was executed.\r\n *\r\n * Normally, it is the query already formatted with values, if there were any.\r\n * But if you are using initialization option `pgFormatting`, then the query string is before formatting.\r\n *\r\n * @property {} values\r\n * Values passed in as query parameters. Available only when initialization option `pgFormatting` is used.\r\n * Otherwise, the values are within the pre-formatted `query` string.\r\n *\r\n * @example\r\n *\r\n * var QueryResultError = pgp.errors.QueryResultError;\r\n * var qrec = pgp.errors.queryResultErrorCode;\r\n *\r\n * var options = {\r\n *\r\n *   // pg-promise initialization options...\r\n *\r\n *   error: function (err, e) {\r\n *       if (err instanceof QueryResultError) {\r\n *           // A query returned unexpected number of records, and thus rejected;\r\n *           \r\n *           // we can check the error code, if we want specifics:\r\n *           if(err.code === qrec.noData) {\r\n *               // expected some data, but received none;\r\n *           }\r\n *\r\n *           // If you write QueryResultError into the console,\r\n *           // you will get a nicely formatted output.\r\n *\r\n *           console.log(err);\r\n *           \r\n *           // See also: err, e.query, e.params, etc.\r\n *       }\r\n *   }\r\n * };\r\n *\r\n * @see\r\n * {@link queryResult}, {@link Database.none none}, {@link Database.one one},\r\n * {@link Database.oneOrNone oneOrNone}, {@link Database.many many}\r\n *\r\n */\r\nfunction QueryResultError(code, result, query, values) {\r\n    var temp = Error.apply(this, arguments);\r\n    temp.name = this.name = 'QueryResultError';\r\n    this.stack = temp.stack;\r\n    this.message = errorMessages[code].message;\r\n    this.code = code;\r\n    this.result = result;\r\n    this.query = query;\r\n    this.values = values;\r\n    this.received = result.rows.length;\r\n}\r\n\r\nQueryResultError.prototype = Object.create(Error.prototype, {\r\n    constructor: {\r\n        value: QueryResultError,\r\n        writable: true,\r\n        configurable: true\r\n    }\r\n});\r\n\r\n/**\r\n * @method errors.QueryResultError.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the error.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryResultError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap0 = $npm.utils.messageGap(level),\r\n        gap1 = $npm.utils.messageGap(level + 1),\r\n        lines = [\r\n            'QueryResultError {',\r\n            gap1 + 'code: queryResultErrorCode.' + errorMessages[this.code].name,\r\n            gap1 + 'message: \"' + this.message + '\"',\r\n            gap1 + 'received: ' + this.received,\r\n            gap1 + 'query: ' + (typeof this.query === 'string' ? '\"' + this.query + '\"' : JSON.stringify(this.query))\r\n        ];\r\n    if (this.values !== undefined) {\r\n        lines.push(gap1 + 'values: ' + JSON.stringify(this.values));\r\n    }\r\n    lines.push(gap0 + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nQueryResultError.prototype.inspect = function () {\r\n    return this.toString();\r\n};\r\n\r\nmodule.exports = {\r\n    QueryResultError: QueryResultError,\r\n    queryResultErrorCode: queryResultErrorCode\r\n};\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/errors/queryResult.js\n// module id = 112\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    concat: require('./methods/concat'),\r\n    insert: require('./methods/insert'),\r\n    update: require('./methods/update'),\r\n    values: require('./methods/values'),\r\n    sets: require('./methods/sets'),\r\n    TableName: require('./tableName'),\r\n    ColumnSet: require('./columnSet'),\r\n    Column: require('./column')\r\n};\r\n\r\n/**\r\n * @namespace helpers\r\n * @description\r\n * Namespace for query-formatting generators, available as `pgp.helpers`, after initializing the library.\r\n *\r\n * It is a set of types and methods for generating queries in a fast, flexible and reliable way.\r\n *\r\n * See also: $[Performance Boost].\r\n *\r\n * @property {function} TableName\r\n * {@link helpers.TableName TableName} class constructor.\r\n *\r\n * @property {function} ColumnSet\r\n * {@link helpers.ColumnSet ColumnSet} class constructor.\r\n *\r\n * @property {function} Column\r\n * {@link helpers.Column Column} class constructor.\r\n *\r\n * @property {function} insert\r\n * {@link helpers.insert insert} static method.\r\n *\r\n * @property {function} update\r\n * {@link helpers.update update} static method.\r\n *\r\n * @property {function} values\r\n * {@link helpers.values values} static method.\r\n *\r\n * @property {function} sets\r\n * {@link helpers.sets sets} static method.\r\n *\r\n * @property {function} concat\r\n * {@link helpers.concat concat} static method.\r\n */\r\nmodule.exports = function (config) {\r\n    var res = {\r\n        insert: function (data, columns, table) {\r\n            var capSQL = config.options && config.options.capSQL;\r\n            return $npm.insert(data, columns, table, capSQL);\r\n        },\r\n        update: function (data, columns, table, options) {\r\n            var capSQL = config.options && config.options.capSQL;\r\n            return $npm.update(data, columns, table, options, capSQL);\r\n        },\r\n        concat: $npm.concat,\r\n        values: $npm.values,\r\n        sets: $npm.sets,\r\n        TableName: $npm.TableName,\r\n        ColumnSet: $npm.ColumnSet,\r\n        Column: $npm.Column\r\n    };\r\n    Object.freeze(res);\r\n    return res;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/index.js\n// module id = 113\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    format: require('../../formatting').as.format,\r\n    QueryFile: require('../../queryFile')\r\n};\r\n\r\nvar $arr = require('../../array');\r\n\r\n/**\r\n * @method helpers.concat\r\n * @description\r\n * **Added in v.5.3.0**\r\n *\r\n * Concatenates multiple queries into a single query string.\r\n *\r\n * - Before joining any query, the method removes from it all leading and trailing spaces, tabs and semi-colons.\r\n * - Empty queries are skipped automatically.\r\n *\r\n * @param {array<string|helpers.QueryFormat|QueryFile>} queries\r\n * Array of mixed-type elements:\r\n * - a simple query string, to be used as is\r\n * - a simple {@link helpers.QueryFormat QueryFormat}-like object = `{query, [values], [options]}`\r\n * - a {@link QueryFile} object\r\n *\r\n * @returns {string}\r\n * Concatenated string with all queries.\r\n *\r\n * @example\r\n *\r\n * var pgp = require('pg-promise')();\r\n *\r\n * var qf1 = new pgp.QueryFile('./query1.sql', {minify: true});\r\n * var qf2 = new pgp.QueryFile('./query2.sql', {minify: true});\r\n *\r\n * var query = pgp.helpers.concat([\r\n *     {query: 'INSERT INTO Users(name, age) VALUES($1, $2)', values: ['John', 23]}, // QueryFormat-like object\r\n *     {query: 'DELETE FROM Log WHERE userName = $1', values: 'John'}, // QueryFormat-like object\r\n *     {query: qf1, values: [1, 'Name']}, // QueryFile with formatting parameters\r\n *     'SELECT count(*) FROM Users', // a simple-string query,\r\n *     qf2 // direct QueryFile object\r\n * ]);\r\n *\r\n * // query = concatenated string with all the queries\r\n */\r\nfunction concat(queries) {\r\n    if (!Array.isArray(queries)) {\r\n        throw new TypeError(\"Parameter 'queries' must be an array.\");\r\n    }\r\n    var all = $arr.map(queries, function (q, index) {\r\n        if (typeof q === 'string') {\r\n            // a simple query string without parameters:\r\n            return clean(q);\r\n        }\r\n        if (q && typeof q === 'object') {\r\n            if (q instanceof $npm.QueryFile) {\r\n                // QueryFile object:\r\n                return clean(q.formatDBType());\r\n            }\r\n            if ('query' in q) {\r\n                // object {query, values, options}:\r\n                return clean($npm.format(q.query, q.values, q.options));\r\n            }\r\n        }\r\n        throw new Error('Invalid query element at index ' + index + '.');\r\n    });\r\n\r\n    return $arr.filter(all, function (q) {\r\n        return q;\r\n    }).join(';');\r\n}\r\n\r\nfunction clean(q) {\r\n    // removes from the query all leading and trailing symbols ' ', '\\t' and ';'\r\n    return q.replace(/^[\\s;]*|[\\s;]*$/g, '');\r\n}\r\n\r\nmodule.exports = concat;\r\n\r\n/**\r\n * @typedef helpers.QueryFormat\r\n * @description\r\n * A simple structure of parameters to be passed into method {@link formatting.format as.format} exactly as they are.\r\n *\r\n * @property {string|value|object} query\r\n * A query string or a value/object that implements $[Custom Type Formatting], to be formatted according to `values`.\r\n *\r\n * @property {array|object|value} [values]\r\n * Optional formatting parameters for the query.\r\n *\r\n * @property {object} [options]\r\n * Query formatting options, as supported by method {@link formatting.format as.format}.\r\n *\r\n * @see\r\n * {@link formatting.format as.format}\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/methods/concat.js\n// module id = 114\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    TableName: require('../tableName'),\r\n    ColumnSet: require('../columnSet'),\r\n    formatting: require('../../formatting'),\r\n    utils: require('../../utils')\r\n};\r\n\r\nvar $arr = require('../../array');\r\n\r\n/**\r\n * @method helpers.insert\r\n * @description\r\n * Generates an `INSERT` query for either one object or an array of objects.\r\n *\r\n * @param {object|object[]} data\r\n * An insert object with properties for insert values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an INSERT from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid insert object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be inserted.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when inserting multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an INSERT without any columns.`\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Destination table.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @returns {string}\r\n * The resulting query string.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * var pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * var dataSingle = {val: 123, msg: 'hello'};\r\n * var dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Column details can be taken from the data object:\r\n *\r\n * pgp.helpers.insert(dataSingle, null, 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `INSERT`:\r\n *\r\n * pgp.helpers.insert(dataMulti, ['val', 'msg'], 'my-table');\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * var cs = new pgp.helpers.ColumnSet(['val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.insert(dataMulti, cs);\r\n * //=> INSERT INTO \"my-table\"(\"val\",\"msg\") VALUES(123,'hello'),(456,'world!')\r\n *\r\n */\r\nfunction insert(data, columns, table, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\r\n    }\r\n\r\n    var isArray = Array.isArray(data);\r\n\r\n    if (isArray && !data.length) {\r\n        throw new TypeError(\"Cannot generate an INSERT from an empty array.\");\r\n    }\r\n\r\n    if (columns instanceof $npm.ColumnSet) {\r\n        if ($npm.utils.isNull(table)) {\r\n            table = columns.table;\r\n        }\r\n    } else {\r\n        if (isArray && $npm.utils.isNull(columns)) {\r\n            throw new TypeError(\"Parameter 'columns' is required when inserting multiple records.\");\r\n        }\r\n        columns = new $npm.ColumnSet(columns || data);\r\n    }\r\n\r\n    if (!columns.columns.length) {\r\n        throw new Error(\"Cannot generate an INSERT without any columns.\");\r\n    }\r\n\r\n    if (!table) {\r\n        throw new Error(\"Table name is unknown.\");\r\n    }\r\n\r\n    if (!(table instanceof $npm.TableName)) {\r\n        table = new $npm.TableName(table);\r\n    }\r\n\r\n    var query = capSQL ? sql.capCase : sql.lowCase;\r\n\r\n    var format = $npm.formatting.as.format;\r\n    query = format(query, [table.name, columns.names]);\r\n\r\n    if (isArray) {\r\n        return query + $arr.map(data, function (d, index) {\r\n                if (!d || typeof d !== 'object') {\r\n                    throw new Error(\"Invalid insert object at index \" + index + \".\");\r\n                }\r\n                return '(' + format(columns.variables, columns.prepare(d)) + ')';\r\n            }).join();\r\n    }\r\n    return query + '(' + format(columns.variables, columns.prepare(data)) + ')';\r\n}\r\n\r\nvar sql = {\r\n    lowCase: \"insert into $1^($2^) values\",\r\n    capCase: \"INSERT INTO $1^($2^) VALUES\"\r\n};\r\n\r\nmodule.exports = insert;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/methods/insert.js\n// module id = 115\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    ColumnSet: require('../columnSet'),\r\n    format: require('../../formatting').as.format,\r\n    utils: require('../../utils')\r\n};\r\n\r\n/**\r\n * @method helpers.sets\r\n * @description\r\n * Generates a string of comma-separated value-set statements from a single object: `col1=val1, col2=val2, ...`,\r\n * to be used as part of a query.\r\n *\r\n * Since it is to be used as part of `UPDATE` queries, {@link helpers.Column Column} properties `cnd` and `skip` apply.\r\n *\r\n * @param {object} data\r\n * A simple, non-null and non-array source object.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to set values.\r\n *\r\n * When not specified, properties of the `data` object are used.\r\n *\r\n * When no effective columns are found, an empty string is returned.\r\n *\r\n * @returns {string}\r\n * - comma-separated value-set statements for the `data` object\r\n * - an empty string, if no effective columns found\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * var pgp = require('pg-promise')();\r\n *\r\n * var data = {id: 1, val: 123, msg: 'hello'};\r\n *\r\n * // Properties can be pulled automatically from the object:\r\n *\r\n * pgp.helpers.sets(data);\r\n * //=> \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance);\r\n * // NOTE: Conditional columns (start with '?') are skipped:\r\n *\r\n * var cs = new pgp.helpers.ColumnSet(['?id','val', 'msg']);\r\n *\r\n * pgp.helpers.sets(data, cs);\r\n * //=> \"val\"=123,\"msg\"='hello'\r\n *\r\n */\r\nfunction sets(data, columns) {\r\n\r\n    if (!data || typeof data !== 'object' || Array.isArray(data)) {\r\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\r\n    }\r\n\r\n    if (!(columns instanceof $npm.ColumnSet)) {\r\n        columns = new $npm.ColumnSet(columns || data);\r\n    }\r\n\r\n    return $npm.format(columns.assign(data), columns.prepare(data));\r\n}\r\n\r\nmodule.exports = sets;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/methods/sets.js\n// module id = 116\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    TableName: require('../tableName'),\r\n    ColumnSet: require('../columnSet'),\r\n    formatting: require('../../formatting'),\r\n    utils: require('../../utils')\r\n};\r\n\r\nvar $arr = require('../../array');\r\n\r\n/**\r\n * @method helpers.update\r\n * @description\r\n * Generates a simplified `UPDATE` query for either one object or an array of objects.\r\n *\r\n * The resulting query needs a `WHERE` clause to be appended to it, to determine the update logic.\r\n * This is to allow for update conditions of any complexity that are easy to add.\r\n *\r\n * @param {object|object[]} data\r\n * An update object with properties for update values, or an array of such objects.\r\n *\r\n * When `data` is not a non-null object and not an array, it will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an empty array, it will throw {@link external:TypeError TypeError} = `Cannot generate an UPDATE from an empty array.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid update object at index N.`\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Set of columns to be updated.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when updating multiple records.`\r\n *\r\n * When `columns` is not a {@link helpers.ColumnSet ColumnSet} object, a temporary {@link helpers.ColumnSet ColumnSet}\r\n * is created - from the value of `columns` (if it was specified), or from the value of `data` (if it is not an array).\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate an UPDATE without any columns.` (see also {@link helpers.ColumnSet.canGenerate ColumnSet.canGenerate})\r\n *\r\n * @param {helpers.TableName|string|{table,schema}} [table]\r\n * Table to be updated.\r\n *\r\n * It is normally a required parameter. But when `columns` is passed in as a {@link helpers.ColumnSet ColumnSet} object\r\n * with `table` set in it, that will be used when this parameter isn't specified. When neither is available, the method\r\n * will throw {@link external:Error Error} = `Table name is unknown.`\r\n *\r\n * @param {object} [options]\r\n * An object with formatting options for multi-row `UPDATE` queries.\r\n *\r\n * @param {string} [options.tableAlias=t]\r\n * Name of the SQL variable that represents the destination table.\r\n *\r\n * @param {string} [options.valueAlias=v]\r\n * Name of the SQL variable that represents the values.\r\n *\r\n * @returns {string}\r\n * The resulting query string that typically needs a `WHERE` condition appended.\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet},\r\n *  {@link helpers.TableName TableName}\r\n *\r\n * @example\r\n *\r\n * var pgp = require('pg-promise')({\r\n *    capSQL: true // if you want all generated SQL capitalized\r\n * });\r\n *\r\n * var dataSingle = {id: 1, val: 123, msg: 'hello'};\r\n * var dataMulti = [{id: 1, val: 123, msg: 'hello'}, {id: 2, val: 456, msg: 'world!'}];\r\n *\r\n * // Although column details can be taken from the data object, it is not\r\n * // a likely scenario for an update, unless updating the whole table:\r\n *\r\n * pgp.helpers.update(dataSingle, null, 'my-table');\r\n * //=> UPDATE \"my-table\" SET \"id\"=1,\"val\"=123,\"msg\"='hello'\r\n *\r\n * @example\r\n *\r\n * // A typical single-object update:\r\n *\r\n * pgp.helpers.update(dataSingle, ['val', 'msg'], 'my-table') + ' WHERE id = ' + dataSingle.id;\r\n * //=> UPDATE \"my-table\" SET \"val\"=123,\"msg\"='hello' WHERE id = 1\r\n *\r\n * @example\r\n *\r\n * // Column details are required for a multi-row `UPDATE`;\r\n * // Adding '?' in front of a column name means it is only for a WHERE condition:\r\n *\r\n * pgp.helpers.update(dataMulti, ['?id', 'val', 'msg'], 'my-table') + ' WHERE v.id = t.id';\r\n * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * var cs = new pgp.helpers.ColumnSet(['?id', 'val', 'msg'], {table: 'my-table'});\r\n *\r\n * pgp.helpers.update(dataMulti, cs) + ' WHERE v.id = t.id';\r\n * //=> UPDATE \"my-table\" AS t SET \"val\"=v.\"val\",\"msg\"=v.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS v(\"id\",\"val\",\"msg\") WHERE v.id = t.id\r\n *\r\n * @example\r\n *\r\n * // Using parameter `options` to change the default alias names:\r\n *\r\n * pgp.helpers.update(dataMulti, cs, null, {tableAlias: 'X', valueAlias: 'Y'}) + ' WHERE Y.id = X.id';\r\n * //=> UPDATE \"my-table\" AS X SET \"val\"=Y.\"val\",\"msg\"=Y.\"msg\" FROM (VALUES(1,123,'hello'),(2,456,'world!'))\r\n * //   AS Y(\"id\",\"val\",\"msg\") WHERE Y.id = X.id\r\n *\r\n */\r\nfunction update(data, columns, table, options, capSQL) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\r\n    }\r\n\r\n    var isArray = Array.isArray(data);\r\n\r\n    if (isArray && !data.length) {\r\n        throw new TypeError(\"Cannot generate an UPDATE from an empty array.\");\r\n    }\r\n\r\n    if (columns instanceof $npm.ColumnSet) {\r\n        if ($npm.utils.isNull(table)) {\r\n            table = columns.table;\r\n        }\r\n    } else {\r\n        if (isArray && $npm.utils.isNull(columns)) {\r\n            throw new TypeError(\"Parameter 'columns' is required when updating multiple records.\");\r\n        }\r\n        columns = new $npm.ColumnSet(columns || data);\r\n    }\r\n\r\n    var format = $npm.formatting.as.format;\r\n\r\n    if (isArray) {\r\n        var tableAlias = 't', valueAlias = 'v';\r\n        if (options && typeof options === 'object') {\r\n            if (options.tableAlias && typeof options.tableAlias === 'string') {\r\n                tableAlias = options.tableAlias;\r\n            }\r\n            if (options.valueAlias && typeof options.valueAlias === 'string') {\r\n                valueAlias = options.valueAlias;\r\n            }\r\n        }\r\n\r\n        var query = capSQL ? sql.multi.capCase : sql.multi.lowCase;\r\n\r\n        var actualColumns = $arr.filter(columns.columns, function (c) {\r\n            return !c.cnd;\r\n        });\r\n\r\n        checkColumns(actualColumns);\r\n        checkTable();\r\n\r\n        var targetCols = $arr.map(actualColumns, function (c) {\r\n            return c.escapedName + '=' + valueAlias + '.' + c.escapedName;\r\n        }).join();\r\n\r\n        var values = $arr.map(data, function (d, index) {\r\n            if (!d || typeof d !== 'object') {\r\n                throw new Error(\"Invalid update object at index \" + index + \".\");\r\n            }\r\n            return '(' + format(columns.variables, columns.prepare(d)) + ')';\r\n        }).join();\r\n\r\n        return format(query, [table.name, tableAlias, targetCols, values, valueAlias, columns.names]);\r\n    }\r\n\r\n    var updates = columns.assign(data);\r\n\r\n    checkColumns(updates);\r\n    checkTable();\r\n\r\n    var query = capSQL ? sql.single.capCase : sql.single.lowCase;\r\n\r\n    return format(query, table.name) + format(updates, columns.prepare(data));\r\n\r\n    function checkTable() {\r\n        if (table && !(table instanceof $npm.TableName)) {\r\n            table = new $npm.TableName(table);\r\n        }\r\n        if (!table) {\r\n            throw new Error(\"Table name is unknown.\");\r\n        }\r\n    }\r\n\r\n    function checkColumns(cols) {\r\n        if (!cols.length) {\r\n            throw new Error(\"Cannot generate an UPDATE without any columns.\");\r\n        }\r\n    }\r\n}\r\n\r\nvar sql = {\r\n    single: {\r\n        lowCase: \"update $1^ set \",\r\n        capCase: \"UPDATE $1^ SET \"\r\n    },\r\n    multi: {\r\n        lowCase: \"update $1^ as $2^ set $3^ from (values$4^) as $5^($6^)\",\r\n        capCase: \"UPDATE $1^ AS $2^ SET $3^ FROM (VALUES$4^) AS $5^($6^)\"\r\n    }\r\n};\r\n\r\nmodule.exports = update;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/methods/update.js\n// module id = 117\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    ColumnSet: require('../columnSet'),\r\n    formatting: require('../../formatting'),\r\n    utils: require('../../utils')\r\n};\r\n\r\nvar $arr = require('../../array');\r\n\r\n/**\r\n * @method helpers.values\r\n * @description\r\n * Generates a string of comma-separated value groups from either one object or an array of objects,\r\n * to be used as part of a query:\r\n *\r\n * - from a single object: `(val_1, val_2, ...)`\r\n * - from an array of objects: `(val_11, val_12, ...), (val_21, val_22), ...`\r\n *\r\n * @param {object|object[]} data\r\n * A source object with properties as values, or an array of such objects.\r\n *\r\n * If it is anything else, the method will throw {@link external:TypeError TypeError} = `Invalid parameter 'data' specified.`\r\n *\r\n * When `data` is an array that contains a non-object value, the method will throw {@link external:Error Error} =\r\n * `Invalid object at index N.`\r\n *\r\n * When `data` is an empty array, an empty string is returned.\r\n *\r\n * @param {array|helpers.Column|helpers.ColumnSet} [columns]\r\n * Columns for which to return values.\r\n *\r\n * It is optional when `data` is a single object, and required when `data` is an array of objects. If not specified for an array\r\n * of objects, the method will throw {@link external:TypeError TypeError} = `Parameter 'columns' is required when generating multi-row values.`\r\n *\r\n * When the final {@link helpers.ColumnSet ColumnSet} is empty (no columns in it), the method will throw\r\n * {@link external:Error Error} = `Cannot generate values without any columns.`\r\n *\r\n * @returns {string}\r\n * - comma-separated value groups, according to `data`\r\n * - an empty string, if `data` is an empty array\r\n *\r\n * @see\r\n *  {@link helpers.Column Column},\r\n *  {@link helpers.ColumnSet ColumnSet}\r\n *\r\n * @example\r\n *\r\n * var pgp = require('pg-promise')();\r\n *\r\n * var dataSingle = {val: 123, msg: 'hello'};\r\n * var dataMulti = [{val: 123, msg: 'hello'}, {val: 456, msg: 'world!'}];\r\n *\r\n * // Properties can be pulled automatically from a single object:\r\n *\r\n * pgp.helpers.values(dataSingle);\r\n * //=> (123,'hello')\r\n *\r\n * @example\r\n *\r\n * // Column details are required when using an array of objects:\r\n *\r\n * pgp.helpers.values(dataMulti, ['val', 'msg']);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n * @example\r\n *\r\n * // Column details from a reusable ColumnSet (recommended for performance):\r\n *\r\n * var cs = new pgp.helpers.ColumnSet(['val', 'msg']);\r\n *\r\n * pgp.helpers.values(dataMulti, cs);\r\n * //=> (123,'hello'),(456,'world!')\r\n *\r\n */\r\nfunction values(data, columns) {\r\n\r\n    if (!data || typeof data !== 'object') {\r\n        throw new TypeError(\"Invalid parameter 'data' specified.\");\r\n    }\r\n\r\n    var isArray = Array.isArray(data);\r\n\r\n    if (!(columns instanceof $npm.ColumnSet)) {\r\n        if (isArray && $npm.utils.isNull(columns)) {\r\n            throw new TypeError(\"Parameter 'columns' is required when generating multi-row values.\");\r\n        }\r\n        columns = new $npm.ColumnSet(columns || data);\r\n    }\r\n\r\n    if (!columns.columns.length) {\r\n        throw new Error(\"Cannot generate values without any columns.\");\r\n    }\r\n\r\n    var format = $npm.formatting.as.format;\r\n\r\n    if (isArray) {\r\n        return $arr.map(data, function (d, index) {\r\n            if (!d || typeof d !== 'object') {\r\n                throw new Error(\"Invalid object at index \" + index + \".\");\r\n            }\r\n            return '(' + format(columns.variables, columns.prepare(d)) + ')';\r\n        }).join();\r\n    }\r\n    return '(' + format(columns.variables, columns.prepare(data)) + ')';\r\n}\r\n\r\nmodule.exports = values;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/helpers/methods/values.js\n// module id = 118\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    con: require('manakin').local,\r\n    path: require('path'),\r\n    pg: require('pg'),\r\n    minify: require('pg-minify'),\r\n    array: require('./array'),\r\n    adapter: require('./adapter'),\r\n    result: require('./result'),\r\n    promise: require('./promise'),\r\n    formatting: require('./formatting'),\r\n    helpers: require('./helpers'),\r\n    queryFile: require('./queryFile'),\r\n    errors: require('./errors'),\r\n    utils: require('./utils'),\r\n    pubUtils: require('./utils/public'),\r\n    mode: require('./txMode'),\r\n    types: require('./types'),\r\n    package: require('../package.json')\r\n};\r\n\r\n/**\r\n * @author Vitaly Tomilov\r\n * @module pg-promise\r\n *\r\n * @description\r\n * ### Initialization Options\r\n *\r\n * Below is the complete list of _Initialization Options_ for the library.\r\n *\r\n * @param {object} [options]\r\n * Library Initialization Options.\r\n *\r\n * @param {boolean} [options.pgFormatting=false]\r\n * Redirects query formatting to PG.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {boolean} [options.pgNative=false]\r\n * Use $[Native Bindings]. Library $[pg-native] must be installed, or else it will throw an error.\r\n *\r\n * This is a static property (can only be set prior to initialization).\r\n *\r\n * @param {object|function} [options.promiseLib=Promise]\r\n * Overrides the default promise library.\r\n *\r\n * This is a static property (can only be set prior to initialization).\r\n *\r\n * @param {boolean} [options.noLocking=false]\r\n * Prevents protocol locking.\r\n *\r\n * By default, the library locks its protocol to read-only access, as a fool-proof mechanism.\r\n * Specifically for the {@link event:extend extend} event this serves as a protection against overriding existing\r\n * properties or trying to set them at the wrong time.\r\n *\r\n * If this provision gets in the way of using a mock-up framework for your tests, you can force\r\n * the library to deactivate most of the locks by setting `noLocking` = `true` within the options.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {boolean} [options.capSQL=false]\r\n * Capitalizes any SQL generated by the library.\r\n *\r\n * By default, all internal SQL within the library is generated using the low case.\r\n * If, however, you want all SQL to be capitalized instead, set `capSQL` = `true`.\r\n *\r\n * This is purely a cosmetic feature.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {boolean} [options.noWarnings=false]\r\n * Disables all diagnostic warnings in the library (which is ill-advised).\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {function} [options.connect]\r\n * Global event {@link event:connect connect} handler.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {function} [options.disconnect]\r\n * Global event {@link event:disconnect disconnect} handler.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {function} [options.query]\r\n * Global event {@link event:query query} handler.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {function} [options.receive]\r\n * Global event {@link event:receive receive} handler.\r\n *\r\n * @param {function} [options.task]\r\n * Global event {@link event:task task} handler.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {function} [options.transact]\r\n * Global event {@link event:transact transact} handler.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {function} [options.error]\r\n * Global event {@link event:error error} handler.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @param {function} [options.extend]\r\n * Global event {@link event:extend extend} handler.\r\n *\r\n * This property can be set dynamically (before or after initialization).\r\n *\r\n * @example\r\n *\r\n * var options = {\r\n *   // Initialization Options\r\n * };\r\n *\r\n * var pgp = require('pg-promise')(options);\r\n *\r\n */\r\nfunction $main(options) {\r\n\r\n    if ($npm.utils.isNull(options)) {\r\n        options = {};\r\n    } else {\r\n        if (typeof options !== 'object') {\r\n            throw new TypeError(\"Invalid initialization options.\");\r\n        }\r\n\r\n        // list of supported initialization options:\r\n        var validOptions = ['pgFormatting', 'pgNative', 'promiseLib', 'noLocking', 'capSQL', 'noWarnings',\r\n            'connect', 'disconnect', 'query', 'receive', 'task', 'transact', 'error', 'extend'];\r\n\r\n        if (!options.noWarnings) {\r\n            for (var prop in options) {\r\n                if (validOptions.indexOf(prop) === -1) {\r\n                    $npm.con.warn(\"WARNING: Invalid property '%s' in initialization options.\\n%s\\n\", prop, $npm.utils.getLocalStack(3));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    var pg = $npm.pg, p = $npm.promise(options.promiseLib);\r\n\r\n    var config = {\r\n        version: $npm.package.version,\r\n        promiseLib: p.promiseLib,\r\n        promise: p.promise,\r\n    };\r\n\r\n    $npm.utils.addReadProp(config, '$npm', {}, true);\r\n\r\n    // Locking properties that cannot be changed later:\r\n    $npm.utils.addReadProp(options, 'promiseLib', options.promiseLib);\r\n    $npm.utils.addReadProp(options, 'pgNative', !!options.pgNative);\r\n\r\n    config.options = options;\r\n\r\n    // istanbul ignore next:\r\n    // we do not cover code specific to Native Bindings\r\n    if (options.pgNative) {\r\n        pg = $npm.pg.native;\r\n        if ($npm.utils.isNull(pg)) {\r\n            throw new Error(\"Failed to initialize Native Bindings.\");\r\n        }\r\n    }\r\n\r\n    var Database = require('./database')(config);\r\n\r\n    var inst = function (cn, dc) {\r\n        if ($npm.utils.isText(cn) || (cn && typeof cn === 'object')) {\r\n            return new Database(cn, dc, config);\r\n        }\r\n        throw new TypeError(\"Invalid connection details.\");\r\n    };\r\n\r\n    $npm.utils.addReadProperties(inst, rootNameSpace);\r\n\r\n    /**\r\n     * @member {external:PG} pg\r\n     * @readonly\r\n     * @description\r\n     * Instance of the $[PG] library that's being used, depending on initialization option `pgNative`:\r\n     *  - regular `pg` module instance, without option `pgNative`, or equal to `false` (default)\r\n     *  - `pg` module instance with $[Native Bindings], if option `pgNative` was set.\r\n     *\r\n     * Available as `pgp.pg`, after initializing the library.\r\n     */\r\n    $npm.utils.addReadProp(inst, 'pg', pg);\r\n\r\n    /**\r\n     * @member {function} end\r\n     * @readonly\r\n     * @description\r\n     * Terminates pg library (call it when exiting the application).\r\n     *\r\n     * Available as `pgp.end`, after initializing the library.\r\n     */\r\n    $npm.utils.addReadProp(inst, 'end', function () {\r\n        pg.end();\r\n    });\r\n\r\n    /**\r\n     * @member {helpers} helpers\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link helpers all query-formatting helper functions}.\r\n     *\r\n     * Available as `pgp.helpers`, after initializing the library.\r\n     *\r\n     * @see {@link helpers}.\r\n     */\r\n    $npm.utils.addReadProp(inst, 'helpers', $npm.helpers(config));\r\n\r\n    /**\r\n     * @member {external:spex} spex\r\n     * @readonly\r\n     * @description\r\n     * Initialized instance of the $[spex] module, used by the library within tasks and transactions.\r\n     *\r\n     * Available as `pgp.spex`, after initializing the library.\r\n     *\r\n     * @see\r\n     * {@link Task.batch},\r\n     * {@link Task.page},\r\n     * {@link Task.sequence}\r\n     */\r\n    $npm.utils.addReadProp(inst, 'spex', config.$npm.spex);\r\n\r\n    config.pgp = inst;\r\n    Object.freeze(config);\r\n\r\n    return inst;\r\n}\r\n\r\nvar rootNameSpace = {\r\n\r\n    /**\r\n     * @member {formatting} as\r\n     * @readonly\r\n     * @description\r\n     * Namespace for {@link formatting all query-formatting functions}.\r\n     *\r\n     * Available as `pgp.as`, before and after initializing the library.\r\n     *\r\n     * @see {@link formatting}.\r\n     */\r\n    as: $npm.formatting.as,\r\n\r\n    /**\r\n     * @member {external:pg-minify} minify\r\n     * @readonly\r\n     * @description\r\n     * Instance of the $[pg-minify] library that's used.\r\n     *\r\n     * Available as `pgp.minify`, before and after initializing the library.\r\n     */\r\n    minify: $npm.minify,\r\n\r\n    /**\r\n     * @member {queryResult} queryResult\r\n     * @readonly\r\n     * @description\r\n     * Query Result Mask enumerator.\r\n     *\r\n     * Available as `pgp.queryResult`, before and after initializing the library.\r\n     */\r\n    queryResult: $npm.result,\r\n\r\n    /**\r\n     * @member {PromiseAdapter} PromiseAdapter\r\n     * @readonly\r\n     * @description\r\n     * {@link PromiseAdapter} class.\r\n     *\r\n     * Available as `pgp.PromiseAdapter`, before and after initializing the library.\r\n     */\r\n    PromiseAdapter: $npm.adapter,\r\n\r\n    /**\r\n     * @member {ParameterizedQuery} ParameterizedQuery\r\n     * @readonly\r\n     * @description\r\n     * {@link ParameterizedQuery} class.\r\n     *\r\n     * Available as `pgp.ParameterizedQuery`, before and after initializing the library.\r\n     */\r\n    ParameterizedQuery: $npm.types.ParameterizedQuery,\r\n\r\n    /**\r\n     * @member {PreparedStatement} PreparedStatement\r\n     * @readonly\r\n     * @description\r\n     * {@link PreparedStatement} class.\r\n     *\r\n     * Available as `pgp.PreparedStatement`, before and after initializing the library.\r\n     */\r\n    PreparedStatement: $npm.types.PreparedStatement,\r\n\r\n    /**\r\n     * @member {QueryFile} QueryFile\r\n     * @readonly\r\n     * @description\r\n     * {@link QueryFile} class.\r\n     *\r\n     * Available as `pgp.QueryFile`, before and after initializing the library.\r\n     */\r\n    QueryFile: $npm.queryFile,\r\n\r\n\r\n    /**\r\n     * @member {errors} errors\r\n     * @readonly\r\n     * @description\r\n     * {@link errors} - namespace for all error types.\r\n     *\r\n     * Available as `pgp.errors`, before and after initializing the library.\r\n     */\r\n    errors: $npm.errors,\r\n\r\n    /**\r\n     * @member {utils} utils\r\n     * @readonly\r\n     * @description\r\n     * {@link utils} - namespace for utility functions.\r\n     *\r\n     * Available as `pgp.utils`, before and after initializing the library.\r\n     */\r\n    utils: $npm.pubUtils,\r\n\r\n    /**\r\n     * @member {txMode} txMode\r\n     * @readonly\r\n     * @description\r\n     * {@link txMode Transaction Mode} namespace.\r\n     *\r\n     * Available as `pgp.txMode`, before and after initializing the library.\r\n     */\r\n    txMode: $npm.mode\r\n};\r\n\r\n$npm.utils.addReadProperties($main, rootNameSpace);\r\n\r\nmodule.exports = $main;\r\n\r\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\n\r\n/**\r\n * @external PG\r\n * @see https://github.com/brianc/node-postgres/blob/master/lib/index.js#L17\r\n */\r\n\r\n/**\r\n * @external Client\r\n * @see https://github.com/brianc/node-postgres/blob/master/lib/client.js#L20\r\n */\r\n\r\n/**\r\n * @external pg-minify\r\n * @see https://github.com/vitaly-t/pg-minify\r\n */\r\n\r\n/**\r\n * @external spex\r\n * @see https://github.com/vitaly-t/spex\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/main.js\n// module id = 119\n// module chunks = 0","'use strict';\r\n\r\nvar PromiseAdapter = require('./adapter');\r\n\r\n//////////////////////////////////////////\r\n// Parses and validates a promise library;\r\nfunction parsePromiseLib(pl) {\r\n\r\n    var promise;\r\n    if (pl instanceof PromiseAdapter) {\r\n        promise = function (func) {\r\n            return pl.create(func);\r\n        };\r\n        promise.resolve = pl.resolve;\r\n        promise.reject = pl.reject;\r\n        return promise;\r\n    }\r\n    var t = typeof pl;\r\n    if (t === 'function' || t === 'object') {\r\n        var root = typeof pl.Promise === 'function' ? pl.Promise : pl;\r\n        promise = function (func) {\r\n            return new root(func);\r\n        };\r\n        promise.resolve = root.resolve;\r\n        promise.reject = root.reject;\r\n        if (typeof promise.resolve === 'function' && typeof promise.reject === 'function') {\r\n            return promise;\r\n        }\r\n    }\r\n\r\n    throw new TypeError(\"Invalid promise library specified.\");\r\n}\r\n\r\nfunction init(promiseLib) {\r\n    var result = {\r\n        promiseLib: promiseLib\r\n    };\r\n    if (promiseLib) {\r\n        result.promise = parsePromiseLib(promiseLib);\r\n    } else {\r\n        result.promise = parsePromiseLib(Promise);\r\n        result.promiseLib = Promise;\r\n    }\r\n    return result;\r\n}\r\n\r\nmodule.exports = init;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/promise.js\n// module id = 120\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    events: require('./events'),\r\n    utils: require('./utils')\r\n};\r\n\r\n////////////////////////////////////////////\r\n// Streams query data into any destination,\r\n// with the help of pg-query-stream library.\r\nfunction $stream(ctx, qs, initCB, config) {\r\n\r\n    var $p = config.promise;\r\n\r\n    // istanbul ignore next:\r\n    // we do not provide code coverage for the Native Bindings specifics\r\n    if (ctx.options.pgNative) {\r\n        return $p.reject(new Error(\"Streaming doesn't work with Native Bindings.\"));\r\n    }\r\n    if (!$npm.utils.isObject(qs, ['state', '_reading'])) {\r\n        // stream object wasn't passed in correctly;\r\n        return $p.reject(new TypeError(\"Invalid or missing stream object.\"));\r\n    }\r\n    if (qs._reading || qs.state !== 'initialized') {\r\n        // stream object is in the wrong state;\r\n        return $p.reject(new Error(\"Invalid stream state.\"));\r\n    }\r\n    if (typeof initCB !== 'function') {\r\n        // parameter `initCB` must be passed as the initialization callback;\r\n        return $p.reject(new TypeError(\"Invalid or missing stream initialization callback.\"));\r\n    }\r\n    var error = $npm.events.query(ctx.options, getContext());\r\n    if (error) {\r\n        error = getError(error);\r\n        $npm.events.error(ctx.options, error, getContext());\r\n        return $p.reject(error);\r\n    }\r\n    var stream, fetch, start, nRows = 0;\r\n    try {\r\n        stream = ctx.db.client.query(qs);\r\n        fetch = stream._fetch;\r\n        stream._fetch = function (size, func) {\r\n            fetch.call(stream, size, function (err, rows) {\r\n                if (!err && rows.length) {\r\n                    nRows += rows.length;\r\n                    var context = getContext();\r\n                    if (!error) {\r\n                        error = $npm.events.receive(ctx.options, rows, undefined, context);\r\n                    }\r\n                    if (error) {\r\n                        stream.close();\r\n                    }\r\n                }\r\n                return func(err, rows);\r\n            });\r\n        };\r\n        start = Date.now();\r\n        initCB.call(this, stream); // the stream must be initialized during the call;\r\n    } catch (err) {\r\n        error = err;\r\n    }\r\n    if (error) {\r\n        // error thrown by initCB();\r\n        stream._fetch = fetch;\r\n        error = getError(error);\r\n        $npm.events.error(ctx.options, error, getContext());\r\n        return $p.reject(error);\r\n    }\r\n    return $p(function (resolve, reject) {\r\n        stream.once('end', function () {\r\n            stream._fetch = fetch;\r\n            if (error) {\r\n                onError(error);\r\n            } else {\r\n                resolve({\r\n                    processed: nRows, // total number of rows processed;\r\n                    duration: Date.now() - start // duration, in milliseconds;\r\n                });\r\n            }\r\n        });\r\n        stream.once('error', function (err) {\r\n            stream._fetch = fetch;\r\n            onError(err);\r\n        });\r\n        function onError(e) {\r\n            e = getError(e);\r\n            $npm.events.error(ctx.options, e, getContext());\r\n            reject(e);\r\n        }\r\n    });\r\n\r\n    function getError(e) {\r\n        return e instanceof $npm.utils.InternalError ? e.error : e;\r\n    }\r\n\r\n    function getContext() {\r\n        var client;\r\n        if (ctx.db) {\r\n            client = ctx.db.client;\r\n        } else {\r\n            error = new Error(\"Loose request outside an expired connection.\");\r\n        }\r\n        return {\r\n            client: client,\r\n            dc: ctx.dc,\r\n            query: qs.text,\r\n            params: qs.values,\r\n            ctx: ctx.ctx\r\n        };\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = $stream;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/stream.js\n// module id = 121\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    spex: require('spex'),\r\n    utils: require('./utils'),\r\n    mode: require('./txMode'),\r\n    events: require('./events'),\r\n    query: require('./query'),\r\n    async: require('./async')\r\n};\r\n\r\n/**\r\n * @interface Task\r\n * @extends Database\r\n * @description\r\n * Extends {@link Database} for an automatic connection session, with methods for executing multiple database queries.\r\n * The type isn't available directly, it can only be created via methods {@link Database.task} and {@link Database.tx}.\r\n *\r\n * When executing more than one request at a time, one should allocate and release the connection only once,\r\n * while executing all the required queries within the same connection session. More importantly, a transaction\r\n * can only work within a single connection.\r\n *\r\n * This is an interface for tasks/transactions to implement a connection session, during which you can\r\n * execute multiple queries against the same connection that's released automatically when the task/transaction is finished.\r\n *\r\n * @see\r\n * {@link Task.ctx ctx},\r\n * {@link Task.batch batch},\r\n * {@link Task.sequence sequence},\r\n * {@link Task.page page}\r\n *\r\n * @example\r\n * db.task(function (t) {\r\n *       // this = t = task protocol context;\r\n *       // this.ctx = task config + state context;\r\n *       return t.one(\"select * from users where id=$1\", 123)\r\n *           .then(function (user) {\r\n *               return t.any(\"select * from events where login=$1\", user.name);\r\n *           });\r\n *   })\r\n * .then(function (events) {\r\n *       // success;\r\n *   })\r\n * .catch(function (error) {\r\n *       // error;\r\n *   });\r\n *\r\n */\r\nfunction Task(ctx, tag, isTX, config) {\r\n\r\n    /**\r\n     * @member {object} Task.ctx\r\n     * @description\r\n     * Task/Transaction Context object - contains individual properties for each task/transaction.\r\n     *\r\n     * ```js\r\n     * db.task(t => {\r\n     *    // t.ctx = task context object\r\n     * });\r\n     * ```\r\n     *\r\n     * ```js\r\n     * db.tx(t => {\r\n     *    // t.ctx = transaction context object\r\n     * });\r\n     * ```\r\n     *\r\n     * Properties `context`, `dc`, `isTX`, `tag`, `start` and `isFresh` are set before the callback,\r\n     * while properties `finish`, `success` and `result` are set after the callback has returned.\r\n     *\r\n     *\r\n     * @property {object} context\r\n     * If the operation was invoked with an object context - `task.call(obj,...)` or\r\n     * `tx.call(obj,...)`, this property is set with the context object that was passed in.\r\n     *\r\n     * @property {} dc\r\n     * _Database Context_ that was used when creating the database object. See {@link Database}.\r\n     *\r\n     * @property {boolean} isTX\r\n     * Indicates whether this task represents a transaction.\r\n     *\r\n     * @property {} tag\r\n     * Tag value as it was passed into the task. See methods {@link Database.task task} and {@link Database.tx tx}.\r\n     *\r\n     * @property {date} start\r\n     * Date/Time of when this task or transaction started the execution.\r\n     *\r\n     * @property {boolean} isFresh\r\n     * Indicates when a fresh physical connection is being used.\r\n     *\r\n     * @property {date} finish\r\n     * Once the operation has finished, this property is set to the Data/Time of when it happened.\r\n     *\r\n     * @property {boolean} success\r\n     * Once the operation has finished, this property indicates whether it was successful.\r\n     *\r\n     * @property {} result\r\n     * Once the operation has finished, this property contains the result, depending on property `success`:\r\n     * - data resolved by the operation, if `success` = `true`\r\n     * - error / rejection reason, if `success` = `false`\r\n     *\r\n     * @see event {@link event:query query}\r\n     */\r\n    this.ctx = ctx.ctx = {}; // task context object;\r\n\r\n    $npm.utils.addReadProp(this.ctx, 'isTX', isTX);\r\n\r\n    if ('context' in ctx) {\r\n        $npm.utils.addReadProp(this.ctx, 'context', ctx.context);\r\n    }\r\n\r\n    $npm.utils.addReadProp(this.ctx, 'tag', tag);\r\n    $npm.utils.addReadProp(this.ctx, 'dc', ctx.dc);\r\n\r\n    // generic query method;\r\n    this.query = function (query, values, qrm) {\r\n        if (!ctx.db) {\r\n            throw new Error(\"Unexpected call outside of \" + (isTX ? \"transaction.\" : \"task.\"));\r\n        }\r\n        return config.$npm.query.call(this, ctx, query, values, qrm);\r\n    };\r\n\r\n    /**\r\n     * @method Task.batch\r\n     * @description\r\n     * **Alternative Syntax:** `batch(values, {cb})` &#8658; `Promise`\r\n     *\r\n     * Settles a predefined array of mixed values by redirecting to method $[spex.batch].\r\n     *\r\n     * For complete method documentation see $[spex.batch].\r\n     * @param {array} values\r\n     * @param {function} [cb]\r\n     * @returns {external:Promise}\r\n     */\r\n    this.batch = function (values, cb) {\r\n        return config.$npm.spex.batch.call(this, values, cb);\r\n    };\r\n\r\n    /**\r\n     * @method Task.page\r\n     * @description\r\n     * **Alternative Syntax:** `page(source, {dest, limit})` &#8658; `Promise`\r\n     *\r\n     * Resolves a dynamic sequence of arrays/pages with mixed values, by redirecting to method $[spex.page].\r\n     *\r\n     * For complete method documentation see $[spex.page].\r\n     * @param {function} source\r\n     * @param {function} [dest]\r\n     * @param {number} [limit=0]\r\n     * @returns {external:Promise}\r\n     */\r\n    this.page = function (source, dest, limit) {\r\n        return config.$npm.spex.page.call(this, source, dest, limit);\r\n    };\r\n\r\n    /**\r\n     * @method Task.sequence\r\n     * @description\r\n     * **Alternative Syntax:** `sequence(source, {dest, limit, track})` &#8658; `Promise`\r\n     *\r\n     * Resolves a dynamic sequence of mixed values by redirecting to method $[spex.sequence].\r\n     *\r\n     * For complete method documentation see $[spex.sequence].\r\n     * @param {function} source\r\n     * @param {function} [dest]\r\n     * @param {number} [limit=0]\r\n     * @param {boolean} [track=false]\r\n     * @returns {external:Promise}\r\n     */\r\n    this.sequence = function (source, dest, limit, track) {\r\n        return config.$npm.spex.sequence.call(this, source, dest, limit, track);\r\n    };\r\n\r\n}\r\n\r\n//////////////////////////\r\n// Executes a task;\r\nTask.exec = function (ctx, obj, isTX, config) {\r\n\r\n    var $p = config.promise;\r\n\r\n    // callback invocation helper;\r\n    function callback() {\r\n        var result, cb = ctx.cb;\r\n        if (cb.constructor.name === 'GeneratorFunction') {\r\n            cb = config.$npm.async(cb);\r\n        }\r\n        try {\r\n            result = cb.call(obj, obj); // invoking the callback function;\r\n        } catch (err) {\r\n            $npm.events.error(ctx.options, err, {\r\n                client: ctx.db.client,\r\n                dc: ctx.dc,\r\n                ctx: ctx.ctx\r\n            });\r\n            return $p.reject(err); // reject with the error;\r\n        }\r\n        if (result && typeof result.then === 'function') {\r\n            return result; // result is a valid promise object;\r\n        }\r\n        return $p.resolve(result);\r\n    }\r\n\r\n    // updates the task context and notifies the client;\r\n    function update(start, success, result) {\r\n        var c = ctx.ctx;\r\n        if (start) {\r\n            $npm.utils.addReadProp(c, 'start', new Date());\r\n        } else {\r\n            c.finish = new Date();\r\n            c.success = success;\r\n            c.result = result;\r\n            $npm.utils.lock(c, true);\r\n        }\r\n        (isTX ? $npm.events.transact : $npm.events.task)(ctx.options, {\r\n            client: ctx.db.client,\r\n            dc: ctx.dc,\r\n            ctx: c\r\n        });\r\n    }\r\n\r\n    var cbData, cbReason, success,\r\n        spName, // Save-Point Name;\r\n        capSQL = ctx.options.capSQL; // capitalize sql;\r\n\r\n    update(true);\r\n\r\n    if (isTX) {\r\n        // executing a transaction;\r\n        spName = \"level_\" + ctx.txLevel;\r\n        return begin()\r\n            .then(function () {\r\n                    return callback()\r\n                        .then(function (data) {\r\n                            cbData = data; // save callback data;\r\n                            success = true;\r\n                            return commit();\r\n                        }, function (reason) {\r\n                            cbReason = reason; // save callback failure reason;\r\n                            return rollback();\r\n                        })\r\n                        .then(function () {\r\n                                if (success) {\r\n                                    update(false, true, cbData);\r\n                                    return cbData;\r\n                                } else {\r\n                                    update(false, false, cbReason);\r\n                                    return $p.reject(cbReason);\r\n                                }\r\n                            },\r\n                            // istanbul ignore next: either `commit` or `rollback` has failed, which is\r\n                            // impossible to replicate in a test environment, so skipping from the test;\r\n                            function (reason) {\r\n                                update(false, false, reason);\r\n                                return $p.reject(reason);\r\n                            });\r\n                },\r\n                // istanbul ignore next: `begin` has failed, which is impossible\r\n                // to replicate in a test environment, so skipping from the test;\r\n                function (reason) {\r\n                    update(false, false, reason);\r\n                    return $p.reject(reason);\r\n                });\r\n    }\r\n\r\n    function begin() {\r\n        if (!ctx.txLevel && ctx.cb.txMode instanceof $npm.mode.TransactionMode) {\r\n            return exec(ctx.cb.txMode.begin(capSQL), 'savepoint');\r\n        }\r\n        return exec('begin', 'savepoint');\r\n    }\r\n\r\n    function commit() {\r\n        return exec('commit', 'release savepoint');\r\n    }\r\n\r\n    function rollback() {\r\n        return exec('rollback', 'rollback to savepoint');\r\n    }\r\n\r\n    function exec(top, nested) {\r\n        if (ctx.txLevel) {\r\n            return obj.none((capSQL ? nested.toUpperCase() : nested) + ' ' + spName);\r\n        }\r\n        return obj.none(capSQL ? top.toUpperCase() : top);\r\n    }\r\n\r\n    // executing a task;\r\n    return callback()\r\n        .then(function (data) {\r\n            update(false, true, data);\r\n            return data;\r\n        })\r\n        .catch(function (error) {\r\n            update(false, false, error);\r\n            return $p.reject(error);\r\n        });\r\n\r\n};\r\n\r\nmodule.exports = function (config) {\r\n    var npm = config.$npm;\r\n\r\n    // istanbul ignore next:\r\n    // we keep 'npm.query' initialization here, even though it is always\r\n    // pre-initialized by the 'database' module, for integrity purpose. \r\n    npm.query = npm.query || $npm.query(config);\r\n\r\n    npm.async = npm.async || $npm.async(config);\r\n    npm.spex = npm.spex || $npm.spex(config.promiseLib);\r\n    return Task;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/task.js\n// module id = 122\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    errors: require('../errors'),\r\n    QueryFile: require('../queryFile')\r\n};\r\n\r\n/**\r\n * @constructor ParameterizedQuery\r\n * @description\r\n * **Alternative Syntax:** `ParameterizedQuery({text, values, ...})` &#8658; {@link ParameterizedQuery}\r\n *\r\n * Constructs a new {@link ParameterizedQuery} object.\r\n *\r\n * The alternative syntax supports advanced properties {@link ParameterizedQuery#binary binary} and {@link ParameterizedQuery#rowMode rowMode},\r\n * which are passed into $[pg], but not used by the class.\r\n *\r\n * All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{text, values}` object, by replacing it, i.e. when the basic object is used\r\n * with a query method, a new {@link ParameterizedQuery} object is created implicitly in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly. And it never throws any error,\r\n * leaving it for query methods to reject with {@link errors.ParameterizedQueryError ParameterizedQueryError}.\r\n *\r\n * The type is available from the library's root: `pgp.ParameterizedQuery`.\r\n *\r\n * @param {string|QueryFile} text\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because _Parameterized Queries_ are formatted by the database server.\r\n *\r\n * @param {array} [values]\r\n * Query formatting values. When it is not an `Array` and not `null`/`undefined`, it is automatically wrapped into an array.\r\n *\r\n * @returns {ParameterizedQuery}\r\n *\r\n * @see\r\n * {@link errors.ParameterizedQueryError ParameterizedQueryError}\r\n *\r\n * @example\r\n *\r\n * var PQ = require('pg-promise').ParameterizedQuery;\r\n *\r\n * // Creating a complete Parameterized Query with parameters:\r\n * var findUser = new PQ('SELECT * FROM Users WHERE id = $1', [123]);\r\n *\r\n * db.one(findUser)\r\n *     .then(user=> {\r\n *         // user found;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * var PQ = require('pg-promise').ParameterizedQuery;\r\n *\r\n * // Creating a reusable Parameterized Query without values:\r\n * var addUser = new PQ('INSERT INTO Users(name, age) VALUES($1, $2)');\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(()=> {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(()=> {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n */\r\nfunction ParameterizedQuery(text, values) {\r\n    if (!(this instanceof ParameterizedQuery)) {\r\n        return new ParameterizedQuery(text, values);\r\n    }\r\n\r\n    var currentError, PQ = {}, changed = true, state = {\r\n        text: text,\r\n        binary: undefined,\r\n        rowMode: undefined\r\n    };\r\n\r\n    function setValues(v) {\r\n        if (Array.isArray(v)) {\r\n            if (v.length) {\r\n                PQ.values = v;\r\n            } else {\r\n                delete PQ.values;\r\n            }\r\n        } else {\r\n            if ($npm.utils.isNull(v)) {\r\n                delete PQ.values;\r\n            } else {\r\n                PQ.values = [v];\r\n            }\r\n        }\r\n    }\r\n\r\n    setValues(values);\r\n\r\n    /**\r\n     * @name ParameterizedQuery#text\r\n     * @type {string|QueryFile}\r\n     * @description\r\n     * A non-empty query string or a {@link QueryFile} object.\r\n     */\r\n    Object.defineProperty(this, 'text', {\r\n        get: function () {\r\n            return state.text;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.text) {\r\n                state.text = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name ParameterizedQuery#values\r\n     * @type {array}\r\n     * @description\r\n     * Query formatting parameters, depending on the type:\r\n     *\r\n     * - `null` / `undefined` means the query has no formatting parameters\r\n     * - `Array` - it is an array of formatting parameters\r\n     * - None of the above, means it is a single formatting value, which\r\n     *   is then automatically wrapped into an array\r\n     */\r\n    Object.defineProperty(this, 'values', {\r\n        get: function () {\r\n            return PQ.values;\r\n        },\r\n        set: function (value) {\r\n            setValues(value);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name ParameterizedQuery#binary\r\n     * @type {boolean}\r\n     * @default undefined\r\n     * @description\r\n     * Activates binary result mode. The default is the text mode.\r\n     *\r\n     * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n     */\r\n    Object.defineProperty(this, 'binary', {\r\n        get: function () {\r\n            return state.binary;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.binary) {\r\n                state.binary = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name ParameterizedQuery#rowMode\r\n     * @type {string}\r\n     * @default undefined\r\n     * @description\r\n     * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n     *  - `rowMode = 'array'` will make all data rows arrive as arrays of values.\r\n     *    By default, rows arrive as objects.\r\n     */\r\n    Object.defineProperty(this, 'rowMode', {\r\n        get: function () {\r\n            return state.rowMode;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.rowMode) {\r\n                state.rowMode = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name ParameterizedQuery#error\r\n     * @type {errors.ParameterizedQueryError}\r\n     * @default undefined\r\n     * @readonly\r\n     * @description\r\n     * When in an error state, it is set to a {@link errors.ParameterizedQueryError ParameterizedQueryError} object. Otherwise, it is `undefined`.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    Object.defineProperty(this, 'error', {\r\n        get: function () {\r\n            return currentError;\r\n        }\r\n    });\r\n\r\n    if ($npm.utils.isObject(text, ['text'])) {\r\n        state.text = text.text;\r\n        state.binary = text.binary;\r\n        state.rowMode = text.rowMode;\r\n        setValues(text.values);\r\n    }\r\n\r\n    /**\r\n     * @method ParameterizedQuery.parse\r\n     * @description\r\n     * Parses the current object and returns a simple `{text, values}`, if successful,\r\n     * or else it returns a {@link errors.ParameterizedQueryError ParameterizedQueryError} object.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @returns {{text, values}|errors.ParameterizedQueryError}\r\n     */\r\n    this.parse = function () {\r\n\r\n        var qf = state.text instanceof $npm.QueryFile ? state.text : null;\r\n\r\n        if (!changed && !qf) {\r\n            return PQ;\r\n        }\r\n\r\n        var errors = [], values = PQ.values;\r\n        PQ = {\r\n            name: state.name\r\n        };\r\n        changed = true;\r\n        currentError = undefined;\r\n\r\n        if (qf) {\r\n            qf.prepare();\r\n            if (qf.error) {\r\n                PQ.text = state.text;\r\n                errors.push(qf.error);\r\n            } else {\r\n                PQ.text = qf.query;\r\n            }\r\n        } else {\r\n            PQ.text = state.text;\r\n        }\r\n        if (!$npm.utils.isText(PQ.text)) {\r\n            errors.push(\"Property 'text' must be a non-empty text string.\");\r\n        }\r\n\r\n        if (!$npm.utils.isNull(values)) {\r\n            PQ.values = values;\r\n        }\r\n\r\n        if (state.binary !== undefined) {\r\n            PQ.binary = state.binary;\r\n        }\r\n\r\n        if (state.rowMode !== undefined) {\r\n            PQ.rowMode = state.rowMode;\r\n        }\r\n\r\n        if (errors.length) {\r\n            return currentError = new $npm.errors.ParameterizedQueryError(errors[0], PQ);\r\n        }\r\n\r\n        changed = false;\r\n\r\n        return PQ;\r\n    };\r\n}\r\n\r\n/**\r\n * @method ParameterizedQuery.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nParameterizedQuery.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap = $npm.utils.messageGap(level + 1);\r\n    var pq = this.parse();\r\n    var lines = [\r\n        'ParameterizedQuery {'\r\n    ];\r\n    if ($npm.utils.isText(pq.text)) {\r\n        lines.push(gap + 'text: \"' + pq.text + '\"');\r\n    }\r\n    if (this.values !== undefined) {\r\n        lines.push(gap + 'values: ' + JSON.stringify(this.values));\r\n    }\r\n    if (this.binary !== undefined) {\r\n        lines.push(gap + 'binary: ' + JSON.stringify(this.binary));\r\n    }\r\n    if (this.rowMode !== undefined) {\r\n        lines.push(gap + 'rowMode: ' + JSON.stringify(this.rowMode));\r\n    }\r\n    if (this.error !== undefined) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push($npm.utils.messageGap(level) + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nmodule.exports = ParameterizedQuery;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/types/parameterized.js\n// module id = 123\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    os: require('os'),\r\n    utils: require('../utils'),\r\n    errors: require('../errors'),\r\n    QueryFile: require('../queryFile')\r\n};\r\n\r\n/**\r\n * @constructor PreparedStatement\r\n * @description\r\n * **Alternative Syntax:** `PreparedStatement({name, text, values, ...})` &#8658; {@link PreparedStatement}\r\n *\r\n * Constructs a new $[Prepared Statement] object.\r\n *\r\n * The alternative syntax supports advanced properties {@link PreparedStatement#binary binary}, {@link PreparedStatement#rowMode rowMode}\r\n * and {@link PreparedStatement#rows rows}, which are passed into $[pg], but not used by the class.\r\n *\r\n * All properties can also be set after the object's construction.\r\n *\r\n * This type extends the basic `{name, text, values}` object, by replacing it, i.e. when the basic object is used\r\n * with a query method, a new {@link PreparedStatement} object is created implicitly in its place.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly. And it never throws any error,\r\n * leaving it for query methods to reject with {@link errors.PreparedStatementError PreparedStatementError}.\r\n *\r\n * The type is available from the library's root: `pgp.PreparedStatement`.\r\n *\r\n * @param {string} name\r\n * An arbitrary name given to this particular prepared statement. It must be unique within a single session and is\r\n * subsequently used to execute or deallocate a previously prepared statement.\r\n *\r\n * @param {string|QueryFile} text\r\n * A non-empty query string or a {@link QueryFile} object.\r\n *\r\n * Only the basic variables (`$1`, `$2`, etc) can be used in the query, because $[Prepared Statements] are formatted by the database server.\r\n *\r\n * @param {array} [values]\r\n * Query formatting values. When it is not an `Array` and not `null`/`undefined`, it is automatically wrapped into an array.\r\n *\r\n * @returns {PreparedStatement}\r\n *\r\n * @see\r\n * {@link errors.PreparedStatementError PreparedStatementError},\r\n * {@link http://www.postgresql.org/docs/9.5/static/sql-prepare.html PostgreSQL Prepared Statements}\r\n *\r\n * @example\r\n *\r\n * var PS = require('pg-promise').PreparedStatement;\r\n *\r\n * // Creating a complete Prepared Statement with parameters:\r\n * var findUser = new PS('find-user', 'SELECT * FROM Users WHERE id = $1', [123]);\r\n *\r\n * db.one(findUser)\r\n *     .then(user=> {\r\n *         // user found;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * @example\r\n *\r\n * var PS = require('pg-promise').PreparedStatement;\r\n *\r\n * // Creating a reusable Prepared Statement without values:\r\n * var addUser = new PS('add-user', 'INSERT INTO Users(name, age) VALUES($1, $2)');\r\n *\r\n * // setting values explicitly:\r\n * addUser.values = ['John', 30];\r\n *\r\n * db.none(addUser)\r\n *     .then(()=> {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n *\r\n * // setting values implicitly, by passing them into the query method:\r\n * db.none(addUser, ['Mike', 25])\r\n *     .then(()=> {\r\n *         // user added;\r\n *     })\r\n *     .catch(error=> {\r\n *         // error;\r\n *     });\r\n */\r\nfunction PreparedStatement(name, text, values) {\r\n    if (!(this instanceof PreparedStatement)) {\r\n        return new PreparedStatement(name, text, values);\r\n    }\r\n\r\n    var currentError, PS = {}, changed = true, state = {\r\n        name: name,\r\n        text: text,\r\n        binary: undefined,\r\n        rowMode: undefined,\r\n        rows: undefined\r\n    };\r\n\r\n    function setValues(v) {\r\n        if (Array.isArray(v)) {\r\n            if (v.length) {\r\n                PS.values = v;\r\n            } else {\r\n                delete PS.values;\r\n            }\r\n        } else {\r\n            if ($npm.utils.isNull(v)) {\r\n                delete PS.values;\r\n            } else {\r\n                PS.values = [v];\r\n            }\r\n        }\r\n    }\r\n\r\n    setValues(values);\r\n\r\n    /**\r\n     * @name PreparedStatement#name\r\n     * @type {string}\r\n     * @description\r\n     * An arbitrary name given to this particular prepared statement. It must be unique within a single session and is\r\n     * subsequently used to execute or deallocate a previously prepared statement.\r\n     */\r\n    Object.defineProperty(this, 'name', {\r\n        get: function () {\r\n            return state.name;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.name) {\r\n                state.name = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name PreparedStatement#text\r\n     * @type {string|QueryFile}\r\n     * @description\r\n     * A non-empty query string or a {@link QueryFile} object.\r\n     *\r\n     * Changing this property for the same {@link PreparedStatement#name name} will have no effect, because queries\r\n     * for Prepared Statements are cached, with {@link PreparedStatement#name name} being the cache key.\r\n     */\r\n    Object.defineProperty(this, 'text', {\r\n        get: function () {\r\n            return state.text;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.text) {\r\n                state.text = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name PreparedStatement#values\r\n     * @type {array}\r\n     * @description\r\n     * Query formatting parameters, depending on the type:\r\n     *\r\n     * - `null` / `undefined` means the query has no formatting parameters\r\n     * - `Array` - it is an array of formatting parameters\r\n     * - None of the above, means it is a single formatting value, which\r\n     *   is then automatically wrapped into an array\r\n     */\r\n    Object.defineProperty(this, 'values', {\r\n        get: function () {\r\n            return PS.values;\r\n        },\r\n        set: function (value) {\r\n            setValues(value);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name PreparedStatement#binary\r\n     * @type {boolean}\r\n     * @default undefined\r\n     * @description\r\n     * Activates binary result mode. The default is the text mode.\r\n     *\r\n     * @see {@link http://www.postgresql.org/docs/devel/static/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY Extended Query}\r\n     */\r\n    Object.defineProperty(this, 'binary', {\r\n        get: function () {\r\n            return state.binary;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.binary) {\r\n                state.binary = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name PreparedStatement#rowMode\r\n     * @type {string}\r\n     * @default undefined\r\n     * @description\r\n     * Changes the way data arrives to the client, with only one value supported by $[pg]:\r\n     *  - `rowMode = 'array'` will make all data rows arrive as arrays of values.\r\n     *    By default, rows arrive as objects.\r\n     */\r\n    Object.defineProperty(this, 'rowMode', {\r\n        get: function () {\r\n            return state.rowMode;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.rowMode) {\r\n                state.rowMode = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name PreparedStatement#rows\r\n     * @type {number}\r\n     * @description\r\n     * Number of rows to return at a time from a Prepared Statement's portal.\r\n     * The default is 0, which means that all rows must be returned at once.\r\n     */\r\n    Object.defineProperty(this, 'rows', {\r\n        get: function () {\r\n            return state.rows;\r\n        },\r\n        set: function (value) {\r\n            if (value !== state.rows) {\r\n                state.rows = value;\r\n                changed = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @name PreparedStatement#error\r\n     * @type {errors.PreparedStatementError}\r\n     * @default undefined\r\n     * @description\r\n     * When in an error state, it is set to a {@link errors.PreparedStatementError PreparedStatementError} object. Otherwise, it is `undefined`.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    Object.defineProperty(this, 'error', {\r\n        get: function () {\r\n            return currentError;\r\n        }\r\n    });\r\n\r\n    if ($npm.utils.isObject(name, ['name'])) {\r\n        state.name = name.name;\r\n        state.text = name.text;\r\n        state.binary = name.binary;\r\n        state.rowMode = name.rowMode;\r\n        state.rows = name.rows;\r\n        setValues(name.values);\r\n    }\r\n\r\n    /**\r\n     * @method PreparedStatement.parse\r\n     * @description\r\n     * Parses the current object and returns a simple `{name, text, values}`, if successful,\r\n     * or else it returns a {@link errors.PreparedStatementError PreparedStatementError} object.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @returns {{name, text, values}|errors.PreparedStatementError}\r\n     */\r\n    this.parse = function () {\r\n\r\n        var qf = state.text instanceof $npm.QueryFile ? state.text : null;\r\n\r\n        if (!changed && !qf) {\r\n            return PS;\r\n        }\r\n\r\n        var errors = [], values = PS.values;\r\n        PS = {\r\n            name: state.name\r\n        };\r\n        changed = true;\r\n        currentError = undefined;\r\n\r\n        if (!$npm.utils.isText(PS.name)) {\r\n            errors.push(\"Property 'name' must be a non-empty text string.\");\r\n        }\r\n\r\n        if (qf) {\r\n            qf.prepare();\r\n            if (qf.error) {\r\n                PS.text = state.text;\r\n                errors.push(qf.error);\r\n            } else {\r\n                PS.text = qf.query;\r\n            }\r\n        } else {\r\n            PS.text = state.text;\r\n        }\r\n        if (!$npm.utils.isText(PS.text)) {\r\n            errors.push(\"Property 'text' must be a non-empty text string.\");\r\n        }\r\n\r\n        if (!$npm.utils.isNull(values)) {\r\n            PS.values = values;\r\n        }\r\n\r\n        if (state.binary !== undefined) {\r\n            PS.binary = state.binary;\r\n        }\r\n\r\n        if (state.rowMode !== undefined) {\r\n            PS.rowMode = state.rowMode;\r\n        }\r\n\r\n        if (state.rows !== undefined) {\r\n            PS.rows = state.rows;\r\n        }\r\n\r\n        if (errors.length) {\r\n            return currentError = new $npm.errors.PreparedStatementError(errors[0], PS);\r\n        }\r\n\r\n        changed = false;\r\n\r\n        return PS;\r\n    };\r\n}\r\n\r\n/**\r\n * @method PreparedStatement.toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nPreparedStatement.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    var gap = $npm.utils.messageGap(level + 1);\r\n    var ps = this.parse();\r\n    var lines = [\r\n        'PreparedStatement {',\r\n        gap + 'name: ' + JSON.stringify(this.name)\r\n    ];\r\n    if ($npm.utils.isText(ps.text)) {\r\n        lines.push(gap + 'text: \"' + ps.text + '\"');\r\n    }\r\n    if (this.values !== undefined) {\r\n        lines.push(gap + 'values: ' + JSON.stringify(this.values));\r\n    }\r\n    if (this.binary !== undefined) {\r\n        lines.push(gap + 'binary: ' + JSON.stringify(this.binary));\r\n    }\r\n    if (this.rowMode !== undefined) {\r\n        lines.push(gap + 'rowMode: ' + JSON.stringify(this.rowMode));\r\n    }\r\n    if (this.rows !== undefined) {\r\n        lines.push(gap + 'rows: ' + JSON.stringify(this.rows));\r\n    }\r\n    if (this.error) {\r\n        lines.push(gap + 'error: ' + this.error.toString(level + 1));\r\n    }\r\n    lines.push($npm.utils.messageGap(level) + '}');\r\n    return lines.join($npm.os.EOL);\r\n};\r\n\r\nmodule.exports = PreparedStatement;\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/types/prepared.js\n// module id = 124\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    fs: require('fs'),\r\n    path: require('path'),\r\n    utils: require('./'),\r\n    package: require('../../package.json')\r\n};\r\n\r\nvar EOL = require('os').EOL;\r\n\r\n/**\r\n * @method utils.camelize\r\n * @description\r\n * Camelizes a text string.\r\n *\r\n * Case-changing characters include:\r\n * - _hyphen_\r\n * - _underscore_\r\n * - _period_\r\n * - _space_\r\n *\r\n * @param {string} text\r\n * Input text string.\r\n *\r\n * @returns {string}\r\n * Camelized text string.\r\n *\r\n * @see\r\n * {@link utils.camelizeVar camelizeVar}\r\n *\r\n */\r\nfunction camelize(text) {\r\n    text = text.replace(/[\\-_\\s\\.]+(.)?/g, function (match, chr) {\r\n        return chr ? chr.toUpperCase() : '';\r\n    });\r\n    return text.substr(0, 1).toLowerCase() + text.substr(1);\r\n}\r\n\r\n/**\r\n * @method utils.camelizeVar\r\n * @description\r\n * Camelizes a text string, while making it compliant with JavaScript variable names:\r\n * - contains symbols `a-z`, `A-Z`, `0-9`, `_` and `$`\r\n * - cannot have leading digits\r\n *\r\n * First, it removes all symbols that do not meet the above criteria, except for _hyphen_, _period_ and _space_,\r\n * and then it forwards into {@link utils.camelize camelize}.\r\n *\r\n * @param {string} text\r\n * Input text string.\r\n *\r\n * If it doesn't contain any symbols to make up a valid variable name, the result will be an empty string.\r\n *\r\n * @returns {string}\r\n * Camelized text string that can be used as an open property name.\r\n *\r\n * @see\r\n * {@link utils.camelize camelize}\r\n *\r\n */\r\nfunction camelizeVar(text) {\r\n    text = text.replace(/[^a-zA-Z0-9\\$_\\-\\s\\.]/g, '').replace(/^[0-9_\\-\\s\\.]+/, '');\r\n    return camelize(text);\r\n}\r\n\r\nfunction _enumSql(dir, options, cb, namePath) {\r\n    var tree = {};\r\n    $npm.fs.readdirSync(dir).forEach(function (file) {\r\n        var stat, fullPath = $npm.path.join(dir, file);\r\n        try {\r\n            stat = $npm.fs.statSync(fullPath);\r\n        } catch (e) {\r\n            // while it is very easy to test manually, it is very difficult to test for\r\n            // access-denied errors automatically; therefore excluding from the coverage:\r\n            // istanbul ignore next\r\n            if (options.ignoreErrors) {\r\n                return; // on to the next file/folder;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n        if (stat.isDirectory()) {\r\n            if (options.recursive) {\r\n                var dirName = camelizeVar(file);\r\n                var np = namePath ? (namePath + '.' + dirName) : dirName;\r\n                var t = _enumSql(fullPath, options, cb, np);\r\n                if (Object.keys(t).length) {\r\n                    if (!dirName.length || dirName in tree) {\r\n                        if (!options.ignoreErrors) {\r\n                            throw new Error(\"Empty or duplicate camelized folder name: \" + fullPath);\r\n                        }\r\n                    }\r\n                    tree[dirName] = t;\r\n                }\r\n            }\r\n        } else {\r\n            if ($npm.path.extname(file).toLowerCase() === '.sql') {\r\n                var name = camelizeVar(file.replace(/\\.[^/.]+$/, ''));\r\n                if (!name.length || name in tree) {\r\n                    if (!options.ignoreErrors) {\r\n                        throw new Error(\"Empty or duplicate camelized file name: \" + fullPath);\r\n                    }\r\n                }\r\n                tree[name] = fullPath;\r\n                if (cb) {\r\n                    var result = cb(fullPath, name, namePath ? (namePath + '.' + name) : name);\r\n                    if (result !== undefined) {\r\n                        tree[name] = result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return tree;\r\n}\r\n\r\n/**\r\n * @method utils.enumSql\r\n * @description\r\n * Synchronously enumerates all SQL files (within a given directory) into a camelized SQL tree.\r\n *\r\n * All property names within the tree are camelized via {@link utils.camelizeVar camelizeVar},\r\n * so they can be used in the code directly, as open property names.\r\n *\r\n * @param {string} dir\r\n * Directory path where SQL files are located, either absolute or relative to the current directory.\r\n *\r\n * SQL files are identified by using `.sql` extension (case-insensitive).\r\n *\r\n * @param {object} [options]\r\n * Search options.\r\n *\r\n * @param {boolean} [options.recursive=false]\r\n * Include sub-directories into the search.\r\n *\r\n * Sub-directories without SQL files will be skipped from the result.\r\n *\r\n * @param {boolean} [options.ignoreErrors=false]\r\n * Ignore the following types of errors:\r\n * - access errors, when there is no read access to a file or folder\r\n * - empty or duplicate camelized property names\r\n *\r\n * This flag does not affect errors related to invalid input parameters, or if you pass in a\r\n * non-existing directory.\r\n *\r\n * @param {function} [cb]\r\n * A callback function that takes three arguments:\r\n * - `file` - SQL file path, relative or absolute, according to how you specified the search directory\r\n * - `name` - name of the property that represents the SQL file\r\n * - `path` - property resolution path (full property name)\r\n *\r\n * If the function returns anything other than `undefined`, it overrides the corresponding property value in the tree.\r\n *\r\n * @returns {object}\r\n * Camelized SQL tree object, with each value being an SQL file path (unless changed via the callback).\r\n *\r\n * @see\r\n * {@link utils.objectToCode objectToCode},\r\n * {@link utils.buildSqlModule buildSqlModule}\r\n *\r\n * @example\r\n *\r\n * // simple SQL tree generation for further processing:\r\n * var tree = pgp.utils.enumSql('../sql', {recursive: true});\r\n *\r\n * @example\r\n *\r\n * // generating an SQL tree for dynamic use of names:\r\n * var sql = pgp.utils.enumSql(__dirname, {recursive: true}, file=> {\r\n *     return new pgp.QueryFile(file, {minify: true});\r\n * });\r\n *\r\n * @example\r\n *\r\n * var path = require('path');\r\n *\r\n * // replacing each relative path in the tree with a full one:\r\n * var tree = pgp.utils.enumSql('../sql', {recursive: true}, file=> {\r\n *     return path.join(__dirname, file);\r\n * });\r\n *\r\n */\r\nfunction enumSql(dir, options, cb) {\r\n    if (!$npm.utils.isText(dir)) {\r\n        throw new TypeError(\"Parameter 'dir' must be a non-empty text string.\");\r\n    }\r\n    if (!options || typeof options !== 'object') {\r\n        options = {};\r\n    }\r\n    cb = (typeof cb === 'function') ? cb : null;\r\n    return _enumSql(dir, options, cb, '');\r\n}\r\n\r\n/**\r\n *\r\n * @method utils.objectToCode\r\n * @description\r\n * Translates an object tree into a well-formatted JSON code string.\r\n *\r\n * @param {object} obj\r\n * Source tree object.\r\n *\r\n * @param {function} [cb]\r\n * A callback function to override property values for the code.\r\n *\r\n * It takes three arguments:\r\n *\r\n * - `value` - property value\r\n * - `name` - property name\r\n * - `obj` - current object (which contains the property)\r\n *\r\n * The returned value is used as is for the property value in the generated code.\r\n *\r\n * @returns {string}\r\n *\r\n * @see\r\n * {@link utils.enumSql enumSql},\r\n * {@link utils.buildSqlModule buildSqlModule}\r\n *\r\n * @example\r\n *\r\n * // Generating code for a simple object\r\n *\r\n * var tree = {one: 1, two: {item: 'abc'}};\r\n *\r\n * var code = pgp.utils.objectToCode(tree);\r\n *\r\n * console.log(code);\r\n * //=>\r\n * // {\r\n * //     one: 1,\r\n * //     two: {\r\n * //         item: \"abc\"\r\n * //     }\r\n * // }\r\n *\r\n * @example\r\n *\r\n * // Generating a Node.js module with an SQL tree\r\n *\r\n * var fs = require('fs');\r\n * var EOL = require('os').EOL;\r\n *\r\n * // generating an SQL tree from the folder:\r\n * var tree = pgp.utils.enumSql('./sql', {recursive: true});\r\n *\r\n * // generating the module's code:\r\n * var code = \"var load = require('./loadSql');\" + EOL + EOL + \"module.exports = \" +\r\n *         pgp.utils.objectToCode(tree, function (value) {\r\n *             return 'load(' + JSON.stringify(value) + ')';\r\n *         }) + ';';\r\n *\r\n * // saving the module:\r\n * fs.writeFileSync('sql.js', code);\r\n *\r\n * @example\r\n *\r\n * // generated code example (file sql.js)\r\n *\r\n * var load = require('./loadSql');\r\n *\r\n * module.exports = {\r\n *     events: {\r\n *         add: load(\"../sql/events/add.sql\"),\r\n *         delete: load(\"../sql/events/delete.sql\"),\r\n *         find: load(\"../sql/events/find.sql\"),\r\n *         update: load(\"../sql/events/update.sql\")\r\n *     },\r\n *     products: {\r\n *         add: load(\"../sql/products/add.sql\"),\r\n *         delete: load(\"../sql/products/delete.sql\"),\r\n *         find: load(\"../sql/products/find.sql\"),\r\n *         update: load(\"../sql/products/update.sql\")\r\n *     },\r\n *     users: {\r\n *         add: load(\"../sql/users/add.sql\"),\r\n *         delete: load(\"../sql/users/delete.sql\"),\r\n *         find: load(\"../sql/users/find.sql\"),\r\n *         update: load(\"../sql/users/update.sql\")\r\n *     },\r\n *     create: load(\"../sql/create.sql\"),\r\n *     init: load(\"../sql/init.sql\"),\r\n *     drop: load(\"../sql/drop.sql\")\r\n *};\r\n *\r\n * @example\r\n *\r\n * // loadSql.js module example\r\n *\r\n * var QueryFile = require('pg-promise').QueryFile;\r\n *\r\n * module.exports = function(file) {\r\n *     return new QueryFile(file, {minify: true});\r\n * };\r\n *\r\n */\r\nfunction objectToCode(obj, cb) {\r\n\r\n    if (!obj || typeof obj !== 'object') {\r\n        throw new TypeError(\"Parameter 'obj' must be a non-null object.\");\r\n    }\r\n\r\n    cb = (typeof cb === 'function') ? cb : null;\r\n\r\n    return '{' + generate(obj, 1) + EOL + '}';\r\n\r\n    function generate(obj, level) {\r\n        var code = '', gap = $npm.utils.messageGap(level);\r\n        var idx = 0;\r\n        for (var prop in obj) {\r\n            var value = obj[prop];\r\n            if (idx) {\r\n                code += ',';\r\n            }\r\n            if (value && typeof value === 'object') {\r\n                code += EOL + gap + prop + ': {';\r\n                code += generate(value, level + 1);\r\n                code += EOL + gap + '}';\r\n            } else {\r\n                code += EOL + gap + prop + ': ';\r\n                if (cb) {\r\n                    code += cb(value, prop, obj);\r\n                } else {\r\n                    code += JSON.stringify(value);\r\n                }\r\n            }\r\n            idx++;\r\n        }\r\n        return code;\r\n    }\r\n}\r\n\r\n/**\r\n * @method utils.buildSqlModule\r\n * @description\r\n * Synchronously generates a Node.js module with a camelized SQL tree, based on a configuration object that has the format shown below.\r\n *\r\n * This method is normally to be used on a grunt/gulp watch that triggers when the file structure changes in your SQL directory,\r\n * although it can be invoked manually as well.\r\n *\r\n * ```js\r\n * {\r\n *    // Required Properties:\r\n *    \r\n *    \"dir\" // {string}: relative or absolute directory where SQL files are located (see API for method enumSql, parameter `dir`)\r\n *\r\n *    // Optional Properties:\r\n *    \r\n *    \"recursive\" // {boolean}: search for sql files recursively (see API for method enumSql, option `recursive`)\r\n *\r\n *    \"ignoreErrors\" // {boolean}: ignore common errors (see API for method enumSql, option `ignoreErrors`)\r\n *\r\n *    \"output\" // {string}: relative or absolute destination file path; when not specified, no file is created,\r\n *             // but you still can use the code string that's always returned by the method.\r\n *     \r\n *    \"module\": {\r\n *        \"path\" // {string}: relative path to a module exporting a function which takes a file path\r\n *               // and returns a proper value (typically, a new QueryFile object); by default, it uses `./loadSql`.\r\n *\r\n *        \"name\" // {string}: local variable name for the SQL-loading module; by default, it uses `load`.\r\n *    }\r\n * }\r\n * ```\r\n *\r\n * @param {object|string} [config]\r\n * Configuration parameter for generating the code.\r\n *\r\n * - When it is a non-null object, it is assumed to be a configuration object (see the format above).\r\n * - When it is a text string - it is the relative path to either a JSON file that contains the configuration object,\r\n *   or a Node.js module that exports one. The path is relative to the application's entry point file.\r\n * - When `config` isn't specified, the method will try to locate the default `sql-config.json` file in the directory of your\r\n *   application's entry point file, and if not found - throw {@link external:Error Error} = `Default SQL configuration file not found`.\r\n *\r\n * @returns {string}\r\n * Generated code.\r\n *\r\n * @see\r\n * {@link utils.enumSql enumSql},\r\n * {@link utils.objectToCode objectToCode}\r\n *\r\n * @example\r\n *\r\n * // generate SQL module automatically, from sql-config.json in the module's start-up folder:\r\n *\r\n * pgp.utils.buildSqlModule();\r\n *\r\n * // see generated file below:\r\n *\r\n * @example\r\n *\r\n * /////////////////////////////////////////////////////////////////////////\r\n * // This file was automatically generated by pg-promise v.4.3.8\r\n * //\r\n * // Generated on: 6/2/2016, at 2:15:23 PM\r\n * // Total files: 15\r\n * //\r\n * // API: http://vitaly-t.github.io/pg-promise/utils.html#.buildSqlModule\r\n * /////////////////////////////////////////////////////////////////////////\r\n *\r\n * var load = require('./loadSql');\r\n *\r\n * module.exports = {\r\n *     events: {\r\n *         add: load(\"../sql/events/add.sql\"),\r\n *         delete: load(\"../sql/events/delete.sql\"),\r\n *         find: load(\"../sql/events/find.sql\"),\r\n *         update: load(\"../sql/events/update.sql\")\r\n *     },\r\n *     products: {\r\n *         add: load(\"../sql/products/add.sql\"),\r\n *         delete: load(\"../sql/products/delete.sql\"),\r\n *         find: load(\"../sql/products/find.sql\"),\r\n *         update: load(\"../sql/products/update.sql\")\r\n *     },\r\n *     users: {\r\n *         add: load(\"../sql/users/add.sql\"),\r\n *         delete: load(\"../sql/users/delete.sql\"),\r\n *         find: load(\"../sql/users/find.sql\"),\r\n *         update: load(\"../sql/users/update.sql\")\r\n *     },\r\n *     create: load(\"../sql/create.sql\"),\r\n *     init: load(\"../sql/init.sql\"),\r\n *     drop: load(\"../sql/drop.sql\")\r\n *};\r\n *\r\n */\r\nfunction buildSqlModule(config) {\r\n\r\n    if ($npm.utils.isText(config)) {\r\n        var path = $npm.utils.isPathAbsolute(config) ? config : $npm.path.join($npm.utils.startDir, config);\r\n        config = require(path);\r\n    } else {\r\n        if ($npm.utils.isNull(config)) {\r\n            var defConfig = $npm.path.join($npm.utils.startDir, 'sql-config.json');\r\n            // istanbul ignore else;\r\n            if (!$npm.fs.existsSync(defConfig)) {\r\n                throw new Error(\"Default SQL configuration file not found: \" + defConfig);\r\n            }\r\n            // cannot test this automatically, because it requires that file 'sql-config.json'\r\n            // resides within the Jasmine folder, since it is the client during the test.\r\n            // istanbul ignore next;\r\n            config = require(defConfig);\r\n        } else {\r\n            if (!config || typeof config !== 'object') {\r\n                throw new TypeError(\"Invalid parameter 'config' specified.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!$npm.utils.isText(config.dir)) {\r\n        throw new Error(\"Property 'dir' must be a non-empty string.\");\r\n    }\r\n\r\n    var total = 0;\r\n\r\n    var tree = enumSql(config.dir, {recursive: config.recursive, ignoreErrors: config.ignoreErrors}, function () {\r\n        total++;\r\n    });\r\n\r\n    var modulePath = './loadSql', moduleName = 'load';\r\n    if (config.module && typeof config.module === 'object') {\r\n        if ($npm.utils.isText(config.module.path)) {\r\n            modulePath = config.module.path;\r\n        }\r\n        if ($npm.utils.isText(config.module.name)) {\r\n            moduleName = config.module.name;\r\n        }\r\n    }\r\n\r\n    var d = new Date();\r\n\r\n    var header =\r\n        \"/////////////////////////////////////////////////////////////////////////\" + EOL +\r\n        \"// This file was automatically generated by pg-promise v.\" + $npm.package.version + EOL +\r\n        \"//\" + EOL +\r\n        \"// Generated on: \" + d.toLocaleDateString() + ', at ' + d.toLocaleTimeString() + EOL +\r\n        \"// Total files: \" + total + EOL +\r\n        \"//\" + EOL +\r\n        \"// API: http://vitaly-t.github.io/pg-promise/utils.html#.buildSqlModule\" + EOL +\r\n        \"/////////////////////////////////////////////////////////////////////////\" + EOL + EOL +\r\n        \"'use strict';\" + EOL + EOL +\r\n        \"var \" + moduleName + \" = require('\" + modulePath + \"');\" + EOL + EOL +\r\n        \"module.exports = \";\r\n\r\n    var code = header + objectToCode(tree, function (value) {\r\n            return moduleName + '(' + JSON.stringify(value) + ')';\r\n        }) + ';';\r\n\r\n    if ($npm.utils.isText(config.output)) {\r\n        var path = config.output;\r\n        if (!$npm.utils.isPathAbsolute(path)) {\r\n            path = $npm.path.join($npm.utils.startDir, path);\r\n        }\r\n        $npm.fs.writeFileSync(path, code);\r\n    }\r\n\r\n    return code;\r\n}\r\n\r\n\r\n/**\r\n * @namespace utils\r\n *\r\n * @description\r\n * Namespace for general-purpose static functions, available as `pgp.utils`, before and after initializing the library.\r\n *\r\n * Its main purpose is to simplify developing projects with either large or dynamic number of SQL files.\r\n *\r\n * See also:\r\n * - [Automatic SQL Trees](https://github.com/vitaly-t/pg-promise/issues/153)\r\n * - [SQL Files](https://github.com/vitaly-t/pg-promise/wiki/SQL-Files)\r\n *\r\n * @property {function} camelize\r\n * {@link utils.camelize camelize} - camelizes a text string\r\n *\r\n * @property {function} camelizeVar\r\n * {@link utils.camelizeVar camelizeVar} - camelizes a text string as a variable\r\n *\r\n * @property {function} enumSql\r\n * {@link utils.enumSql enumSql} - enumerates SQL files in a directory\r\n *\r\n * @property {function} objectToCode\r\n * {@link utils.objectToCode objectToCode} - generates code from an object\r\n *\r\n * @property {function} buildSqlModule\r\n * {@link utils.buildSqlModule buildSqlModule} - generates a complete Node.js module\r\n *\r\n */\r\nmodule.exports = {\r\n    camelize: camelize,\r\n    camelizeVar: camelizeVar,\r\n    enumSql: enumSql,\r\n    objectToCode: objectToCode,\r\n    buildSqlModule: buildSqlModule\r\n};\r\n\r\nObject.freeze(module.exports);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/lib/utils/public.js\n// module id = 125\n// module chunks = 0","var crypto = require('crypto');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar pgPass = require('pgpass');\nvar TypeOverrides = require('./type-overrides');\n\nvar ConnectionParameters = require('./connection-parameters');\nvar Query = require('./query');\nvar defaults = require('./defaults');\nvar Connection = require('./connection');\n\nvar Client = function(config) {\n  EventEmitter.call(this);\n\n  this.connectionParameters = new ConnectionParameters(config);\n  this.user = this.connectionParameters.user;\n  this.database = this.connectionParameters.database;\n  this.port = this.connectionParameters.port;\n  this.host = this.connectionParameters.host;\n  this.password = this.connectionParameters.password;\n\n  var c = config || {};\n\n  this._types = new TypeOverrides(c.types);\n\n  this.connection = c.connection || new Connection({\n    stream: c.stream,\n    ssl: this.connectionParameters.ssl\n  });\n  this.queryQueue = [];\n  this.binary = c.binary || defaults.binary;\n  this.encoding = 'utf8';\n  this.processID = null;\n  this.secretKey = null;\n  this.ssl = this.connectionParameters.ssl || false;\n};\n\nutil.inherits(Client, EventEmitter);\n\nClient.prototype.connect = function(callback) {\n  var self = this;\n  var con = this.connection;\n\n  if(this.host && this.host.indexOf('/') === 0) {\n    con.connect(this.host + '/.s.PGSQL.' + this.port);\n  } else {\n    con.connect(this.port, this.host);\n  }\n\n\n  //once connection is established send startup message\n  con.on('connect', function() {\n    if(self.ssl) {\n      con.requestSsl();\n    } else {\n      con.startup(self.getStartupConf());\n    }\n  });\n\n  con.on('sslconnect', function() {\n    con.startup(self.getStartupConf());\n  });\n\n  function checkPgPass(cb) {\n    return function(msg) {\n      if (null !== self.password) {\n        cb(msg);\n      } else {\n        pgPass(self.connectionParameters, function(pass){\n          if (undefined !== pass) {\n            self.connectionParameters.password = self.password = pass;\n          }\n          cb(msg);\n        });\n      }\n    };\n  }\n\n  //password request handling\n  con.on('authenticationCleartextPassword', checkPgPass(function() {\n    con.password(self.password);\n  }));\n\n  //password request handling\n  con.on('authenticationMD5Password', checkPgPass(function(msg) {\n    var inner = Client.md5(self.password + self.user);\n    var outer = Client.md5(Buffer.concat([new Buffer(inner), msg.salt]));\n    var md5password = \"md5\" + outer;\n    con.password(md5password);\n  }));\n\n  con.once('backendKeyData', function(msg) {\n    self.processID = msg.processID;\n    self.secretKey = msg.secretKey;\n  });\n\n  //hook up query handling events to connection\n  //after the connection initially becomes ready for queries\n  con.once('readyForQuery', function() {\n\n    //delegate rowDescription to active query\n    con.on('rowDescription', function(msg) {\n      self.activeQuery.handleRowDescription(msg);\n    });\n\n    //delegate dataRow to active query\n    con.on('dataRow', function(msg) {\n      self.activeQuery.handleDataRow(msg);\n    });\n\n    //delegate portalSuspended to active query\n    con.on('portalSuspended', function(msg) {\n      self.activeQuery.handlePortalSuspended(con);\n    });\n\n    //deletagate emptyQuery to active query\n    con.on('emptyQuery', function(msg) {\n      self.activeQuery.handleEmptyQuery(con);\n    });\n\n    //delegate commandComplete to active query\n    con.on('commandComplete', function(msg) {\n      self.activeQuery.handleCommandComplete(msg, con);\n    });\n\n    //if a prepared statement has a name and properly parses\n    //we track that its already been executed so we don't parse\n    //it again on the same client\n    con.on('parseComplete', function(msg) {\n      if(self.activeQuery.name) {\n        con.parsedStatements[self.activeQuery.name] = true;\n      }\n    });\n\n    con.on('copyInResponse', function(msg) {\n      self.activeQuery.handleCopyInResponse(self.connection);\n    });\n\n    con.on('copyData', function (msg) {\n      self.activeQuery.handleCopyData(msg, self.connection);\n    });\n\n    con.on('notification', function(msg) {\n      self.emit('notification', msg);\n    });\n\n    //process possible callback argument to Client#connect\n    if (callback) {\n      callback(null, self);\n      //remove callback for proper error handling\n      //after the connect event\n      callback = null;\n    }\n    self.emit('connect');\n  });\n\n  con.on('readyForQuery', function() {\n    var activeQuery = self.activeQuery;\n    self.activeQuery = null;\n    self.readyForQuery = true;\n    self._pulseQueryQueue();\n    if(activeQuery) {\n      activeQuery.handleReadyForQuery();\n    }\n  });\n\n  con.on('error', function(error) {\n    if(self.activeQuery) {\n      var activeQuery = self.activeQuery;\n      self.activeQuery = null;\n      return activeQuery.handleError(error, con);\n    }\n    if(!callback) {\n      return self.emit('error', error);\n    }\n    callback(error);\n    callback = null;\n  });\n\n  con.once('end', function() {\n    if ( callback ) {\n      // haven't received a connection message yet !\n      var err = new Error('Connection terminated');\n      callback(err);\n      callback = null;\n      return;\n    }\n    if(self.activeQuery) {\n      var disconnectError = new Error('Connection terminated');\n      self.activeQuery.handleError(disconnectError, con);\n      self.activeQuery = null;\n    }\n    self.emit('end');\n  });\n\n\n  con.on('notice', function(msg) {\n    self.emit('notice', msg);\n  });\n\n};\n\nClient.prototype.getStartupConf = function() {\n  var params = this.connectionParameters;\n\n  var data = {\n    user: params.user,\n    database: params.database\n  };\n\n  var appName = params.application_name || params.fallback_application_name;\n  if (appName) {\n    data.application_name = appName;\n  }\n\n  return data;\n};\n\nClient.prototype.cancel = function(client, query) {\n  if(client.activeQuery == query) {\n    var con = this.connection;\n\n    if(this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port);\n    } else {\n      con.connect(this.port, this.host);\n    }\n\n    //once connection is established send cancel message\n    con.on('connect', function() {\n      con.cancel(client.processID, client.secretKey);\n    });\n  } else if(client.queryQueue.indexOf(query) != -1) {\n    client.queryQueue.splice(client.queryQueue.indexOf(query), 1);\n  }\n};\n\nClient.prototype.setTypeParser = function(oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\n\nClient.prototype.getTypeParser = function(oid, format) {\n  return this._types.getTypeParser(oid, format);\n};\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeIdentifier = function(str) {\n\n  var escaped = '\"';\n\n  for(var i = 0; i < str.length; i++) {\n    var c = str[i];\n    if(c === '\"') {\n      escaped += c + c;\n    } else {\n      escaped += c;\n    }\n  }\n\n  escaped += '\"';\n\n  return escaped;\n};\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeLiteral = function(str) {\n\n  var hasBackslash = false;\n  var escaped = '\\'';\n\n  for(var i = 0; i < str.length; i++) {\n    var c = str[i];\n    if(c === '\\'') {\n      escaped += c + c;\n    } else if (c === '\\\\') {\n      escaped += c + c;\n      hasBackslash = true;\n    } else {\n      escaped += c;\n    }\n  }\n\n  escaped += '\\'';\n\n  if(hasBackslash === true) {\n    escaped = ' E' + escaped;\n  }\n\n  return escaped;\n};\n\nClient.prototype._pulseQueryQueue = function() {\n  if(this.readyForQuery===true) {\n    this.activeQuery = this.queryQueue.shift();\n    if(this.activeQuery) {\n      this.readyForQuery = false;\n      this.hasExecuted = true;\n      this.activeQuery.submit(this.connection);\n    } else if(this.hasExecuted) {\n      this.activeQuery = null;\n      this.emit('drain');\n    }\n  }\n};\n\nClient.prototype.copyFrom = function (text) {\n  throw new Error(\"For PostgreSQL COPY TO/COPY FROM support npm install pg-copy-streams\");\n};\n\nClient.prototype.copyTo = function (text) {\n  throw new Error(\"For PostgreSQL COPY TO/COPY FROM support npm install pg-copy-streams\");\n};\n\nClient.prototype.query = function(config, values, callback) {\n  //can take in strings, config object or query object\n  var query = (typeof config.submit == 'function') ? config :\n     new Query(config, values, callback);\n  if(this.binary && !query.binary) {\n    query.binary = true;\n  }\n  if(query._result) {\n    query._result._getTypeParser = this._types.getTypeParser.bind(this._types);\n  }\n\n  this.queryQueue.push(query);\n  this._pulseQueryQueue();\n  return query;\n};\n\nClient.prototype.end = function() {\n  this.connection.end();\n};\n\nClient.md5 = function(string) {\n  return crypto.createHash('md5').update(string).digest('hex');\n};\n\n// expose a Query constructor\nClient.Query = Query;\n\nmodule.exports = Client;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/client.js\n// module id = 126\n// module chunks = 0","var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar Client = require('./client');\nvar defaults =  require('./defaults');\nvar pool = require('./pool');\nvar Connection = require('./connection');\n\nvar PG = function(clientConstructor) {\n  EventEmitter.call(this);\n  this.defaults = defaults;\n  this.Client = clientConstructor;\n  this.Query = this.Client.Query;\n  this.pools = pool(clientConstructor);\n  this.Connection = Connection;\n  this.types = require('pg-types');\n};\n\nutil.inherits(PG, EventEmitter);\n\nPG.prototype.end = function() {\n  var self = this;\n  var keys = Object.keys(self.pools.all);\n  var count = keys.length;\n  if(count === 0) {\n    self.emit('end');\n  } else {\n    keys.forEach(function(key) {\n      var pool = self.pools.all[key];\n      delete self.pools.all[key];\n      pool.drain(function() {\n        pool.destroyAllNow(function() {\n          count--;\n          if(count === 0) {\n            self.emit('end');\n          }\n        });\n      });\n    });\n  }\n};\n\n\nPG.prototype.connect = function(config, callback) {\n  if(typeof config == \"function\") {\n    callback = config;\n    config = null;\n  }\n  var pool = this.pools.getOrCreate(config);\n  pool.connect(callback);\n  if(!pool.listeners('error').length) {\n    //propagate errors up to pg object\n    pool.on('error', this.emit.bind(this, 'error'));\n  }\n};\n\n// cancel the query runned by the given client\nPG.prototype.cancel = function(config, client, query) {\n  if(client.native) {\n    return client.cancel(query);\n  }\n  var c = config;\n  //allow for no config to be passed\n  if(typeof c === 'function') {\n    c = defaults;\n  }\n  var cancellingClient = new this.Client(c);\n  cancellingClient.cancel(client, query);\n};\n\nif(typeof process.env.NODE_PG_FORCE_NATIVE != 'undefined') {\n  module.exports = new PG(require('./native'));\n} else {\n  module.exports = new PG(Client);\n\n  //lazy require native module...the native module may not have installed\n  module.exports.__defineGetter__(\"native\", function() {\n    delete module.exports.native;\n    var native = null;\n    try {\n      native = new PG(require('./native'));\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        throw err;\n      }\n      console.error(err.message);\n    }\n    module.exports.native = native;\n    return native;\n  });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/index.js\n// module id = 127\n// module chunks = 0","var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar utils = require('../utils');\nvar NativeResult = require('./result');\n\nvar NativeQuery = module.exports = function(native) {\n  EventEmitter.call(this);\n  this.native = native;\n  this.text = null;\n  this.values = null;\n  this.name = null;\n  this.callback = null;\n  this.state = 'new';\n  this._arrayMode = false;\n\n  //if the 'row' event is listened for\n  //then emit them as they come in\n  //without setting singleRowMode to true\n  //this has almost no meaning because libpq\n  //reads all rows into memory befor returning any\n  this._emitRowEvents = false;\n  this.on('newListener', function(event) {\n    if(event === 'row') this._emitRowEvents = true;\n  }.bind(this));\n};\n\nutil.inherits(NativeQuery, EventEmitter);\n\nNativeQuery.prototype.then = function(callback) {\n  return this.promise().then(callback);\n};\n\nNativeQuery.prototype.catch = function(callback) {\n  return this.promise().catch(callback);\n};\n\nNativeQuery.prototype.promise = function() {\n  if (this._promise) return this._promise;\n  this._promise = new Promise(function(resolve, reject) {\n    this.once('end', resolve);\n    this.once('error', reject);\n  }.bind(this));\n  return this._promise;\n};\n\nNativeQuery.prototype.handleError = function(err) {\n  var self = this;\n  //copy pq error fields into the error object\n  var fields = self.native.pq.resultErrorFields();\n  if(fields) {\n    for(var key in fields) {\n      err[key] = fields[key];\n    }\n  }\n  if(self.callback) {\n    self.callback(err);\n  } else {\n    self.emit('error', err);\n  }\n  self.state = 'error';\n};\n\nNativeQuery.prototype.submit = function(client) {\n  this.state = 'running';\n  var self = this;\n  client.native.arrayMode = this._arrayMode;\n\n  var after = function(err, rows) {\n    client.native.arrayMode = false;\n    setImmediate(function() {\n      self.emit('_done');\n    });\n\n    //handle possible query error\n    if(err) {\n      return self.handleError(err);\n    }\n\n    var result = new NativeResult();\n    result.addCommandComplete(self.native.pq);\n    result.rows = rows;\n\n    //emit row events for each row in the result\n    if(self._emitRowEvents) {\n      rows.forEach(function(row) {\n        self.emit('row', row, result);\n      });\n    }\n\n\n    //handle successful result\n    self.state = 'end';\n    self.emit('end', result);\n    if(self.callback) {\n      self.callback(null, result);\n    }\n  };\n\n  if(process.domain) {\n    after = process.domain.bind(after);\n  }\n\n  //named query\n  if(this.name) {\n    if (this.name.length > 63) {\n      console.error('Warning! Postgres only supports 63 characters for query names.');\n      console.error('You supplied', this.name, '(', this.name.length, ')');\n      console.error('This can cause conflicts and silent errors executing queries');\n    }\n    var values = (this.values||[]).map(utils.prepareValue);\n\n    //check if the client has already executed this named query\n    //if so...just execute it again - skip the planning phase\n    if(client.namedQueries[this.name]) {\n      return this.native.execute(this.name, values, after);\n    }\n    //plan the named query the first time, then execute it\n    return this.native.prepare(this.name, this.text, values.length, function(err) {\n      if(err) return after(err);\n      client.namedQueries[self.name] = true;\n      return self.native.execute(self.name, values, after);\n    });\n  }\n  else if(this.values) {\n    var vals = this.values.map(utils.prepareValue);\n    this.native.query(this.text, vals, after);\n  } else {\n    this.native.query(this.text, after);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/native/query.js\n// module id = 128\n// module chunks = 0","var NativeResult = module.exports = function(pq) {\n  this.command = null;\n  this.rowCount = 0;\n  this.rows = null;\n  this.fields = null;\n};\n\nNativeResult.prototype.addCommandComplete = function(pq) {\n  this.command = pq.cmdStatus().split(' ')[0];\n  this.rowCount = parseInt(pq.cmdTuples(), 10);\n  var nfields = pq.nfields();\n  if(nfields < 1) return;\n\n  this.fields = [];\n  for(var i = 0; i < nfields; i++) {\n    this.fields.push({\n      name: pq.fname(i),\n      dataTypeID: pq.ftype(i)\n    });\n  }\n};\n\nNativeResult.prototype.addRow = function(row) {\n  // This is empty to ensure pg code doesn't break when switching to pg-native\n  // pg-native loads all rows into the final result object by default.\n  // This is because libpg loads all rows into memory before passing the result\n  // to pg-native.\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/native/result.js\n// module id = 129\n// module chunks = 0","var EventEmitter = require('events').EventEmitter;\n\nvar defaults = require('./defaults');\nvar genericPool = require('generic-pool');\n\n\nmodule.exports = function(Client) {\n  var pools = {\n    Client: Client,\n    //dictionary of all key:pool pairs\n    all: {},\n    //reference to the client constructor - can override in tests or for require('pg').native\n    getOrCreate: function(clientConfig) {\n      clientConfig = clientConfig || {};\n      var name = JSON.stringify(clientConfig);\n      var pool = pools.all[name];\n      if(pool) {\n        return pool;\n      }\n      pool = genericPool.Pool({\n        name: name,\n        max: clientConfig.poolSize || defaults.poolSize,\n        idleTimeoutMillis: clientConfig.poolIdleTimeout || defaults.poolIdleTimeout,\n        reapIntervalMillis: clientConfig.reapIntervalMillis || defaults.reapIntervalMillis,\n        returnToHead: clientConfig.returnToHead || defaults.returnToHead,\n        log: clientConfig.poolLog || defaults.poolLog,\n        create: function(cb) {\n          var client = new pools.Client(clientConfig);\n          // Ignore errors on pooled clients until they are connected.\n          client.on('error', Function.prototype);\n          client.connect(function(err) {\n            if(err) return cb(err, null);\n\n            // Remove the noop error handler after a connection has been established.\n            client.removeListener('error', Function.prototype);\n\n            //handle connected client background errors by emitting event\n            //via the pg object and then removing errored client from the pool\n            client.on('error', function(e) {\n              pool.emit('error', e, client);\n\n              // If the client is already being destroyed, the error\n              // occurred during stream ending. Do not attempt to destroy\n              // the client again.\n              if (!client._destroying) {\n                pool.destroy(client);\n              }\n            });\n\n            // Remove connection from pool on disconnect\n            client.on('end', function(e) {\n              // Do not enter infinite loop between pool.destroy\n              // and client 'end' event...\n              if ( ! client._destroying ) {\n                pool.destroy(client);\n              }\n            });\n            client.poolCount = 0;\n            return cb(null, client);\n          });\n        },\n        destroy: function(client) {\n          client._destroying = true;\n          client.poolCount = undefined;\n          client.end();\n        }\n      });\n      pools.all[name] = pool;\n      //mixin EventEmitter to pool\n      EventEmitter.call(pool);\n      for(var key in EventEmitter.prototype) {\n        if(EventEmitter.prototype.hasOwnProperty(key)) {\n          pool[key] = EventEmitter.prototype[key];\n        }\n      }\n      //monkey-patch with connect method\n      pool.connect = function(cb) {\n        var domain = process.domain;\n        pool.acquire(function(err, client) {\n          if(domain) {\n            cb = domain.bind(cb);\n          }\n          if(err)  return cb(err, null, function() {/*NOOP*/});\n          client.poolCount++;\n          cb(null, client, function(err) {\n            if(err) {\n              pool.destroy(client);\n            } else {\n              pool.release(client);\n            }\n          });\n        });\n      };\n      return pool;\n    }\n  };\n\n  return pools;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/pool.js\n// module id = 130\n// module chunks = 0","var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nvar Result = require('./result');\nvar utils = require('./utils');\n\nvar Query = function(config, values, callback) {\n  // use of \"new\" optional\n  if(!(this instanceof Query)) { return new Query(config, values, callback); }\n\n  config = utils.normalizeQueryConfig(config, values, callback);\n\n  this.text = config.text;\n  this.values = config.values;\n  this.rows = config.rows;\n  this.types = config.types;\n  this.name = config.name;\n  this.binary = config.binary;\n  this.stream = config.stream;\n  //use unique portal name each time\n  this.portal = config.portal || \"\";\n  this.callback = config.callback;\n  if(process.domain && config.callback) {\n    this.callback = process.domain.bind(config.callback);\n  }\n  this._result = new Result(config.rowMode, config.types);\n  this.isPreparedStatement = false;\n  this._canceledDueToError = false;\n  this._promise = null;\n  EventEmitter.call(this);\n};\n\nutil.inherits(Query, EventEmitter);\n\nQuery.prototype.then = function(callback) {\n  return this.promise().then(callback);\n};\n\nQuery.prototype.catch = function(callback) {\n  return this.promise().catch(callback);\n};\n\nQuery.prototype.promise = function() {\n  if (this._promise) return this._promise;\n  this._promise = new Promise(function(resolve, reject) {\n    this.once('end', resolve);\n    this.once('error', reject);\n  }.bind(this));\n  return this._promise;\n};\n\nQuery.prototype.requiresPreparation = function() {\n  //named queries must always be prepared\n  if(this.name) { return true; }\n  //always prepare if there are max number of rows expected per\n  //portal execution\n  if(this.rows) { return true; }\n  //don't prepare empty text queries\n  if(!this.text) { return false; }\n  //binary should be prepared to specify results should be in binary\n  //unless there are no parameters\n  if(this.binary && !this.values) { return false; }\n  //prepare if there are values\n  return (this.values || 0).length > 0;\n};\n\n\n//associates row metadata from the supplied\n//message with this query object\n//metadata used when parsing row results\nQuery.prototype.handleRowDescription = function(msg) {\n  this._result.addFields(msg.fields);\n  this._accumulateRows = this.callback || !this.listeners('row').length;\n};\n\nQuery.prototype.handleDataRow = function(msg) {\n  var row = this._result.parseRow(msg.fields);\n  this.emit('row', row, this._result);\n  if (this._accumulateRows) {\n    this._result.addRow(row);\n  }\n};\n\nQuery.prototype.handleCommandComplete = function(msg, con) {\n  this._result.addCommandComplete(msg);\n  //need to sync after each command complete of a prepared statement\n  if(this.isPreparedStatement) {\n    con.sync();\n  }\n};\n\n//if a named prepared statement is created with empty query text\n//the backend will send an emptyQuery message but *not* a command complete message\n//execution on the connection will hang until the backend receives a sync message\nQuery.prototype.handleEmptyQuery = function(con) {\n  if (this.isPreparedStatement) {\n    con.sync();\n  }\n};\n\nQuery.prototype.handleReadyForQuery = function() {\n  if(this._canceledDueToError) {\n    return this.handleError(this._canceledDueToError);\n  }\n  if(this.callback) {\n    this.callback(null, this._result);\n  }\n  this.emit('end', this._result);\n};\n\nQuery.prototype.handleError = function(err, connection) {\n  //need to sync after error during a prepared statement\n  if(this.isPreparedStatement) {\n    connection.sync();\n  }\n  if(this._canceledDueToError) {\n    err = this._canceledDueToError;\n    this._canceledDueToError = false;\n  }\n  //if callback supplied do not emit error event as uncaught error\n  //events will bubble up to node process\n  if(this.callback) {\n    return this.callback(err);\n  }\n  this.emit('error', err);\n};\n\nQuery.prototype.submit = function(connection) {\n  if(this.requiresPreparation()) {\n    this.prepare(connection);\n  } else {\n    connection.query(this.text);\n  }\n};\n\nQuery.prototype.hasBeenParsed = function(connection) {\n  return this.name && connection.parsedStatements[this.name];\n};\n\nQuery.prototype.handlePortalSuspended = function(connection) {\n  this._getRows(connection, this.rows);\n};\n\nQuery.prototype._getRows = function(connection, rows) {\n  connection.execute({\n    portal: this.portalName,\n    rows: rows\n  }, true);\n  connection.flush();\n};\n\nQuery.prototype.prepare = function(connection) {\n  var self = this;\n  //prepared statements need sync to be called after each command\n  //complete or when an error is encountered\n  this.isPreparedStatement = true;\n  //TODO refactor this poor encapsulation\n  if(!this.hasBeenParsed(connection)) {\n    connection.parse({\n      text: self.text,\n      name: self.name,\n      types: self.types\n    }, true);\n  }\n\n  if(self.values) {\n    self.values = self.values.map(utils.prepareValue);\n  }\n\n  //http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  connection.bind({\n    portal: self.portalName,\n    statement: self.name,\n    values: self.values,\n    binary: self.binary\n  }, true);\n\n  connection.describe({\n    type: 'P',\n    name: self.portalName || \"\"\n  }, true);\n\n  this._getRows(connection, this.rows);\n};\n\nQuery.prototype.handleCopyInResponse = function (connection) {\n  if(this.stream) this.stream.startStreamingToConnection(connection);\n  else connection.sendCopyFail('No source stream defined');\n};\n\nQuery.prototype.handleCopyData = function (msg, connection) {\n  var chunk = msg.chunk;\n  if(this.stream) {\n    this.stream.handleChunk(chunk);\n  }\n  //if there are no stream (for example when copy to query was sent by\n  //query method instead of copyTo) error will be handled\n  //on copyOutResponse event, so silently ignore this error here\n};\nmodule.exports = Query;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/query.js\n// module id = 131\n// module chunks = 0","var types = require('pg-types');\n\n//result object returned from query\n//in the 'end' event and also\n//passed as second argument to provided callback\nvar Result = function(rowMode) {\n  this.command = null;\n  this.rowCount = null;\n  this.oid = null;\n  this.rows = [];\n  this.fields = [];\n  this._parsers = [];\n  this.RowCtor = null;\n  this.rowAsArray = rowMode == \"array\";\n  if(this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray;\n  }\n};\n\nvar matchRegexp = /([A-Za-z]+) ?(\\d+ )?(\\d+)?/;\n\n//adds a command complete message\nResult.prototype.addCommandComplete = function(msg) {\n  var match;\n  if(msg.text) {\n    //pure javascript\n    match = matchRegexp.exec(msg.text);\n  } else {\n    //native bindings\n    match = matchRegexp.exec(msg.command);\n  }\n  if(match) {\n    this.command = match[1];\n    //match 3 will only be existing on insert commands\n    if(match[3]) {\n      //msg.value is from native bindings\n      this.rowCount = parseInt(match[3] || msg.value, 10);\n      this.oid = parseInt(match[2], 10);\n    } else {\n      this.rowCount = parseInt(match[2], 10);\n    }\n  }\n};\n\nResult.prototype._parseRowAsArray = function(rowData) {\n  var row = [];\n  for(var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n    if(rawValue !== null) {\n      row.push(this._parsers[i](rawValue));\n    } else {\n      row.push(null);\n    }\n  }\n  return row;\n};\n\n//rowData is an array of text or binary values\n//this turns the row into a JavaScript object\nResult.prototype.parseRow = function(rowData) {\n  return new this.RowCtor(this._parsers, rowData);\n};\n\nResult.prototype.addRow = function(row) {\n  this.rows.push(row);\n};\n\nvar inlineParser = function(fieldName, i) {\n  return \"\\nthis['\" +\n    //fields containing single quotes will break\n    //the evaluated javascript unless they are escaped\n    //see https://github.com/brianc/node-postgres/issues/507\n    //Addendum: However, we need to make sure to replace all\n    //occurences of apostrophes, not just the first one.\n    //See https://github.com/brianc/node-postgres/issues/934\n    fieldName.replace(/'/g, \"\\\\'\") +\n    \"'] = \" +\n    \"rowData[\" + i + \"] == null ? null : parsers[\" + i + \"](rowData[\" + i + \"]);\";\n};\n\nResult.prototype.addFields = function(fieldDescriptions) {\n  //clears field definitions\n  //multiple query statements in 1 action can result in multiple sets\n  //of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  //you need to reset the fields\n  if(this.fields.length) {\n    this.fields = [];\n    this._parsers = [];\n  }\n  var ctorBody = \"\";\n  for(var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i];\n    this.fields.push(desc);\n    var parser = this._getTypeParser(desc.dataTypeID, desc.format || 'text');\n    this._parsers.push(parser);\n    //this is some craziness to compile the row result parsing\n    //results in ~60% speedup on large query result sets\n    ctorBody += inlineParser(desc.name, i);\n  }\n  if(!this.rowAsArray) {\n    this.RowCtor = Function(\"parsers\", \"rowData\", ctorBody);\n  }\n};\n\nResult.prototype._getTypeParser = types.getTypeParser;\n\nmodule.exports = Result;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/lib/result.js\n// module id = 132\n// module chunks = 0","module.exports = {\n\t\"_args\": [\n\t\t[\n\t\t\t{\n\t\t\t\t\"raw\": \"pg@5.1\",\n\t\t\t\t\"scope\": null,\n\t\t\t\t\"escapedName\": \"pg\",\n\t\t\t\t\"name\": \"pg\",\n\t\t\t\t\"rawSpec\": \"5.1\",\n\t\t\t\t\"spec\": \">=5.1.0 <5.2.0\",\n\t\t\t\t\"type\": \"range\"\n\t\t\t},\n\t\t\t\"/home/neil/DevGit/zf2dbmodelgen/modgen/node_modules/pg-promise\"\n\t\t]\n\t],\n\t\"_from\": \"pg@>=5.1.0 <5.2.0\",\n\t\"_id\": \"pg@5.1.0\",\n\t\"_inCache\": true,\n\t\"_location\": \"/pg-promise/pg\",\n\t\"_nodeVersion\": \"6.1.0\",\n\t\"_npmOperationalInternal\": {\n\t\t\"host\": \"packages-16-east.internal.npmjs.com\",\n\t\t\"tmp\": \"tmp/pg-5.1.0.tgz_1465597295940_0.7661049372982234\"\n\t},\n\t\"_npmUser\": {\n\t\t\"name\": \"brianc\",\n\t\t\"email\": \"brian.m.carlson@gmail.com\"\n\t},\n\t\"_npmVersion\": \"3.8.6\",\n\t\"_phantomChildren\": {},\n\t\"_requested\": {\n\t\t\"raw\": \"pg@5.1\",\n\t\t\"scope\": null,\n\t\t\"escapedName\": \"pg\",\n\t\t\"name\": \"pg\",\n\t\t\"rawSpec\": \"5.1\",\n\t\t\"spec\": \">=5.1.0 <5.2.0\",\n\t\t\"type\": \"range\"\n\t},\n\t\"_requiredBy\": [\n\t\t\"/pg-promise\"\n\t],\n\t\"_resolved\": \"https://registry.npmjs.org/pg/-/pg-5.1.0.tgz\",\n\t\"_shasum\": \"073b9b36763ad8a5478dbb85effef45e739ba9d8\",\n\t\"_shrinkwrap\": null,\n\t\"_spec\": \"pg@5.1\",\n\t\"_where\": \"/home/neil/DevGit/zf2dbmodelgen/modgen/node_modules/pg-promise\",\n\t\"author\": {\n\t\t\"name\": \"Brian Carlson\",\n\t\t\"email\": \"brian.m.carlson@gmail.com\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/brianc/node-postgres/issues\"\n\t},\n\t\"dependencies\": {\n\t\t\"buffer-writer\": \"1.0.1\",\n\t\t\"generic-pool\": \"2.4.2\",\n\t\t\"packet-reader\": \"0.2.0\",\n\t\t\"pg-connection-string\": \"0.1.3\",\n\t\t\"pg-types\": \"1.*\",\n\t\t\"pgpass\": \"0.0.6\",\n\t\t\"semver\": \"4.3.2\"\n\t},\n\t\"description\": \"PostgreSQL client - pure javascript & libpq with the same API\",\n\t\"devDependencies\": {\n\t\t\"async\": \"0.9.0\",\n\t\t\"jshint\": \"2.5.2\",\n\t\t\"pg-copy-streams\": \"0.3.0\"\n\t},\n\t\"directories\": {},\n\t\"dist\": {\n\t\t\"shasum\": \"073b9b36763ad8a5478dbb85effef45e739ba9d8\",\n\t\t\"tarball\": \"https://registry.npmjs.org/pg/-/pg-5.1.0.tgz\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">= 0.8.0\"\n\t},\n\t\"gitHead\": \"d1c5fc694be8dfab19b844e149141d4785ad7152\",\n\t\"homepage\": \"http://github.com/brianc/node-postgres\",\n\t\"keywords\": [\n\t\t\"postgres\",\n\t\t\"pg\",\n\t\t\"libpq\",\n\t\t\"postgre\",\n\t\t\"database\",\n\t\t\"rdbms\"\n\t],\n\t\"license\": \"MIT\",\n\t\"main\": \"./lib\",\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"brianc\",\n\t\t\t\"email\": \"brian.m.carlson@gmail.com\"\n\t\t}\n\t],\n\t\"minNativeVersion\": \"1.7.0\",\n\t\"name\": \"pg\",\n\t\"optionalDependencies\": {},\n\t\"readme\": \"ERROR: No README data found!\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git://github.com/brianc/node-postgres.git\"\n\t},\n\t\"scripts\": {\n\t\t\"changelog\": \"npm i github-changes && ./node_modules/.bin/github-changes -o brianc -r node-postgres -d pulls -a -v\",\n\t\t\"test\": \"make test-all connectionString=postgres://postgres@localhost:5432/postgres\"\n\t},\n\t\"version\": \"5.1.0\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pg/package.json\n// module id = 133\n// module chunks = 0","'use strict';\n\nvar path = require('path')\n  , Stream = require('stream').Stream\n  , Split = require('split')\n  , util = require('util')\n  , defaultPort = 5432\n  , isWin = (process.platform === 'win32')\n  , warnStream = process.stderr\n;\n\n\nvar S_IRWXG = 56     //    00070(8)\n  , S_IRWXO = 7      //    00007(8)\n  , S_IFMT  = 61440  // 00170000(8)\n  , S_IFREG = 32768  //  0100000(8)\n;\nfunction isRegFile(mode) {\n    return ((mode & S_IFMT) == S_IFREG);\n}\n\nvar fieldNames = [ 'host', 'port', 'database', 'user', 'password' ];\nvar nrOfFields = fieldNames.length;\nvar passKey = fieldNames[ nrOfFields -1 ];\n\n\nfunction warn() {\n    var isWritable = (\n        warnStream instanceof Stream &&\n          true === warnStream.writable\n    );\n\n    if (isWritable) {\n        var args = Array.prototype.slice.call(arguments).concat(\"\\n\");\n        warnStream.write( util.format.apply(util, args) );\n    }\n}\n\n\nObject.defineProperty(module.exports, 'isWin', {\n    get : function() {\n        return isWin;\n    } ,\n    set : function(val) {\n        isWin = val;\n    }\n});\n\n\nmodule.exports.warnTo = function(stream) {\n    var old = warnStream;\n    warnStream = stream;\n    return old;\n};\n\nmodule.exports.getFileName = function(env){\n    env = env || process.env;\n    var file = env.PGPASSFILE || (\n        isWin ?\n          path.join( env.APPDATA , 'postgresql', 'pgpass.conf' ) :\n          path.join( env.HOME, '.pgpass' )\n    );\n    return file;\n};\n\nmodule.exports.usePgPass = function(stats, fname) {\n    if (Object.prototype.hasOwnProperty.call(process.env, 'PGPASSWORD')) {\n        return false;\n    }\n\n    if (isWin) {\n        return true;\n    }\n\n    fname = fname || '<unkn>';\n\n    if (! isRegFile(stats.mode)) {\n        warn('WARNING: password file \"%s\" is not a plain file', fname);\n        return false;\n    }\n\n    if (stats.mode & (S_IRWXG | S_IRWXO)) {\n        /* If password file is insecure, alert the user and ignore it. */\n        warn('WARNING: password file \"%s\" has group or world access; permissions should be u=rw (0600) or less', fname);\n        return false;\n    }\n\n    return true;\n};\n\n\nvar matcher = module.exports.match = function(connInfo, entry) {\n    return fieldNames.slice(0, -1).reduce(function(prev, field, idx){\n        if (idx == 1) {\n            // the port\n            if ( Number( connInfo[field] || defaultPort ) === Number( entry[field] ) ) {\n                return prev && true;\n            }\n        }\n        return prev && (\n            entry[field] === '*' ||\n              entry[field] === connInfo[field]\n        );\n    }, true);\n};\n\n\nmodule.exports.getPassword = function(connInfo, stream, cb) {\n    var pass;\n    var lineStream = stream.pipe(new Split());\n\n    function onLine(line) {\n        var entry = parseLine(line);\n        if (entry && isValidEntry(entry) && matcher(connInfo, entry)) {\n            pass = entry[passKey];\n            lineStream.end(); // -> calls onEnd(), but pass is set now\n        }\n    }\n\n    var onEnd = function() {\n        cb(pass);\n    };\n\n    var onErr = function(err) {\n        warn('WARNING: error on reading file: %s', err);\n        cb(undefined);\n    };\n\n    stream.on('error', onErr);\n    lineStream\n        .on('data', onLine)\n        .on('end', onEnd)\n        .on('error', onErr)\n    ;\n\n};\n\n\nvar parseLine = module.exports.parseLine = function(line) {\n    if (line.length < 11 || line.match(/^\\s+#/)) {\n        return null;\n    }\n\n    var curChar = '';\n    var prevChar = '';\n    var fieldIdx = 0;\n    var startIdx = 0;\n    var endIdx = 0;\n    var obj = {};\n    var isLastField = false;\n    var addToObj = function(idx, i0, i1) {\n        var field = line.substring(i0, i1);\n\n        if (! Object.hasOwnProperty.call(process.env, 'PGPASS_NO_DEESCAPE')) {\n            field = field.replace(/\\\\([:\\\\])/g, '$1');\n        }\n\n        obj[ fieldNames[idx] ] = field;\n    };\n\n    for (var i = 0 ; i < line.length-1 ; i += 1) {\n        curChar = line.charAt(i+1);\n        prevChar = line.charAt(i);\n\n        isLastField = (fieldIdx == nrOfFields-1);\n\n        if (isLastField) {\n            addToObj(fieldIdx, startIdx);\n            break;\n        }\n\n        if (i >= 0 && curChar == ':' && prevChar !== '\\\\') {\n            addToObj(fieldIdx, startIdx, i+1);\n\n            startIdx = i+2;\n            fieldIdx += 1;\n        }\n    }\n\n    obj = ( Object.keys(obj).length === nrOfFields ) ? obj : null;\n\n    return obj;\n};\n\n\nvar isValidEntry = module.exports.isValidEntry = function(entry){\n    var rules = {\n        // host\n        0 : function(x){\n            return x.length > 0;\n        } ,\n        // port\n        1 : function(x){\n            if (x === '*') {\n                return true;\n            }\n            x = Number(x);\n            return (\n                isFinite(x) &&\n                  x > 0 &&\n                  x < 9007199254740992 &&\n                  Math.floor(x) === x\n            );\n        } ,\n        // database\n        2 : function(x){\n            return x.length > 0;\n        } ,\n        // username\n        3 : function(x){\n            return x.length > 0;\n        } ,\n        // password\n        4 : function(x){\n            return x.length > 0;\n        }\n    };\n\n    for (var idx = 0 ; idx < fieldNames.length ; idx += 1) {\n        var rule = rules[idx];\n        var value = entry[ fieldNames[idx] ] || '';\n\n        var res = rule(value);\n        if (!res) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pgpass/lib/helper.js\n// module id = 134\n// module chunks = 0","'use strict';\n\nvar path = require('path')\n  , fs = require('fs')\n  , helper = require('./helper.js')\n;\n\n\nmodule.exports.warnTo = helper.warnTo;\n\nmodule.exports = function(connInfo, cb) {\n    var file = helper.getFileName();\n    \n    fs.stat(file, function(err, stat){\n        if (err || !helper.usePgPass(stat, file)) {\n            return cb(undefined);\n        }\n\n        var st = fs.createReadStream(file);\n\n        helper.getPassword(connInfo, st, cb);\n    });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pg-promise/~/pgpass/lib/index.js\n// module id = 135\n// module chunks = 0","'use strict';\r\n\r\n/**\r\n * @class PromiseAdapter\r\n * @description\r\n * Adapter for the primary promise operations.\r\n * \r\n * Provides compatibility with promise libraries that cannot be recognized automatically,\r\n * via functions that implement the primary operations with promises:\r\n *\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * #### Example\r\n *\r\n * Below is an example of setting up a [client-side]{@tutorial client} adapter for AngularJS $q.\r\n *\r\n * ```js\r\n * var spexLib = require('spex'); // or include client-side spex.js\r\n *\r\n * var adapter = new spexLib.PromiseAdapter(\r\n *    function (cb) {\r\n *        return $q(cb); // creating a new promise;\r\n *    }, function (data) {\r\n *        return $q.when(data); // resolving a promise;\r\n *    }, function (reason) {\r\n *        return $q.reject(reason); // rejecting a promise;\r\n *    });\r\n *\r\n * var spex = spexLib(adapter);\r\n * ```\r\n * Please note that AngularJS 1.4.1 or later no longer requires a promise adapter.\r\n *\r\n * @param {Function} create\r\n * A function that takes a callback parameter and returns a new promise object.\r\n * The callback parameter is expected to be `function(resolve, reject)`.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to create a promise.`\r\n *\r\n * @param {Function} resolve\r\n * A function that takes an optional data parameter and resolves a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to resolve a promise.`\r\n *\r\n * @param {Function} reject\r\n * A function that takes an optional error parameter and rejects a promise with it.\r\n *\r\n * Passing in anything other than a function will throw `Adapter requires a function to reject a promise.`\r\n *\r\n * @see {@tutorial client}\r\n * \r\n * @returns {PromiseAdapter}\r\n */\r\nfunction PromiseAdapter(create, resolve, reject) {\r\n\r\n    if (!(this instanceof PromiseAdapter)) {\r\n        return new PromiseAdapter(create, resolve, reject);\r\n    }\r\n\r\n    this.create = create;\r\n    this.resolve = resolve;\r\n    this.reject = reject;\r\n\r\n    if (typeof create !== 'function') {\r\n        throw new TypeError('Adapter requires a function to create a promise.');\r\n    }\r\n\r\n    if (typeof resolve !== 'function') {\r\n        throw new TypeError('Adapter requires a function to resolve a promise.');\r\n    }\r\n\r\n    if (typeof reject !== 'function') {\r\n        throw new TypeError('Adapter requires a function to reject a promise.');\r\n    }\r\n}\r\n\r\nmodule.exports = PromiseAdapter;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/adapter.js\n// module id = 136\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    BatchError: require('./batch'),\r\n    PageError: require('./page'),\r\n    SequenceError: require('./sequence')\r\n};\r\n\r\n/**\r\n * @namespace errors\r\n * @description\r\n * Namespace for all custom error types supported by the library.\r\n *\r\n * In addition to the custom error type used by each method (regular error), they can also reject with\r\n * {@link external:TypeError TypeError} when receiving invalid input parameters.\r\n *\r\n * @property {function} BatchError\r\n * {@link errors.BatchError BatchError} interface.\r\n *\r\n * Represents regular errors that can be reported by method {@link batch}.\r\n *\r\n * @property {function} PageError\r\n * {@link errors.PageError PageError} interface.\r\n *\r\n * Represents regular errors that can be reported by method {@link page}.\r\n *\r\n * @property {function} SequenceError\r\n * {@link errors.SequenceError SequenceError} interface.\r\n *\r\n * Represents regular errors that can be reported by method {@link sequence}.\r\n *\r\n */\r\nmodule.exports = {\r\n    BatchError: $npm.BatchError,\r\n    PageError: $npm.PageError,\r\n    SequenceError: $npm.SequenceError\r\n};\r\n\r\nObject.freeze(module.exports);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/errors/index.js\n// module id = 137\n// module chunks = 0","'use strict';\r\n\r\nvar BatchError = require('../errors/batch');\r\n\r\n/**\r\n * @method batch\r\n * @description\r\n * **Alternative Syntax:**\r\n * `batch(values, {cb})` &#8658; `Promise`\r\n *\r\n * Settles (resolves or rejects) every [mixed value]{@tutorial mixed} in the input array.\r\n *\r\n * The method resolves with an array of results, the same as the standard $[promise.all],\r\n * while providing comprehensive error details in case of a reject, in the form of\r\n * type {@link errors.BatchError BatchError}.\r\n *\r\n * @param {Array} values\r\n * Array of [mixed values]{@tutorial mixed} (it can be empty), to be resolved asynchronously, in no particular order.\r\n *\r\n * Passing in anything other than an array will reject with {@link external:TypeError TypeError} =\r\n * `Method 'batch' requires an array of values.`\r\n *\r\n * @param {Function|generator} [cb]\r\n * Optional callback (or generator) to receive the result for each settled value.\r\n *\r\n * Callback Parameters:\r\n *  - `index` = index of the value in the source array\r\n *  - `success` - indicates whether the value was resolved (`true`), or rejected (`false`)\r\n *  - `result` = resolved data, if `success`=`true`, or else the rejection reason\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise to indicate that notifications are handled asynchronously.\r\n * And if the returned promise resolves, it signals a successful handling, while any resolved\r\n * data is ignored.\r\n *\r\n * If the function returns a rejected promise or throws an error, the entire method rejects\r\n * with {@link errors.BatchError BatchError} where the corresponding value in property `data`\r\n * is set to `{success, result, origin}`:\r\n *  - `success` = `false`\r\n *  - `result` = the rejection reason or the error thrown by the notification callback\r\n *  - `origin` = the original data passed into the callback as object `{success, result}`\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * The method resolves with an array of individual resolved results, the same as the standard $[promise.all].\r\n * In addition, the array is extended with a hidden read-only property `duration` - number of milliseconds\r\n * spent resolving all the data.\r\n *\r\n * The method rejects with {@link errors.BatchError BatchError} when any of the following occurs:\r\n *  - one or more values rejected or threw an error while being resolved as a [mixed value]{@tutorial mixed}\r\n *  - notification callback `cb` returned a rejected promise or threw an error\r\n *\r\n */\r\nfunction batch(values, cb, config) {\r\n\r\n    var $p = config.promise, $utils = config.utils;\r\n\r\n    if (!Array.isArray(values)) {\r\n        return $p.reject(new TypeError(\"Method 'batch' requires an array of values.\"));\r\n    }\r\n\r\n    if (!values.length) {\r\n        var empty = [];\r\n        $utils.extend(empty, 'duration', 0);\r\n        return $p.resolve(empty);\r\n    }\r\n\r\n    cb = $utils.wrap(cb);\r\n    var self = this, start = Date.now();\r\n    return $p(function (resolve, reject) {\r\n        var cbTime, errors = [], remaining = values.length,\r\n            result = new Array(remaining);\r\n        values.forEach(function (item, i) {\r\n            $utils.resolve.call(self, item, null, function (data) {\r\n                result[i] = data;\r\n                step(i, true, data);\r\n            }, function (reason) {\r\n                result[i] = {success: false, result: reason};\r\n                errors.push(i);\r\n                step(i, false, reason);\r\n            });\r\n        });\r\n        function step(idx, pass, data) {\r\n            if (cb) {\r\n                var cbResult, cbNow = Date.now(),\r\n                    cbDelay = idx ? (cbNow - cbTime) : undefined;\r\n                cbTime = cbNow;\r\n                try {\r\n                    cbResult = cb.call(self, idx, pass, data, cbDelay);\r\n                } catch (e) {\r\n                    setError(e);\r\n                }\r\n                if ($utils.isPromise(cbResult)) {\r\n                    cbResult\r\n                        .then(check)\r\n                        .catch(function (error) {\r\n                            setError(error);\r\n                            check();\r\n                        });\r\n                } else {\r\n                    check();\r\n                }\r\n            } else {\r\n                check();\r\n            }\r\n\r\n            function setError(e) {\r\n                var r = pass ? {success: false} : result[idx];\r\n                if (pass) {\r\n                    result[idx] = r;\r\n                    errors.push(idx);\r\n                }\r\n                r.result = e;\r\n                r.origin = {success: pass, result: data}\r\n            }\r\n\r\n            function check() {\r\n                if (!--remaining) {\r\n                    if (errors.length) {\r\n                        errors.sort();\r\n                        if (errors.length < result.length) {\r\n                            for (var i = 0, k = 0; i < result.length; i++) {\r\n                                if (i === errors[k]) {\r\n                                    k++;\r\n                                } else {\r\n                                    result[i] = {success: true, result: result[i]};\r\n                                }\r\n                            }\r\n                        }\r\n                        reject(new BatchError(result, errors, Date.now() - start));\r\n                    } else {\r\n                        $utils.extend(result, 'duration', Date.now() - start);\r\n                        resolve(result);\r\n                    }\r\n                }\r\n                return null; // this dummy return is just to prevent Bluebird warnings;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (values, cb) {\r\n        if (cb && typeof cb === 'object') {\r\n            return batch.call(this, values, cb.cb, config);\r\n        } else {\r\n            return batch.call(this, values, cb, config);\r\n        }\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/ext/batch.js\n// module id = 138\n// module chunks = 0","'use strict';\r\n\r\nvar PageError = require('../errors/page');\r\n\r\n/**\r\n * @method page\r\n * @description\r\n * **Alternative Syntax:**\r\n * `page(source, {dest, limit})` &#8658; `Promise`\r\n *\r\n * Resolves a dynamic sequence of pages/arrays with [mixed values]{@tutorial mixed}.\r\n *\r\n * The method acquires pages (arrays of [mixed values]{@tutorial mixed}) from the `source` function, one by one,\r\n * and resolves each page as a {@link batch}, till no more pages left or an error/reject occurs.\r\n *\r\n * @param {Function|generator} source\r\n * Expected to return a [mixed value]{@tutorial mixed} that resolves with the next page of data (array of [mixed values]{@tutorial mixed}).\r\n * Returning or resolving with `undefined` ends the sequence, and the method resolves.\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * Parameters:\r\n *  - `index` = index of the page being requested\r\n *  - `data` = previously returned page, resolved as a {@link batch} (`undefined` when `index=0`)\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * If the function throws an error or returns a rejected promise, the method rejects with\r\n * {@link errors.PageError PageError}, which will have property `source` set.\r\n *\r\n * And if the function returns or resolves with anything other than an array or `undefined`,\r\n * the method rejects with the same {@link errors.PageError PageError}, but with `error` set to\r\n * `Unexpected data returned from the source.`\r\n *\r\n * Passing in anything other than a function will reject with {@link external:TypeError TypeError} = `Parameter 'source' must be a function.`\r\n *\r\n * @param {Function|generator} [dest]\r\n * Optional destination function (or generator), to receive a resolved {@link batch} of data\r\n * for each page, process it and respond as required.\r\n *\r\n * Parameters:\r\n *  - `index` = page index in the sequence\r\n *  - `data` = page data resolved as a {@link batch}\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise object, if notifications are handled asynchronously.\r\n * And if a promise is returned, the method will not request another page from the `source`\r\n * function until the promise has been resolved.\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.PageError PageError}, which will have property `dest` set.\r\n *\r\n * @param {Number} [limit=0]\r\n * Limits the maximum number of pages to be requested from the `source`. If the value is greater\r\n * than 0, the method will successfully resolve once the specified limit has been reached.\r\n *\r\n * When `limit` isn't specified (default), the sequence is unlimited, and it will continue\r\n * till one of the following occurs:\r\n *  - `source` returns or resolves with `undefined` or an invalid value (non-array)\r\n *  - either `source` or `dest` functions throw an error or return a rejected promise\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When successful, the method resolves with object `{pages, total, duration}`:\r\n *  - `pages` = number of pages resolved\r\n *  - `total` = the sum of all page sizes (total number of values resolved)\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When the method fails, it rejects with {@link errors.PageError PageError}.\r\n *\r\n */\r\nfunction page(source, dest, limit, config) {\r\n\r\n    var $p = config.promise, $spex = config.spex, $utils = config.utils;\r\n\r\n    if (typeof source !== 'function') {\r\n        return $p.reject(new TypeError(\"Parameter 'source' must be a function.\"));\r\n    }\r\n\r\n    limit = (limit > 0) ? parseInt(limit) : 0;\r\n    source = $utils.wrap(source);\r\n    dest = $utils.wrap(dest);\r\n\r\n    var self = this, request, srcTime, destTime, start = Date.now(), total = 0;\r\n\r\n    return $p(function (resolve, reject) {\r\n\r\n        function loop(idx) {\r\n            var srcNow = Date.now(),\r\n                srcDelay = idx ? (srcNow - srcTime) : undefined;\r\n            srcTime = srcNow;\r\n            $utils.resolve.call(self, source, [idx, request, srcDelay], function (value) {\r\n                if (value === undefined) {\r\n                    success();\r\n                } else {\r\n                    if (value instanceof Array) {\r\n                        $spex.batch(value)\r\n                            .then(function (data) {\r\n                                request = data;\r\n                                total += data.length;\r\n                                if (dest) {\r\n                                    var destResult, destNow = Date.now(),\r\n                                        destDelay = idx ? (destNow - destTime) : undefined;\r\n                                    destTime = destNow;\r\n                                    try {\r\n                                        destResult = dest.call(self, idx, data, destDelay);\r\n                                    } catch (err) {\r\n                                        fail({\r\n                                            error: err,\r\n                                            dest: data\r\n                                        }, 4, dest.name);\r\n                                        return;\r\n                                    }\r\n                                    if ($utils.isPromise(destResult)) {\r\n                                        destResult\r\n                                            .then(next)\r\n                                            .catch(function (error) {\r\n                                                fail({\r\n                                                    error: error,\r\n                                                    dest: data\r\n                                                }, 3, dest.name);\r\n                                            });\r\n                                    } else {\r\n                                        next();\r\n                                    }\r\n                                } else {\r\n                                    next();\r\n                                }\r\n                                return null; // this dummy return is just to prevent Bluebird warnings;\r\n                            })\r\n                            .catch(function (error) {\r\n                                fail({\r\n                                    error: error\r\n                                }, 0);\r\n                            });\r\n                    } else {\r\n                        fail({\r\n                            error: new Error(\"Unexpected data returned from the source.\"),\r\n                            source: request\r\n                        }, 5, source.name);\r\n                    }\r\n                }\r\n            }, function (reason, isRej) {\r\n                fail({\r\n                    error: reason,\r\n                    source: request\r\n                }, isRej ? 1 : 2, source.name);\r\n            });\r\n\r\n            function next() {\r\n                if (limit === ++idx) {\r\n                    success();\r\n                } else {\r\n                    loop(idx);\r\n                }\r\n                return null; // this dummy return is just to prevent Bluebird warnings;\r\n            }\r\n\r\n            function success() {\r\n                resolve({\r\n                    pages: idx,\r\n                    total: total,\r\n                    duration: Date.now() - start\r\n                });\r\n            }\r\n\r\n            function fail(reason, code, cbName) {\r\n                reason.index = idx;\r\n                reject(new PageError(reason, code, cbName, Date.now() - start));\r\n            }\r\n        }\r\n\r\n        loop(0);\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (source, dest, limit) {\r\n        if (dest && typeof dest === 'object') {\r\n            return page.call(this, source, dest.dest, dest.limit, config);\r\n        } else {\r\n            return page.call(this, source, dest, limit, config);\r\n        }\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/ext/page.js\n// module id = 139\n// module chunks = 0","'use strict';\r\n\r\nvar SequenceError = require('../errors/sequence');\r\n\r\n/**\r\n * @method sequence\r\n * @description\r\n * **Alternative Syntax:**\r\n * `sequence(source, {dest, limit, track})` &#8658; `Promise`\r\n *\r\n * Resolves a dynamic sequence of [mixed values]{@tutorial mixed}.\r\n *\r\n * The method acquires [mixed values]{@tutorial mixed} from the `source` function, one at a time, and resolves them,\r\n * till either no more values left in the sequence or an error/reject occurs.\r\n *\r\n * It supports both [linked and detached sequencing]{@tutorial sequencing}.\r\n *\r\n * @param {Function|generator} source\r\n * Expected to return the next [mixed value]{@tutorial mixed} to be resolved. Returning or resolving\r\n * with `undefined` ends the sequence, and the method resolves.\r\n *\r\n * Parameters:\r\n *  - `index` = current request index in the sequence\r\n *  - `data` = resolved data from the previous call (`undefined` when `index=0`)\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.SequenceError SequenceError}, which will have property `source` set.\r\n *\r\n * Passing in anything other than a function will reject with {@link external:TypeError TypeError} = `Parameter 'source' must be a function.`\r\n *\r\n * @param {Function|generator} [dest]\r\n * Optional destination function (or generator), to receive resolved data for each index,\r\n * process it and respond as required.\r\n *\r\n * Parameters:\r\n *  - `index` = index of the resolved data in the sequence\r\n *  - `data` = the data resolved\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function inherits `this` context from the calling method.\r\n *\r\n * It can optionally return a promise object, if data processing is done asynchronously.\r\n * If a promise is returned, the method will not request another value from the `source` function,\r\n * until the promise has been resolved (the resolved value is ignored).\r\n *\r\n * If the function throws an error or returns a rejected promise, the sequence terminates,\r\n * and the method rejects with {@link errors.SequenceError SequenceError}, which will have property `dest` set.\r\n *\r\n * @param {Number} [limit=0]\r\n * Limits the maximum size of the sequence. If the value is greater than 0, the method will\r\n * successfully resolve once the specified limit has been reached.\r\n *\r\n * When `limit` isn't specified (default), the sequence is unlimited, and it will continue\r\n * till one of the following occurs:\r\n *  - `source` either returns or resolves with `undefined`\r\n *  - either `source` or `dest` functions throw an error or return a rejected promise\r\n *\r\n * @param {Boolean} [track=false]\r\n * Changes the type of data to be resolved by this method. By default, it is `false`\r\n * (see the return result). When set to be `true`, the method tracks/collects all resolved data\r\n * into an array internally, and resolves with that array once the method has finished successfully.\r\n *\r\n * It must be used with caution, as to the size of the sequence, because accumulating data for\r\n * a very large sequence can result in consuming too much memory.\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When successful, the resolved data depends on parameter `track`. When `track` is `false`\r\n * (default), the method resolves with object `{total, duration}`:\r\n *  - `total` = number of values resolved by the sequence\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When `track` is `true`, the method resolves with an array of all the data that has been resolved,\r\n * the same way that the standard $[promise.all] resolves. In addition, the array comes extended with\r\n * a hidden read-only property `duration` - number of milliseconds consumed by the method.\r\n *\r\n * When the method fails, it rejects with {@link errors.SequenceError SequenceError}.\r\n */\r\nfunction sequence(source, dest, limit, track, config) {\r\n\r\n    var $p = config.promise, $utils = config.utils;\r\n\r\n    if (typeof source !== 'function') {\r\n        return $p.reject(new TypeError(\"Parameter 'source' must be a function.\"));\r\n    }\r\n\r\n    limit = (limit > 0) ? parseInt(limit) : 0;\r\n    source = $utils.wrap(source);\r\n    dest = $utils.wrap(dest);\r\n\r\n    var self = this, data, srcTime, destTime, result = [], start = Date.now();\r\n\r\n    return $p(function (resolve, reject) {\r\n\r\n        function loop(idx) {\r\n            var srcNow = Date.now(),\r\n                srcDelay = idx ? (srcNow - srcTime) : undefined;\r\n            srcTime = srcNow;\r\n            $utils.resolve.call(self, source, [idx, data, srcDelay], function (value, delayed) {\r\n                data = value;\r\n                if (data === undefined) {\r\n                    success();\r\n                } else {\r\n                    if (track) {\r\n                        result.push(data);\r\n                    }\r\n                    if (dest) {\r\n                        var destResult, destNow = Date.now(),\r\n                            destDelay = idx ? (destNow - destTime) : undefined;\r\n                        destTime = destNow;\r\n                        try {\r\n                            destResult = dest.call(self, idx, data, destDelay);\r\n                        } catch (e) {\r\n                            fail({\r\n                                error: e,\r\n                                dest: data\r\n                            }, 3, dest.name);\r\n                            return;\r\n                        }\r\n                        if ($utils.isPromise(destResult)) {\r\n                            destResult\r\n                                .then(function () {\r\n                                    next(true);\r\n                                    return null; // this dummy return is just to prevent Bluebird warnings;\r\n                                })\r\n                                .catch(function (error) {\r\n                                    fail({\r\n                                        error: error,\r\n                                        dest: data\r\n                                    }, 2, dest.name);\r\n                                });\r\n                        } else {\r\n                            next(delayed);\r\n                        }\r\n                    } else {\r\n                        next(delayed);\r\n                    }\r\n                }\r\n            }, function (reason, isRej) {\r\n                fail({\r\n                    error: reason,\r\n                    source: data\r\n                }, isRej ? 0 : 1, source.name);\r\n            });\r\n\r\n            function next(delayed) {\r\n                if (limit === ++idx) {\r\n                    success();\r\n                } else {\r\n                    if (delayed) {\r\n                        loop(idx);\r\n                    } else {\r\n                        $p.resolve()\r\n                            .then(function () {\r\n                                loop(idx);\r\n                                return null; // this dummy return is just to prevent Bluebird warnings;\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function success() {\r\n                var length = Date.now() - start;\r\n                if (track) {\r\n                    $utils.extend(result, 'duration', length);\r\n                } else {\r\n                    result = {\r\n                        total: idx,\r\n                        duration: length\r\n                    }\r\n                }\r\n                resolve(result);\r\n            }\r\n\r\n            function fail(reason, code, cbName) {\r\n                reason.index = idx;\r\n                reject(new SequenceError(reason, code, cbName, Date.now() - start));\r\n            }\r\n        }\r\n\r\n        loop(0);\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (source, dest, limit, track) {\r\n        if (dest && typeof dest === 'object') {\r\n            return sequence.call(this, source, dest.dest, dest.limit, dest.track, config);\r\n        } else {\r\n            return sequence.call(this, source, dest, limit, track, config);\r\n        }\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/ext/sequence.js\n// module id = 140\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    read: require('./read')\r\n};\r\n\r\n/**\r\n * @namespace stream\r\n * @description\r\n * Namespace with methods that implement stream operations, and {@link stream.read read} is the only method currently supported.\r\n *\r\n * **Synchronous Stream Processing**\r\n *\r\n * ```javascript\r\n * var stream = require('spex')(Promise).stream;\r\n * var fs = require('fs');\r\n *\r\n * var rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    console.log(\"RECEIVED:\", index, data, delay);\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n * .then(function (data) {\r\n *        console.log(\"DATA:\", data);\r\n *    })\r\n * .catch(function (error) {\r\n *        console.log(\"ERROR:\", error);\r\n *    });\r\n * ```\r\n *\r\n * **Asynchronous Stream Processing**\r\n *\r\n * ```javascript\r\n * var stream = require('spex')(Promise).stream;\r\n * var fs = require('fs');\r\n *\r\n * var rs = fs.createReadStream('values.txt');\r\n *\r\n * function receiver(index, data, delay) {\r\n *    return new Promise(function (resolve) {\r\n *        console.log(\"RECEIVED:\", index, data, delay);\r\n *        resolve();\r\n *    });\r\n * }\r\n *\r\n * stream.read(rs, receiver)\r\n * .then(function (data) {\r\n *        console.log(\"DATA:\", data);\r\n *    })\r\n * .catch(function (error) {\r\n *        console.log(\"ERROR:\", error);\r\n *    });\r\n * ```\r\n *\r\n * @property {function} stream.read\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n */\r\nmodule.exports = function (config) {\r\n    var res = {\r\n        read: $npm.read(config)\r\n    };\r\n    Object.freeze(res);\r\n    return res;\r\n};\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/ext/stream/index.js\n// module id = 141\n// module chunks = 0","'use strict';\r\n\r\n/**\r\n * @method stream.read\r\n * @description\r\n * **Alternative Syntax:**\r\n * `read(stream, receiver, {closable, readSize})` &#8658; `Promise`\r\n *\r\n * Consumes and processes data from a $[Readable] stream.\r\n *\r\n * It reads the entire stream, using **paused mode**, with support for both synchronous\r\n * and asynchronous data processing.\r\n *\r\n * **NOTE:** Once the method has finished, the onus is on the caller to release the stream\r\n * according to its protocol.\r\n *\r\n * @param {Object} stream\r\n * $[Readable] stream object.\r\n *\r\n * Passing in anything else will throw `Readable stream is required.`\r\n *\r\n * @param {Function|generator} receiver\r\n * Data processing callback (or generator).\r\n *\r\n * Passing in anything else will throw `Invalid stream receiver.`\r\n *\r\n * Parameters:\r\n *  - `index` = index of the call made to the function\r\n *  - `data` = array of all data reads from the stream's buffer\r\n *  - `delay` = number of milliseconds since the last call (`undefined` when `index=0`)\r\n *\r\n * The function is called with the same `this` context as the calling method.\r\n *\r\n * It can optionally return a promise object, if data processing is asynchronous.\r\n * And if a promise is returned, the method will not read data from the stream again,\r\n * until the promise has been resolved.\r\n *\r\n * If the function throws an error or returns a rejected promise, the method rejects\r\n * with the same error / rejection reason.\r\n *\r\n * @param {Boolean} [closable=false]\r\n * Instructs the method to resolve on event `close` supported by the stream,\r\n * as opposed to event `end` that's used by default.\r\n *\r\n * @param {Number} [readSize]\r\n *\r\n * When the value is greater than 0, it sets the read size from the stream's buffer\r\n * when the next data is available. By default, the method uses as few reads as possible\r\n * to get all the data currently available in the buffer.\r\n *\r\n * @returns {external:Promise}\r\n *\r\n * When finished successfully, resolves with object `{calls, reads, length, duration}`:\r\n *  - `calls` = number of calls made into the `receiver`\r\n *  - `reads` = number of successful reads from the stream\r\n *  - `length` = total length for all the data reads from the stream\r\n *  - `duration` = number of milliseconds consumed by the method\r\n *\r\n * When it fails, the method rejects with the error/reject specified,\r\n * which can happen as a result of:\r\n *  - event `error` emitted by the stream\r\n *  - receiver throws an error or returns a rejected promise\r\n */\r\nfunction read(stream, receiver, closable, readSize, config) {\r\n\r\n    var $p = config.promise, $utils = config.utils;\r\n\r\n    if (!$utils.isReadableStream(stream)) {\r\n        return $p.reject(new TypeError(\"Readable stream is required.\"));\r\n    }\r\n\r\n    if (typeof receiver !== 'function') {\r\n        return $p.reject(new TypeError(\"Invalid stream receiver.\"));\r\n    }\r\n\r\n    readSize = (readSize > 0) ? parseInt(readSize) : null;\r\n    receiver = $utils.wrap(receiver);\r\n\r\n    var self = this, reads = 0, length = 0, start = Date.now(),\r\n        index = 0, cbTime, ready, waiting, stop;\r\n\r\n    return $p(function (resolve, reject) {\r\n\r\n        function onReadable() {\r\n            ready = true;\r\n            process();\r\n        }\r\n\r\n        function onEnd() {\r\n            if (!closable) {\r\n                success();\r\n            }\r\n        }\r\n\r\n        function onClose() {\r\n            success();\r\n        }\r\n\r\n        function onError(error) {\r\n            fail(error);\r\n        }\r\n\r\n        stream.on('readable', onReadable);\r\n        stream.on('end', onEnd);\r\n        stream.on('close', onClose);\r\n        stream.on('error', onError);\r\n\r\n        function process() {\r\n            if (!ready || stop || waiting) {\r\n                return;\r\n            }\r\n            ready = false;\r\n            waiting = true;\r\n            var page, data = [];\r\n            do {\r\n                page = stream.read(readSize);\r\n                if (page) {\r\n                    data.push(page);\r\n                    // istanbul ignore next: requires a unique stream that\r\n                    // creates objects without property `length` defined.\r\n                    length += page.length || 0;\r\n                    reads++;\r\n                }\r\n            } while (page);\r\n\r\n            if (!data.length) {\r\n                waiting = false;\r\n                return;\r\n            }\r\n\r\n            var result, cbNow = Date.now(),\r\n                cbDelay = index ? (cbNow - cbTime) : undefined;\r\n            cbTime = cbNow;\r\n            try {\r\n                result = receiver.call(self, index++, data, cbDelay);\r\n            } catch (e) {\r\n                fail(e);\r\n                return;\r\n            }\r\n\r\n            if ($utils.isPromise(result)) {\r\n                result\r\n                    .then(function () {\r\n                        waiting = false;\r\n                        process();\r\n                        return null; // this dummy return is just to prevent Bluebird warnings;\r\n                    })\r\n                    .catch(function (error) {\r\n                        fail(error);\r\n                    });\r\n            } else {\r\n                waiting = false;\r\n                process();\r\n            }\r\n        }\r\n\r\n        function success() {\r\n            cleanup();\r\n            resolve({\r\n                calls: index,\r\n                reads: reads,\r\n                length: length,\r\n                duration: Date.now() - start\r\n            });\r\n        }\r\n\r\n        function fail(error) {\r\n            stop = true;\r\n            cleanup();\r\n            reject(error);\r\n        }\r\n\r\n        function cleanup() {\r\n            stream.removeListener('readable', onReadable);\r\n            stream.removeListener('close', onClose);\r\n            stream.removeListener('error', onError);\r\n            stream.removeListener('end', onEnd);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = function (config) {\r\n    return function (stream, receiver, closable, readSize) {\r\n        if (closable && typeof closable === 'object') {\r\n            return read.call(this, stream, receiver, closable.closable, closable.readSize, config);\r\n        } else {\r\n            return read.call(this, stream, receiver, closable, readSize, config);\r\n        }\r\n    };\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/ext/stream/read.js\n// module id = 142\n// module chunks = 0","'use strict';\r\n\r\nvar $npm = {\r\n    utils: require('./utils'),\r\n    batch: require('./ext/batch'),\r\n    page: require('./ext/page'),\r\n    sequence: require('./ext/sequence'),\r\n    stream: require('./ext/stream'),\r\n    errors: require('./errors')\r\n};\r\n\r\n/**\r\n * @module spex\r\n * @summary Specialized Promise Extensions\r\n * @author Vitaly Tomilov\r\n *\r\n * @description\r\n * Attaches to an external promise library and provides additional methods built solely\r\n * on the basic promise operations:\r\n *  - construct a new promise with a callback function\r\n *  - resolve a promise with some result data\r\n *  - reject a promise with a reason\r\n *\r\n * ### usage\r\n * For any third-party promise library:\r\n * ```js\r\n * var promise = require('bluebird');\r\n * var spex = require('spex')(promise);\r\n * ```\r\n * For ES6 promises:\r\n * ```js\r\n * var spex = require('spex')(Promise);\r\n * ```\r\n *\r\n * @param {Object|Function} promiseLib\r\n * Instance of a promise library to be used by this module.\r\n *\r\n * Some implementations use `Promise` constructor to create a new promise, while\r\n * others use the module's function for it. Both types are supported the same.\r\n *\r\n * Alternatively, an object of type {@link PromiseAdapter} can be passed in, which provides\r\n * compatibility with any promise library outside of the standard.\r\n *\r\n * Passing in a promise library that cannot be recognized will throw\r\n * `Invalid promise library specified.`\r\n *\r\n * @returns {Object}\r\n * Namespace with all supported methods.\r\n *\r\n * @see {@link PromiseAdapter}, {@link batch}, {@link page}, {@link sequence}, {@link stream}\r\n */\r\nfunction main(promiseLib) {\r\n\r\n    var spex = {}, // library instance;\r\n        promise = parsePromiseLib(promiseLib); // promise library parsing;\r\n\r\n    var config = {\r\n        spex: spex,\r\n        promise: promise,\r\n        utils: $npm.utils(promise)\r\n    };\r\n\r\n    spex.errors = $npm.errors;\r\n    spex.batch = $npm.batch(config);\r\n    spex.page = $npm.page(config);\r\n    spex.sequence = $npm.sequence(config);\r\n    spex.stream = $npm.stream(config);\r\n\r\n    config.utils.extend(spex, '$p', promise);\r\n\r\n    Object.freeze(spex);\r\n\r\n    return spex;\r\n}\r\n\r\n//////////////////////////////////////////\r\n// Parses and validates a promise library;\r\nfunction parsePromiseLib(lib) {\r\n    if (lib) {\r\n        var promise;\r\n        if (lib instanceof main.PromiseAdapter) {\r\n            promise = function (func) {\r\n                return lib.create(func);\r\n            };\r\n            promise.resolve = lib.resolve;\r\n            promise.reject = lib.reject;\r\n            return promise;\r\n        }\r\n        var t = typeof lib;\r\n        if (t === 'function' || t === 'object') {\r\n            var root = typeof lib.Promise === 'function' ? lib.Promise : lib;\r\n            promise = function (func) {\r\n                return new root(func);\r\n            };\r\n            promise.resolve = root.resolve;\r\n            promise.reject = root.reject;\r\n            if (typeof promise.resolve === 'function' && typeof promise.reject === 'function') {\r\n                return promise;\r\n            }\r\n        }\r\n    }\r\n    throw new TypeError(\"Invalid promise library specified.\");\r\n}\r\n\r\nmain.PromiseAdapter = require('./adapter');\r\nObject.freeze(main);\r\n\r\nmodule.exports = main;\r\n\r\n/**\r\n * @external Error\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n */\r\n\r\n/**\r\n * @external TypeError\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\r\n */\r\n\r\n/**\r\n * @external Promise\r\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/index.js\n// module id = 143\n// module chunks = 0","'use strict';\r\n\r\nvar stat = require('./static');\r\n\r\nmodule.exports = function ($p) {\r\n\r\n    var exp = {\r\n        formatError: stat.formatError,\r\n        isPromise: stat.isPromise,\r\n        isReadableStream: stat.isReadableStream,\r\n        messageGap: stat.messageGap,\r\n        extend: stat.extend,\r\n        resolve: resolve,\r\n        wrap: wrap\r\n    };\r\n\r\n    return exp;\r\n\r\n    //////////////////////////////////////////\r\n    // Checks if the function is a generator,\r\n    // and if so - wraps it up into a promise;\r\n    function wrap(func) {\r\n        if (typeof func === 'function') {\r\n            if (func.constructor.name === 'GeneratorFunction') {\r\n                return asyncAdapter(func);\r\n            }\r\n            return func;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /////////////////////////////////////////////////////\r\n    // Resolves a mixed value into the actual value,\r\n    // consistent with the way mixed values are defined:\r\n    // https://github.com/vitaly-t/spex/wiki/Mixed-Values\r\n    function resolve(value, params, onSuccess, onError) {\r\n\r\n        var self = this,\r\n            delayed = false;\r\n\r\n        function loop() {\r\n            while (typeof value === 'function') {\r\n                if (value.constructor.name === 'GeneratorFunction') {\r\n                    value = asyncAdapter(value);\r\n                }\r\n                try {\r\n                    value = params ? value.apply(self, params) : value.call(self);\r\n                } catch (e) {\r\n                    onError(e, false); // false means 'threw an error'\r\n                    return;\r\n                }\r\n            }\r\n            if (exp.isPromise(value)) {\r\n                value\r\n                    .then(function (data) {\r\n                        delayed = true;\r\n                        value = data;\r\n                        loop();\r\n                        return null; // this dummy return is just to prevent Bluebird warnings;\r\n                    })\r\n                    .catch(function (error) {\r\n                        onError(error, true); // true means 'rejected'\r\n                    });\r\n            } else {\r\n                onSuccess(value, delayed);\r\n            }\r\n        }\r\n\r\n        loop();\r\n    }\r\n\r\n    // Generator-to-Promise adapter;\r\n    // Based on: https://www.promisejs.org/generators/#both\r\n    function asyncAdapter(generator) {\r\n        return function () {\r\n            var g = generator.apply(this, arguments);\r\n\r\n            function handle(result) {\r\n                if (result.done) {\r\n                    return $p.resolve(result.value);\r\n                }\r\n                return $p.resolve(result.value)\r\n                    .then(function (res) {\r\n                        return handle(g.next(res));\r\n                    }, function (err) {\r\n                        return handle(g.throw(err));\r\n                    });\r\n            }\r\n\r\n            return handle(g.next());\r\n        }\r\n    }\r\n\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spex/lib/utils/index.js\n// module id = 144\n// module chunks = 0"],"sourceRoot":""}